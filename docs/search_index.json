[
["index.html", "This is us: making CSAFE stronger each week Chapter 1 Prerequisites", " This is us: making CSAFE stronger each week CSAFE 2019-09-26 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction This section will become the section for the administrative updates/organization once we have figured out how to use all of the bookdown features for our purposes. You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2019) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["bullets.html", "Chapter 3 Project CC: Bullets and Cartridge Cases 3.1 Data Collection 3.2 Computational Tools 3.3 Similarity Scores 3.4 Analysis of Results 3.5 Communication of Results and Methods 3.6 People involved", " Chapter 3 Project CC: Bullets and Cartridge Cases For both bullets and cartridge cases we are dealing with several inter-related aspects, that we want to address independently. Those are: data collection computational tools similarity scores for bullet lands: crosscut identification groove location curvature removal alignment of signatures feature extraction matching with trained Random Forest for breech faces analysis of results communication of results and methods 3.1 Data Collection 3.1.1 LAPD All bullets are collected by Srinivasan Rathinam, LAPD. 3.1.1.1 Main study 4 bullets per barrel for 626 Beretta 92 F/FS firearms , ammunition used are 9 mm Luger Winchester 115 grain with a Copper surface. scans are on Raven. evaluation: Yawei is going to work through all 626 barrels of knowns to assess similarity scores Figure 3.1: Results from assessing scans of barrel FAU 1 similarity. Figure 3.2: Results from assessing scans of barrel FAU 2 similarity. Why some of the cases failed? (181/626 = 30%) x3p_crosscut_optimize() failed to find the positions to get cross cut for some lands. Figure 3.3: Land scan for barrel FAU 3 bullet A land 6. Figure 3.4: Land scan for barrel FAU 4 bullet C land 5. Figure 3.5: Land scan for barrel FAU 5 bullet B land 5. Assess the land-land comparasion and bullet-bullet comparasion For bullet-bullet comparasion: we use the “sequence average maximum”(SAM), i.e. average ccf of “lines” of land-land comparasions, as the bullet similarity score(currently). By making use of 92 manually generated comparasion data, we try to produce the KM(known-matches) and KNM(known-non-matches) plot. For the known mathches, we have totally 626 x 6 = 3756 for the LAPD data, excluding the comparasions for same bullet. For the known non-matches, we don’t have the data in hand. We need to generate the data in a way. We have totally 626 x 625/2 x 16 = 313000 known non-matches. We can only generate a sample from the data. We sampled 100 bullet-bullet known non-matches from our 92 cases. Figure 3.6: KM and KNM Is the SAM(sequence average maximum) a good choice? Need to do a permutation test. Figure 3.7: SAM permutation result Figure 3.8: SAM permutation result among maxmum Possible dependence structure in land-land comparasions: Fact first: Six lands on the bullet engraved by different parts of the barrel? So they are essentially different? Any additional similarity among different lands on a same bullet? or more generally, lands from the same barrel? Figure 3.9: Inside gun barrel from google: johan-swanepoel Any suggestions? Method and literature? 3.1.1.2 follow-up study 4 bullets per barrel for 96 of the original 626 Beretta firearms using different ammunition bullets are being scanned 3.1.2 Hamby Sets Scans for Hamby Sets 10, 36, 44, and 224 Scans for 3 replicates of clones for Hamby 224 3.1.3 Houston Tests contact: Melissa Nally, Houston FSI 3.1.3.1 Pre-study 3 kits with 23 bullets each Figure 3.10: Bullet-to-bullet similarity scores for questioned bullets (y-axis) compared to all other bullets of the test set (x-axis). evaluation included in submission to JFI 3.1.3.2 Study 4 kits with 20 bullets each scans done, evaluation finished, some scans of doubtful quality 3.1.4 Houston Persistence contact: Melissa Nally, Houston FSI 8 barrels with 40 fired bullets each 3.1.5 St Louis persistence contact: Steve Kramer, St Louis PD 2 barrels with 192 fired bullets each (2 bullets collected every 25 shots) 3.1.6 DFSC Cartridge cases Breech face data for knowns are scanned and available on a private github repository evaluation 3.2 Computational Tools 3.2.1 x3ptools x3ptools is an R package for working with files in x3p format. x3p is an ISO standard for describing 3d topographic surface measurements. x3ptools is available on CRAN, i.e. can be installed with the command install.packages(&quot;x3ptools&quot;). The development version is available from github. Installation instructions and basic usage can be found at https://heike.github.io/x3ptools/ 3.2.2 bulletxtrctr bulletxtrctr is a developmental R package available from github (see https://heike.github.io/bulletxtrctr/) that allows an assessment of similarity scores using the data extraction pipeline described in Hare, Hofmann, and Carriquiry (2016). 3.2.3 grooveFinder grooveFinder is a developmental R package providing different methods for identifying the location of grooves in scans of bullets. Installation instructions and some basic usage can be found at https://heike.github.io/grooveFinder/ 3.3 Similarity Scores 3.3.1 Bullet Lands 3.3.1.1 Approaches to identify groove locations 3.3.1.1.1 Hough Transform Method for Identifying Grooves Charlotte 9/5/19 Update: Will fill in with more detail later Current Goals: - Iron-out issues with consistency of units with get_hough_grooves. I believe there are some issues translating from the 2-d visualization to the 3-d visualization that might have to do with inconsistent unit inputs? For Example Figure 3.11: 2-dimensional visualization of example bullet br411 with .999 strength threshold Figure 3.12: 3-dimensional visualization of example bullet br411 with .999 strength threshold So either somethin is wrong with get_mask_hough or something is funky with the units. Also need to think of including a sort of rounding component where lines with slopes that are practically infinite can be viewed as a vertical line Compare Hough results with manual identification using score calculations from Kiegan. Write up results in Hough Groove Paper (It’s coming I promise) Create graphical images to explain line selection method Include 2-d and 3-d visualizations of Hough groove area identifications Include crosscut visualization and comparison in results Charlotte update 09/12/19: This week I have been working on obtaining some results for the Phoenix set on Sunny. As a minor update the unit issues in get_mask_hough() are resolved ( I think). Below is an example of a nice image that has been generated using masks. Figure 3.13: Phoenix Gun1 A-9 B1 Land 4 generated at strength threshold of 0.99, initially did not generate estimates at the 0.999 or 0.995 level However the mask is only as good as the Hough estimates that supports it as shown here (less nice). Figure 3.14: Phoenix Gun1 F-6 B2 Land 5 generated at strength threshold of 0.9, initially did not generate estimates at the 0.999 or 0.995, or 0.99 level Hough crosscut predictions for the Phoenix dataset are now uploaded to the bulletQuality Github in the“results” folder and contains Hough groove estimates at the following five strength levels: 0.999, 0.995, 0.99, 0.95, 0.9. The source and the crosscut estimate are also included in the dataset. Here are some preliminary results of using Kiegan’s area of misidentification method (thanks Kiegan!) on Hough groove estimates at the strength threshold of 0.999 in comparison to the BCP and Lasso method. Figure 3.15: Left-hand groove area of misidentification log-transformed scores for BCP, Lasso, and Hough Figure 3.16: Right-hand groove area of misidentification log-transformed scores for BCP, Lasso, and Hough These scoresare log transformed to show better separation but it’s very clear that for the left groove both Lasso and BCP are out performing the Hough method in correctly identifying grooves. For the righthand side, scores tend to be more similar however once again, the Lasso method seems to bo the best job since it has a larger density of low scores and minimizes high score misidenfitications. For improvement before next week, I will investigate why there are 47 missing Hough predictions resulting in a score of 0 in these results and change the parameters in the get_grooves_hough() function to try and generate estimates for some of those missing values. Charlotte update 09/19/2019: This week we are trying to think of a new way for selecting Hough lines for bullet estimates. The previous method for selecting Hough lines was to find lines with x-intercepts at the top and bottom of the lands closest to the lower and upper one sixth of the bullet lands. However this process was highly dependent on score thresholding from the Hough transform which is frustrating when running a large number of bullets since if the right score threshold was not achieved, no result would be produced. So right now I’m working on a way of selecting Hough lines from the normalized Hough scores. To obtain a normalized Hough score I take the x-intercepts of each estimated Hough line generate and find the distance between the x-intercept at the top and the bottom of the land. This should give me the max possible score for each Hough line, rather than calculating based on theta. Then I take the Hough score and divide by this maximum to normalize scores between 0 and 1. Right now I am working on visualizing some of these results but my code is buggy because I’m getting negative values when I try to visualize the process using masks when I shouldn’t. Here is an example of a bullet land using the old and new method. Really similar results although it would appear that the new resut places the Hough transform lines further in to interior of the land than the old results. So that’s promising? Figure 3.17: Phoenix Gun 1-A9 Bullet 3 Land 1 visualized using current Hough process message Figure 3.18: Phoenix Gun 1-A9 Bullet 3 Land 1 visualized using new Hough process message Charlotte Update 09/26/2019: Fixing the normalization of the scores for Hough grooves. Instead of dividing by the geometric distance between the top and bottom intercepts of the bullet image. Now we only consider Hough lines that actually go through both the top and bottom of the land, therefore we can normalize each score by dividing the original hough score by the height of the image and multiplied by the cosine of theta which accounts for the difference in length of lines with differing angles. As far as selecting normalized scores from every score possible I found that there is really no visual difference between selecting the highest normalized Hough score and the other top five. Figure 3.19: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index one Figure 3.20: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index ten Figure 3.21: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index twenty So for now we will continue to select the highest normalized Hough score to use as our bullet land estimates. After fixing the parameterization of the Hough scores and how we normalize Hough scores, the 3-dimensional images appear to have improved! Which is great news since no thresholding was necessary. Figure 3.22: Hamby Bullet 1 Land 1 visualized using new Hough process Still we run into the problem that our masks are only as good as our estimates, however even this terrible bullet land appears to have grooves identified somewhat well. Figure 3.23: Hamby Bullet 1 Land 4 visualized using new Hough process A comparison between the two methods finds that generally the new Hough process out-competes the old one on nearly every bullet land in the Hamby 252 demo set. Figure 3.24: Crosscut Results Hamby 252 Demo Set Comparison between old and new methods 3.3.1.1.2 LASSO Method A paper is in preparation for submission to Forensic Science International describing this method (get_grooves_lassofull in grooveFinder), as well as the Bayesian changepoint method (get_grooves_bcp). 3.3.1.1.3 Robust LOESS Method A paper submitted to the Journal of Forensic Science is waiting for peer review response to the first round of revisions. 3.3.1.2 Bullet Land Comparisons Pipeline Most data analysis processes can be thought of as a data analysis “pipeline”. This process can involve data collection, decisions about data cleaning, data transformation or reduction, and feature engineering. For example, consider the general process below: In the case of the bullet project, we have a pipeline which starts with having two physical bullet LEAs and ends with a quantitative result, a random forest similarity score. Our pipeline could be described (roughly) as something like this: To make this a little easier to see, we can look at how a 3D scan is processed into a 2D signature: Now, something important to consider is whether each of these “data decisions” has an impact on the quantitative result (here, a similarity score between two LEA signatures). Consider a simple set of decisions we could make in our bullet pipeline: If we have a pair of signatures, we could theoretically end up with 16 different similarity scores depending on the decisions we make at each point. That is also assuming that both signatures were processed in the same way at each point. This year, I’ll be studying our bullet land “pipeline” here at CSAFE, as well as pipelines that are a little different than ours (e.g., Chu et al. (2010)). There are a few major goals I am working towards: Quantifying the uncertainty of our RF similarity scores based on data decisions Comparing reproducibility/robustness of differing bullet analysis approaches Hare, Hofmann, and Carriquiry (2016) vs. Chu et al. (2010), for example Crosscuts: method 1 vs. alternate? Crosscut parameter tuning? Groove methods Original RF vs. updated/retrained/re-engineering Reproducibility/robustness of different approaches when we consider data COLLECTION. Goal 3 is a major part of this pipeline process which I have been working on since the spring! We designed and collected a bullet scanning variability study of 9 bullets. I’m working on formally modeling the variability at the signature level, taking two major approaches: Subsampling and assuming independence; Directly modeling out the mean structure Ignoring peak/valley dependence Using time series/spatial dependence modeling Using a Bayesian shrinkage prior (w/help from Amy!) Results for Method 1, the subsampling, looks something like this: I will be updating with more on the “direct” modeling in my next Spotlight! From Kiegan: I am in Michigan this week! As a quick update, I am working on some background reading and planning for how to most effectively set up our pipeline experiments. The code in bulletxtrctr is already really well set up as a data “pipeline”, so now we are conceptualizing the best way to wrap the pipeline and keep track of what decisions are made along the way. 3.3.2 Cartridge Cases 3.3.2.1 Congruent Matching Cells (CMC) algorithm for comparing cartridge case breech face impressions Joe 9/5/19 Update: Explanation of missing value problem when calculating cross-correlations and some attempted fixes. Dealing with missing values in the x3p scans continues to be an issue. The Fast Fourier Transform method for calculating cross-correlation can’t handle missing data in an image, so we’ve attempted a few “fixes” that haven’t necessarily turned out as well as expected. One idea we had was to replace the NA values in a cell with the average pixel value. However, this is artificially introducing a signal where before there was none. This can (and demonstrably has) led to inflated/incorrect correlations between cells that shouldn’t have much at all in common. Unfortunately, this may be the only solution if we still wish to adhere to the CMC algorithm as described in Song et al. (2015). One improvement that I’ve implemented is to “crop out” the rows and columns of an image that only contain NAs. This at least means that we’ve weakened the strength of the artificial signal relative to the breechface’s signal. Below is a series of images that illustrate how we might compare a cell in one image to a region of another image. Figure 3.25: Comparing a cell in image 1 to a larger region in image 2. We wish to find the translations of the image 1 cell that yield the highest correlation within the image 2 region. For the sake of an example, let’s focus on the blue outlined cell in image 1. Our goal is to use the image 1 cell to “search” a corresponding larger region in image 2 for the horizontal/vertical translations needed to produce the highest correlation. Below is a zoomed-in version of the blue outlined image 1 cell on the left and the larger image 2 region (approximately: I made the gridded image above by-hand outside of R while the images below are from R). The image 1 cell may look larger than the image 2 region, but we can see from the axes that the image 2 region is indeed larger. Any white pixels in the two images are NA values that need to be dealt with in some way before we can use FFTs to calculate the cross-correlation. Figure 3.26: (Left) A cell from image 1. (Right) A region from image 2 centered in the same location as the image 1 cell, yet quadruple the area. As already discussed above, one “solution” is to replace the NA values with the average pixel value of each image. However, to avoid creating a stronger artificial signal than necessary, we can crop-out the NA rows and columns from the two images above. Below is the cropped version of the two images. The cropping doesn’t produce signficantly different images in this case, but you could imagine other examples in which a cell has captured only small amount of breechface in the corner. Such examples are fairly common and cropping signficantly changes the resulting correlation values. Figure 3.27: The same images as above after cropping NA rows/columns. The last step before calculating correlation for these cells is to replace the remaining NAs with the average pixel value. This is shown below. Figure 3.28: The NA-cropped images with remaining NAs replaced with the image’s average pixel values. The cross-correlation is then calculated between these two images via a standard fast fourier transform process (see Cross-Correlation Theorem). The benefit of using such a process is that (as the name suggests) it’s faster than calculating the raw correlation between the two images. Also, the translations that produce the highest correlation between the image 1 cell and the image 2 region fall out of the calculation for free. This pre-processing/cross-correlation calculation procedure is repeated for every cell in image 1 that contains breech face impression. Because it is not valid to assume that the two images are rotationally aligned by default, we perform the same procedure repeatedly while rotating image 2. Currently, we perform a “rough” grid search of \\(\\theta \\in [-177.5,180]\\) by increments of \\(2.5^{\\circ}\\). Theoretically, the final results tell us how we need to horizontally/vertically translate and rotate the two images to be correctly aligned. 3.3.2.2 Congruent Matching Tori: a promising solution to the missing value problem Joe 9/5/19 Update (cont’d): A brief introduction to a congruent matching “tori” method that may provide a better solution to the missing value problem. As discussed above, dealing with missing values is provign to be a pain. The good news is that the currently-implemented CMC as described above yields results very similar to those published in Song et al. (2015) that originally describes that CMC algorithm. While our results seem to agree with currently published results, it would be nice if we could avoid needing to artifically replace missing values. We can do so if, rather than breaking up the circular breech face impression scans into disjoint squares, we break up the breech face impression into donut-shaped regions containing only breech face impression. Below is an example of such a toroidal region. Figure 3.29: (Left) The original breech face impression scan image. (Right) A donut-shaped region cut out of the original image. By comparing such regions instead of the square cells, we would presumably only need to fill in a few missing value “holes” in the breech face impression scan rather than completely replacing a non-existent signal with an artificial one. In the near-future, I hope to finish up the pre-processing needed for this Congruent Matching Tori method by performing a polar transformation on these images to make them into strips that can easily be compared via an FFT. Joe 9/12/19 Update: Explanation of some of the pre-processing steps needed to make the CMC work as described in Tong et al. (2015) Before carving out toroidal regions from the two images we wish to compare, a fair amount of pre-processing needs to be completed. For example, the scans we work with begin with a considerable amount of auxiliary information, for example the firing pin impression, that we don’t want to use in our comparisons. This isn’t to say that firing pin impressions aren’t useful to determine a match between two cartridge cases. In fact there is quite a lot of published research on how to compare two firing pin impressions. Rather, it is common practice to compare breech face impressions and firing pin impressions separately since it is difficult to scan both simultaneously. Thus, there are regions of a breech face impression scan that we want to remove so that the breech face impressions are more easily comparable. Below is an example of two breech face impression scans before processing. Figure 3.30: Two cartridge case scans before pre-processing. There are a variety of techniques to segment an image into various parts. In image processing, common techniques are the Canny edge detector, which identifies edges of shapes in an image using image gradient techniques, and the Hough Transform, which can detect a variety of geometrical shapes in an image. The Hough Transform is what is used to segment the cartridge case images used in the previous section. However, we’ve found that the use of a Hough Transform doesn’t extract the “breech face signal” from an image as other techniques. Namely, the breech face can be effectively extracted using the RANSAC (Random sample consensus) method that iteratively fits a plane to a set of data until it settles upon a consensus-based “bulk” of the data. In the case of these cartridge case scans, the bulk of the data should predominantely be distributed around the mode height value. That is, the breech face impression. Once we’ve fit this plane to the breech face impression, we can extract the residuals of the fit to better accentuate the markings left in the cartridge case base by a firearm’s breech face. Below is an example of the residuals left after fitting a RANSAC plane to two cartridge case scans above. In the example below, we grab any residuals less than 20 microns in magnitude. Figure 3.31: Residual values of a RANSAC plane fit to the two cartridge case scans shown above. Although these two images are of two different cartridge cases, you can hopefully see that one looks very much like a rotated version of the other. These two cartridge case scans are in fact fired from the same gun (known matches), so it’s a good thing that they look so similar. We’ve now removed quite a bit of the unwanted regions of the original scans. However, there are still some areas of the image (e.g., the faint circular region of pixels in the center of the breech face scan) that just so happened to be close to the fitted plane and thus were brought along in the residual extraction. There are a few ways that we can clean up these last few areas. One is to use two Hough Transforms to detect the inner and outer circles of the breech face impression and filter out any pixels outside of the region between these two circles. The biggest issue with using a Hough Transform is that it must be given the radius of the circle that it is to search for in the image as an argument. That is, we need to know the radius of the breech face impression that we haven’t yet identified in order to identify the breech face impression. Instead, we can dilate/erode (or vice-versa) the pixels in the image to remove the remaining “speckle” in the image. Below is an example of of the breech face impressions cleaned via a dilation/erosion procedure. Figure 3.32: The selected breech face impressions based on dilation and erosion. The final step in the pre-processing is to align the two images in some consistent fashion. Luckily, the firing pin impression ring that’s left after performing the above dilation/erosion provides us with some idea of how to align the breech face impressions. The location of the firing ring impression in the breech face impression provides us with an indicator of where the cartridge case was located relative to the firing pin when it was sitting in the barrel. So aligning two cartridge cases so that their firing pin impression rings align will ensure that, at the very least, the breech face impression left on the cartridge case is horizontally/vertically aligned if not rotationally aligned. Joe 9/18/19 Update: Continuation of pre-process explanation with a discussion on how we can automatically detect the firing pin impression radius in an image. To automatically detect the radius of a given breech face impression, we can count the number of non-NA pixels in each row. If we were to imagine scanning down an image and counting the number of non-NA pixels in each row, then this count would obviously start to increase the moment we hit the top of the breech face impression. Because the breech face impressions are circular, the count would continue to increase the further down the image we scan. That is, until we hit the firing pin impression circle. At this point, because the firing pin impression circle consists of NAs, we would expect the non-NA pixel count to dip. This increasing followed by decreasing behavior in the non-NA pixel count constitutes a local maximum. We can use this local maximum of the non-NA pixel count to identify the beginning of the firing pin impression circle. Similarly, we would expect the non-NA pixel count to reach another local maximum once we hit the end of the firing pin impression circle. It’s then a simple subtraction of the two row indices containing these local maxima to determine an estimate for the diameter of the firing pin impression circle. We can see below an example of the non-NA pixel row sums plotted against the row indices (starting from the top of the image and moving down). You can hopefully see that the raw row sums are rather “noisy”. As such, we can pass a moving average smoother over the row sum values so that the local maxima are easier to identify. This may not be the most robust way to determine the local maxima. I hope to investigate the use of b-splines fit over the row sum values to see if these would be more effective at finding local maxima Figure 3.33: Non-NA pixel row counts and moving average-smoothed row count values plotted against row index. However, because firing pin impression circles have somewhat perforated edges, performing one pass through the image may not yield a particularly accurate estimate. As such, we can repeat the process of finding the distance between local maxima for both the row and column non-NA pixel counts. We can also rotate the image by a few degrees and perform the same process. I am currently rotating the image 0, 15, 30, 45, 60, and 75 degrees and calculating row and column diameter estimates per rotation. Obviously we can apply whatever aggregation function we desire to these estimates to determine a final estimate. Below we see what the Hough Transform selects as the breech face for 4 different radii values. In particular, for circles of radius 210, 213, 216, and 219. Figure 3.34: Hough Transform selected circles (red) of radius (1) 210, (2) 213, (3) 216, and (4) 219. Joe 9/25/18 Update: Dilation and erosion of the breech face impression image seems to be fairly effective, but require some parameter tuning based on the firing pin impression we’re considering (e.g., effective erosion in one image may have a different, adverse effect in another image). The watershed algorithm appears to be a promising alternative to selecting the breech face impression out of an image containing extra “minutiae”. When trying to select the breech face impression out of an image such as the one below (this is a slice of the original scan based on the RANSAC method-selected breech face impression z-value), we’re really just interesting in obtaining a yes/no answer for each pixel to the question: “Are you a part of the breech face impression?” As such, rather than looking at the considering the raw pixel values, we can binarize the image to a 1/0 (equivalently, non-NA/NA) pixel representation. Such a representation is below. Figure 3.35: (Left) Residual values of a RANSAC plane fit to a cartridge case scan. (Right) Binarized non-NA/NA image for segmentation. Using this “indicator image”, the beginning/end of the breech face impression should be much more obvious to, say, a Canny edge detector. Below is the output of such a Canny edge detector. Figure 3.36: The edges of the binarized image above via a Canny edge detector. From here, we can use a Watershed image segmentation procedure to identify various regions within this image. The Watershed algorithm needs to be given a set of pixel locations that the user believes to be within distinct regions of the image. With these “seed” pixels, the algorithm then searches neighboring pixels and attempts to identify them as within/without the same region. Almost as if a water source turned on at the given seed pixel and water began to spread to as many neighboring pixels as it could. The water should “stop” at the black lines in the image above, thus defining the boundary of a seed pixel’s region. An example of the above image post-segmentation is given below. The 5 seed pixels I used were the 4 corners and center of the image. As we can, the watershed algorithm “overflowed” into the breech face impression, but segmented the firing pin impression circle from the rest of the image. Because most of the minutiae that we want to remove is in within this firing pin impression circle, this is not a problem for our purposes. With 5 seed images, there are technically 5 segments represented in the image below (although it’s hard to see where the outer segments begin/end). So as shown below, we can just binarize the segments as being a part of the firing pin impression circle or not. Figure 3.37: (Left) Watershed segmentation of the Canny edge image above. (Right) The firing pin impression circle binarization of the Watershed segmentation image. Finally, now that we’ve identified where the firing pin impression circle is in the original image, we can simply replace any pixel values within this circle with NAs. The final filtered image is shown below. Figure 3.38: Final filtered image. 3.3.3 Modified Chumbley non-random test 3.3.3.1 Land-to-land scores The moified Chumbley non-random algorithm is a statistical non-paramaetric test that compares two signatures under consideration and gives a test statistic. The test statistic is used to make classifications and compute error rates based on different nominal type I levels. The basic principle behind the method is to first take two marking that have to be compared, choose a segment length which is a portion of the signature, and use this window segement to find which windows give the maximum correlation. The lag between these respective markings is computed based on the location of the two maximum correlation windows in the two markings. Now the algorithm works in two steps where first, lag congruent correlations between several smaller windows of the two markings are computed, this is called the same-shift. The second step serves the purpose of computing windows of correlation between the two signatures with window sized the same as the same-shift, but the with the purpose of finding correlations when the windows are not lag synchronized. The second step is called different shift step and has a specific order in which the pair of windows are chosen between which the correlations are to be computed. The different-shift serves as benchmark for comparison. It shows a set of bad correlations, against which the same-shift correlations are compared. A U-statistic is computed for the comparison based on the correlations in this procedure. The modified chumbley method (Krishnan and Hofmann 2019) can work with two markings at a time. Therefore the method can be used for comparing signatures from one land to signature from another land. The land-to-land comparison was performed for Hamby 44 dataset from (Zheng 2016) and CSAFE (Krishnan and Hofmann 2019) and associated error rates were computed for these comparisons. 3.3.3.2 Bullet-to-bullet scores In this method we extend the modified chumbley non-random method from land-to-land scoring to bullet-to-bullet scoring. In order to do this, first 6 ordered pairs of lands between the two bullets are chosen for comparison. The modified chumbley method is used on these 6 pairwise comparisons. This results in the same-shift and different-shift comparisons from each of the 6 comparisons. We do not need a land-to-land pairwise U-statistics and classification in this method. Instead all the same-shift and different-shift correlations are now aggregated from the 6 comparisons and a new non-parametric U test is used on the aggregated sets. This gives a test statistic at the bullet level and consequently we can compute p-values. This is used with different nominal significance levels to identify bullet level error rates. 3.4 Analysis of Results 3.5 Communication of Results and Methods The results are communicated through an interactive user interface. The first part of this interface lets you add all the bullets, barrels and lands for which the random forest and other scores are to be computed. A preliminary diagnostic of the orientations and dimensions of the lands tell us, if we can proceed safely to extraction of markings and then to cross-comparisons. After this step, we can apply any sampling or interpolation needed on the land images, all these operations can be batched to the entire set of comparisons under consideration. Then we can make transformations like rotation, transpose etc on a sample image, visualize the results, and since we are dealing with conforming orientation and dimensions of lands present in the entire set, we can batch the transformations. We extract markings, locate grooves, align signatures, and generate cross-comparison results. Each step is notified in UI and all steps are logged. The scores and results are then communicated through an interactive visualization. We first interact at the top most level where we have bullet-to-bullet scores for all the cross-comparisons presented in a grid. We can select one comparison at a time which would generate a second level of grid visualization that shows the land-to-land scores for all 36 comparisons within a bullet. Interacting with this visualization, we can now pull up score tables, profiles, location of grooves, aligned signatures and raw images. The framework of interactions, allows for validation of classification recommended by the RF model as well as gives an opportunity to critically asses, identify the cause and diagnose any problems encountered in the bullet matching pipeline. Figure 3.39: An instance of the interactive visualizations for communicating results 3.5.1 Conference Presentations 3.5.1.1 American Academy of Forensic Sciences “Validation Study on Automated Groove Detection Methods in 3D Bullet Land Scans” February 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Presentation given by Kiegan Rice 3.5.1.2 Association of Firearms and Toolmark Examiners Annual Training Seminar Heike’s talk “Reproducibility of Automated Bullet Matching Scores Using High-Resolution 3D LEA Scans” May 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Presentation given by Kiegan Rice 3.5.1.3 Joint Statistical Meetings “A non-parametric test for matching bullet striations: extending the chumbley score for bullet-to-bullet matching” July 2019 Authors:Ganesh Krishnan, Heike Hofmann Talk given by Ganesh Krishnan “Repeatability and reproducibility of automated bullet comparisons using high-resolution 3D scans” July 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Poster presented by Kiegan Rice 3.5.1.4 Miscellaneous 10th International Workshop on Statistics and Simulation in Salzburg, Austria, September 2019 “Reproducibility of High-Resolution 3D Bullet Scans and Automated Bullet Matching Scores” Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Poster presented by Kiegan Rice, won 2nd Springer Poster Award “Case Study Validations of Automatic Bullet Matching” Authors: Heike Hofmann, Susan VanderPlas Presentation given by Alicia Carriquiry 3.6 People involved 3.6.1 Faculty Heike Hofmann Susan VanderPlas 3.6.2 Graduate Students Ganesh Krishnan Kiegan Rice Nate Garton Charlotte Roiger Joe Zemmels Yawei Ge 3.6.3 Undergraduates Talen Fisher (fix3p) Andrew Maloney Mya Fisher, Allison Mark, Connor Hergenreter, Carley McConnell, Anyesha Ray (scanner) References "],
["project-g-handwriting-signatures.html", "Chapter 4 Project G: Handwriting (&amp; Signatures) 4.1 Data Collection 4.2 Computational Tools 4.3 Statistical Analysis 4.4 Communication of Results 4.5 People involved", " Chapter 4 Project G: Handwriting (&amp; Signatures) The handwriting project has four major focuses: data collection computational tools statistical analysis glyph clustering closed set modeling for writer identification communication of results 4.1 Data Collection We are conducting a large data collection study to gather handwriting samples from a variety of participants across the world (most in the Midwest). Each participant provides handwriting samples at three sessions. Session packets are prepared, mailed to participants, completed, and mailed back. Once recieved, we scan all surveys and writing samples. Scans are loaded, cropped, and saved using a Shiny app. The app also facilitates survey data entry, saving that participant data to lines in an excel spreadsheet. Data collection is underway with the most recent update (9/1) at 106 participants enrolled: 44 complete through session #3 52 complete through session #2 10 complete through session #1 As of September 2019, Marc and Anyesha are the primary contacts for the study. 4.2 Computational Tools handwriter is a developmental R package hosted at https://github.com/CSAFE-ISU/handwriter. It is our major computational tool for the project. The package takes in scanned handwritten documents and the following are performed. Binarize. Turn the image to pure black and white. Skeletonize. Reduce writing to a 1 pixel wide skeleton. Break. Connected writing is decomposed into small manageable pieces called glyphs . Glyphs are graphical structures with nodes and edges that often, but not always, correspond to Roman letters, and are the smallest unit of observation we consider for statistcal modelling. Measure. A variety of measurements are taken on each glyph. Figure 4.1: Connected text processed by handwriter. The grey background is the original pen stroke. Colored lines represent the single pixel skeleton with color changes marking glyph decomposition. Red dots mark endpoints and intersections of each glyph. For an input document, functions in the package give back a list of glyphs with path and node location information, adjacency grouping assignment, slope (pictured below), and centroid locations, among other things. Figure 4.2: A visual of the ``slope’’ calculation for two glyphs. We are currently working to incorporate the cluster grouping assignments into the package. This will be complete pending creation of a template. 4.3 Statistical Analysis 4.3.1 Clustering Background to be added here. Paper submitted! … 4.3.2 Closed set modelling The following will be the jumping off point for purposes of this book with respect to modelling and discussion of results. Poster given at the 10th International Workshop on Simulation and Statistics 4.4 Communication of Results Presenting author is in bold. 4.4.1 Papers “A Clustering Method for Graphical Handwriting Components and Statistical Writership Analysis” Authors: Nick Berry, Amy Crawford Submitted to The Annals of Applied Statistics in September 2019. “Bayesian Hierarchical Modeling for Forensic Handwriting Analysis” Authors: Amy Crawford, Alicia Carriquiry, and Danica Ommen In preparation for submission to PNAS 4.4.2 Talks “Statistical Analysis of Handwriting for Writer Identification” August 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry, Danica Ommen American Society of Questioned Document Examiners (ASQDE) Annual Meeting in Cary, NC. “A Bayesian Hierarchical Mixture Model with Applications in Forensic Handwriting Analysis” July 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry Danica Ommen Joint Statistical Meetings (JSM) in Denver, CO. “Forensic Analysis of Handwriting” July 2019 Authors: Alicia Carriquiry, Amy Crawford, Nick Berry, Danica Ommen VI Latin American Meeting on Bayesian Statistics (VI COBAL), Lima, Peru. “Exploratory Analysis of Handwriting Features: Investigating Numeric Measurements of Writing” February 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry, Danica Ommen American Academy of Forensic Sciences (AAFS) Annual Meeting in Baltimore, MD. “Toward a Statistical and Algorithmic Approach to Forensic Handwriting Comparison” August 2018 Authors: Amy Crawford and Alicia Carriquiry American Society of Questioned Document Examiners (ASQDE) Annual Meeting in Park City, UT. “A Bayesian Approach to Forensic Handwriting Evidence” July 2018 Authors: Amy Crawford and Alicia Carriquiry Joint Statistical Meetings (JSM) in Vancouver, BC, Canada. “Bringing Statistical Foundations to Forensic Handwriting Analysis” May 2018 Authors: Amy Crawford and Alicia Carriquiry American Bar Association, 9th Annual Prescription for Criminal Justice Forensics Program in New York, NY. 4.4.3 Posters “A Bayesian Hierarchical Model for Forensic Writer Identification” August 2019 Authors: Amy Crawford, Alicia Carriquiry, Danica Ommen 10th International Workshop on Statistics and Simulation in Salzburg, Austria 1st Springer Poster Award “Statistical Analysis of Handwriting” May 2019 Authors: Amy Crawford and Nick Berry CSAFE Annual All-Hands Meeting in Ames, IA “Statistical Analysis of Letter Importance for Document Examination” February 2018 Authors: Amy Crawford and Alicia Carriquiry American Academy of Forensic Sciences in Seattle, WA YFSF Best Poster Award (Presented AAFS 2018 Poster for a Second Time) May 2018 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry, Danica Ommen CSAFE Annual All-Hands Meeting in Ames, IA 4.5 People involved 4.5.1 Faculty Alicia Carriquiry Hal Stern (UCI, Project G PI) Danica Ommen 4.5.2 Graduate Students Amy Crawford 4.5.3 Undergraduates Anyesha Rey (data collection) James Taylor (feature extraction) "],
["glass-chemical-compositions.html", "Chapter 5 Glass: Chemical compositions", " Chapter 5 Glass: Chemical compositions Evaluation and comparison of methods for forensic glass source conclusions, Soyoung Park and Sam Tyner Get reviews back from Forensic Science International Most of comments from Reviewer1 are minor on format or forensic background Reviewer2 said I very much enjoyed reading your paper and congratulate you on a really nice piece of work What we plan to do, Revise the maunuscript as comments by reviewers ASAP Will get more data Write a paper describing data in Data in Brief "],
["shoes.html", "Chapter 6 Shoes 6.1 Longitudinal Shoe Study 6.2 Passive Shoe Recognition 6.3 Maximum Clique Matching 6.4 Project Tread (formerly Cocoa Powder Citizen Science) 6.5 3d Shoe Recognition 6.6 Shoe outsole matching using image descriptors", " Chapter 6 Shoes 6.1 Longitudinal Shoe Study Github repository 6.1.1 Paper describing the database Paper subdirectory of Github repository Goal: Describe experiment Describe database function Publicize data for analysis by others in the community Methods and Data Description Methods and data description handed off to Alicia for editing Data Analysis Tools Working with the EBImage package - very fast processing of images ShoeScrubR package All analysis methods for the Longitudinal data are contained in the ShoeScrubR package. The ShoeScrubR package also includes logging of all image-in image-out operations using attributes - each time a transformation is performed, the transformation and the parameters are appended to the running operations log. This should make it possible to track the provenance of an object through the set of transformations (and potentially un-do them in some cases). Film and Powder Images The images are challenging to do basic statistical analysis on because the shoe print is made up of tiny particles (e.g. it is not a solid object), and there are areas of smudged particles outside the image (fingerprints, etc.) that can be hard to automatically remove. In addition, the film backing has subtle variations in color. The prints are not rotationally aligned, that is, they are taken at a variety of angles (usually \\(\\pm 15^\\circ\\) from vertical) which vary due to individual differences in walking style, the orientation of the film, and changes in experimental protocol. Experimental protocol changes included resolution changes for the scans over time: the resolution of the last set of images is about 2 times higher than the resolution of the first 3 check-ins worth of images. Thus, parameters need to be automatically selected based on the resolution of the image. (Still to do) The initial use of templates to clean up the image requires addressing the alignment of the print and the template. As this experiment contains 8 total shoe model and size combinations, it is possible to create a template for each shoe model and use that template to isolate the region of the image which contains a set of features most likely to be a shoe (rather than random noise). Solving the template problem by aligning the mask and template yields an additional benefit: the resulting cleaned up image is roughly aligned relative to the template and, presumably, to other images. Rough Alignment of Template Mask and Image: Clean images, do a rough alignment between the image and the corresponding shoe mask (per model and size). Rotationally align image and mask using principal components on the non-background pixels in the image Gross align the center of mass of the non-background pixels in the image and mask Use a “mask-ified” version of the shoe print that encloses most of the shoe region in a single region Default to trimming the actual print by 5% on each dimension to minimize the effect of page borders and creases Pad the image and mask so that the centers are aligned and the image and mask are the same size Set any pixels outside the mask to background Before: After: These steps are wrapped into the rough_align function in the ShoeScrubR package. Fine Alignment of Template Mask and Image: Brute-Force, but with image pyramids to reduce computing time. Todo… Wear Characterization Ideas: average intensity of cleaned image length of border/edges detected 6.2 Passive Shoe Recognition 6.2.1 NIJ Grant Grant scope: Build the shoe scanner, develop an automatic recognition algorithm for geometric design elements, test the scanner in locations around Ames. 6.2.2 CoNNOR: Convolutional Neural Network for Outsole Recognition Project Overview Label images of shoes according to geometric classification scheme Use convolutional base of pretrained CNN VGG16 and train a new classifier on labeled features Eventually, acquire real data passively and use CoNNOR to assess feature similarities and frequencies Link to submitted Creative Component on CoNNOR Github repository for paper submitted to Forensic Science International Exploring new directions: Truncate convolutional base and train random forest on features Could replace fully connected layers of neural net as classifier Importance score can filter/reduce the number of features Block 4 random forest training terminated after one week :( Block 5 currently training for two different random forest packages (randomForest and ranger) If new models take more than 1-2 weeks, will look into subsampling techniques. Spatial integration Model is currently set up to take in 256x256 pixels Try taking in full shoe using a sliding window of size 256x256 View class predictions spatially Fully convolutional networks (FCNs) Unsupervised segmentation to assess current classification scheme Handle whole shoe image of any size (instead of only 256x256 pixel images) References for CNNs and FCNs Stack Exchange post explaining patchwise training “Learning Hierarchical Features for Scene Labeling”: describes an application of multi-scale CNNs and image pyramids “Pyramid methods in image processing”: classic paper from 1984 explaining pyramid methods “Fully Convolutional Networks for Semantic Segmentation” “W-Net: A Deep Model for Fully Unsupervised Image Segmentation” 6.2.3 Spatial integration The overhead costs of going fully convolutional are high; CNN papers are opaque, and many supervised techniques require fully labeled data for semantic segmentation (i.e., label every pixel). Moreover, complex models (for both supervised and unsupervised tequniques) are often only available in Python, and there are a large number of GitHub repositories of mixed quality and reliability. Filtering for quality, understanding code structures, and implementing them on HPC are all enormous tasks on their own. In the meantime, it is much easier (relatively speaking) to use our existing framework of 256x256 square pixel images, for which we have generated thousands of labeled images and have already trained and improved domain-specific models. Currently, I have code working to automatically crop image borders, chop the image into 256x256 pixels (padding the image when appropriate) and correct the contrast on the individual images. I hoped to have some cool visualizations to show today. Unfortunately, model predictions are behaving very strangely trained models won’t currently load in my session. I have definitely angered bigfoot. Goal: Cut up the shoe into 256x256 square pixel images Predict on each image (one prediction per class per sub-image) Repeat for multiple types of cuts (e.g., starting at different offset values, zooming in or out before cutting) Smooth out predictions and visualize them overlaid on the original image Evaluate model predictions 6.3 Maximum Clique Matching 6.4 Project Tread (formerly Cocoa Powder Citizen Science) Project Tread, modified from Leverhulme Institute’s Sole Searching, is a developing CSAFE project with the goals of engaging community participation in forensic research and acquiring shoe print data that may be useful in future analyses. In progress: Review procedures and IRB documents written by James Perhaps modify procedures, then bribe some friends into helping me test them :) Test for length, clarity, ease, etc. Be involved in set up of data collection site (through CSSM) 6.4 Comparing the procedures Procedure Leverhulme CSAFE ‘Before’ Pictures 4 per shoe 15 per shoe Paper Letter (larger) Tape printer paper Actions Run, jump, walk Step, hop Replicates 6 per shoe 9 per shoe ‘After’ Pictures 1 pic per print 3 pics per print Total number prints 18 per shoe 18 per shoe Total number images 18 per shoe 54 per shoe 6.5 3d Shoe Recognition -LESSON LEARNED….. PUSH OFTEN The set up: What we have tried What we are doing now - Transforming the mesh objects to points aligned by the center of mass to overlay them detecting difference. - Problems - Isnt aligning properly as you can see - Next - angle transformations 6.6 Shoe outsole matching using image descriptors Previously, features such as edge, corner, SURF were extracted to match shoeprints. The goal of this project is to find other image descriptors as image features for shoe print matching. Image descriptors SURF(Speeded Up Robust Features)- blobs KAZE - blobs ORB(Oriented FAST and Rotated BRIEF)- corners Image matching CSAFE data - Nike size of 10.5 and Adidas size of 10 will be used to construct mated and non-mated matching Features will be combination of strong 100 points of KAZE, ORB, SURF. "],
["theoretical-foundations.html", "Chapter 7 Theoretical foundations 7.1 Common Source vs Specific Source Comparison via Information Theory 7.2 Score-based Likelihood Ratios are not Fundamentally “Incoherent”", " Chapter 7 Theoretical foundations 7.1 Common Source vs Specific Source Comparison via Information Theory 7.1.1 Introduction Central Goals continue work started by Danica and Peter Vergeer on the analysis of likelihood ratios study the differences between specific source (SS) and common source (CS) likelihood ratios (LRs) in an information theoretic way does the CS or SS LR have more “information”? does the data (or the score) have more “information” about the SS or the CS hypothesis? can be the CS or SS hypotheses (prosecution or defense) be formally compared in terms of being easier to “prove” or “disprove”? General Notation Let \\(X \\in \\mathbb{R}^{q_x}\\) and \\(Y \\in \\mathbb{R}^{q_y}\\) be two random vectors with joint distribution \\(P\\) and corresponding density \\(p\\). : \\(\\mathbb{H}(X) = -\\int{p(x) \\log p(x) dx}\\) : \\(\\mathbb{H}(X|Y) = \\mathbb{E}_{Y}\\left[-\\int{p(x|y) \\log p(x|y) dx}\\right]\\) : \\(\\mathbb{H}_{2}(X|Y) = -\\int{p(x|y) \\log p(x|y) dx}\\) : \\(\\mathbb{I}(X;Y) = \\mathbb{H}(X) - \\mathbb{H}(X|Y)\\) Proof that Mutual Information is always positive: \\[\\begin{align*} \\mathbb{I}(X;Y) &amp;= \\mathbb{H}(X) - \\mathbb{H}(X|Y) \\\\ &amp;= -\\int{p(x) \\log p(x) dx} + \\int{\\int{p(x|y)p(y) \\log p(x|y) dx} dy} \\\\ &amp;= -\\int{\\int{p(x,y) \\log p(x) dx}dy} + \\int{\\int{p(x,y) \\log p(x|y) dx} dy} \\\\ &amp;= -\\int{\\int{p(x,y) \\log p(x) dx}dy} + \\int{\\int{p(x,y) \\log \\frac{p(x,y)}{p(y)} dx} dy} \\\\ &amp;= \\int{\\int{p(x,y) \\log \\frac{p(x,y)}{p(x)p(y)} dx}dy} \\\\ &amp;= KL(P||P_{X} \\times P_{Y}) \\\\ &amp;\\geq 0 \\end{align*}\\] 7.1.2 Common Source vs Specific Source LR The “common source” problem is to determine whether two pieces of evidence, both with unknown origin, have the same origin. One might be interested in this problem if two crimes were suspected to be linked, but no suspect has yet been identified. Alternatively, the “specific source” problem is to determine whether a fragment of evidence coming from an unknown source, such as evidence at a crime scene, has the same origin as a fragment of evidence of known origin, such as evidence collected directly from a suspect. Basic Setup \\(H \\in \\{ H_p, H_d \\}\\) as the random variable associated with the CS hypothesis. \\(A\\) and \\(B\\) are discrete r.v.’s representing two “sources” of evidence distributions for \\(A\\) and \\(B\\) defined conditionally based on the hypothesis SS hypothesis is represented by the conditional random variable \\(H|A\\) \\(X\\) is data coming from \\(A\\), \\(Y\\) is data coming from \\(B\\) compare information contained in \\((X,Y)\\) about \\(H\\) and \\(H|A\\) join density can be written as \\(p(X,Y,A,B,H) = p(X,Y|A,B)p(B|A,H)p(A|H)p(H)\\) Is there more information in a CS or SS LR? Let us examine this question in two different ways. Is the posterior entropy (given \\((X,Y)\\)) in the common source hypothesis smaller than that of the specific source hypothesis? In other words, would observing the specific value of \\(A\\) as well as the data make you more certain about \\(H\\) than just observing the data? Is the posterior entropy (given \\((X,Y)\\)) in the common source hypothesis smaller than the average (over possible values for \\((X,Y,A)\\)) posterior entropy of the specific source hypothesis? In other words, do you expect that, on average, observing the value of \\(A\\) as well as the data make you more certain about \\(H\\) than just observing the data? Answering the first question/interpretation, to me, requires proving that \\[ \\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0 \\]. Answering the second question requires proving that \\[ \\mathbb{H}(H|X,Y) - \\mathbb{H}(H|X,Y, A) \\geq 0 \\]. Luckily, the second question is true due to the fact that \\[\\begin{align*} \\mathbb{H}(H|X,Y) - \\mathbb{H}(H|X,Y,A) &amp;= \\mathbb{E}_{(X,Y)} \\left[ - \\int{p(h,a|x,y) \\log p(h|x,y) d(h,a)} + \\int{p(h,a|x,y) \\log p(h|x,y,a) d(h,a)} \\right] \\\\ &amp;= - \\int{p(h,a|x,y)p(x,y) \\log \\frac{p(h,a|x,y)}{p(a|x,y)p(h|x,y)} d(h,x,y,a)} \\\\ &amp;= \\mathbb{E}_{(X,Y)} \\left[ KL(P_{(H,A)|(X,Y)}||P_{H|(X,Y)} \\times P_{A|(X,Y)}) \\right] \\geq 0 \\end{align*}\\] Whether or not \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0\\) is not obvious. We have that \\[\\begin{align*} \\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) &amp;= \\int{-p(h|x,y)\\log p(h|x,y) dh} - \\int{-p(h|x,y,a) \\log p(h|x,y,a) dh} \\\\ &amp;= \\frac{p(a)}{p(a|x,y)}\\int{-p(h|x,y,a)\\log p(h|x,y) dh} + \\int{p(h|x,y,a) \\log p(h|x,y,a) dh}\\\\ &amp;??? \\end{align*}\\] We can try and understand the value of \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A)\\) in terms of \\(\\frac{p(a)}{p(a|x,y)}\\). For example, if \\(\\frac{p(a)}{p(a|x,y)} \\geq 1\\), then \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0\\). If \\(\\frac{p(a)}{p(a|x,y)} \\leq 1\\), then it is hard to say much about the value of \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A)\\). 7.1.3 Other notions of information Information in \\(Y\\) about \\(X\\): \\(\\int{p(x|y) \\log \\frac{p(x|y)}{p(x)} dx}\\) nonnegative Equal to zero when \\(X \\perp Y\\) needn’t integrate over \\(Y\\) (?) as opposed to entropy, information in a random variable requires another random variable to be “predicted”… this is fine in our situation as we have a natural candidate: \\(H_p\\) or \\(H_d\\) 7.2 Score-based Likelihood Ratios are not Fundamentally “Incoherent” Concern has been raised in the literature on LRs about a desirable property supposedly inherently absent from specific-source SLRs. The property, dubbed “coherence”, intuitively says that given two mutually exhaustive hypotheses, \\(H_A\\) and \\(H_B\\), the likelihood ratio used to compare hypothesis A to hypothesis B should be the reciprocal of that used to compare hypothesis B to hypothesis A. I will argue that the claims about the inherent incoherency of SLRs is a result of thinking about SLRs too narrowly. Specifically, I will show that the arguments as to why SLRs are incoherent arise through the inappropriate comparison of SLRs based on different score functions. When one appropriately considers a single score function, incoherency is impossible. 7.2.1 Coherence Denote by \\(E \\in \\mathbb{R}^{n}\\) the vector of random variables describing all of the observed evidence or data which will be used to evaluate the relative likelihood of the two hypotheses. Define by \\(LR_{i,j} \\equiv \\frac{p(E|H_i)}{p(E|H_j)}\\) the likelihood ratio of hypothesis \\(i\\) to hypothesis \\(j\\). The coherency principal is satisfied if \\[ LR_{i,j} = \\frac{1}{LR_{j,i}} \\]. Likelihood ratios are fundamentally coherent, but what about score-based likelihood ratios? Denote by \\(s: \\mathbb{R}^n \\rightarrow \\mathbb{R}^{q}\\) a score function mapping the original data to Euclidean space of dimension \\(q\\) (typically \\(q = 1\\)). Similar to LRs, denote by \\(SLR_{i,j} \\equiv \\frac{p(s(E)|H_i)}{p(s(E)|H_j)}\\) the score-based likelihood ratio comparing hypothesis \\(i\\) to hypothesis \\(j\\). Clearly, in this general context SLRs are also coherent. 7.2.2 Problems with arguments showing SLRs are incoherent Let us examine the arguments presented in [REFS] to the incoherence of SLRs. These arguments stem from an example where there are two known sources of evidence say, source \\(A\\) and source \\(B\\), each producing data \\(e_A\\) and \\(e_B\\), respectively. Furthermore, assume that we have a third piece of evidence of unknown origin, \\(e_u\\), which must have come from either \\(A\\) or \\(B\\). We then wish to evaluate the support of the data for \\(H_A\\) or \\(H_B\\) defined as follows \\[\\begin{array}{cc} H_A: &amp; e_u \\text{ was generated from source } A \\\\ H_B: &amp; e_u \\text{ was generated from source } B. \\end{array}\\] In this case, we have \\(LR_{A,B} = \\frac{p(e_A, e_B, e_u|H_A)}{p(e_A, e_B, e_u|H_B)}\\). We make use of all available data in the formulation of the numerator and denominator densities. Under the assumptions that each fragment of evidence is independent under both hypothesis \\(A\\) and \\(B\\) as well as that \\(p(e_A,e_B|H_A) = p(e_A,e_B|H_B)\\), the LR reduces to \\(LR_{A,B} = \\frac{p(e_u|H_A)}{p(e_u|H_B)}\\). The second assumption is generally acceptable as the source of \\(e_u\\) ought to have no impact on the distribution of the evidence with known source. [REFS] then consider possible SLRs for this example. However, they make an assumption that the score is explicitly a function only of two fragments of evidence. That is, assuming the dimension of \\(e_i\\), \\(dim(e_i) = k\\), is constant for \\(i = A,B,u\\), their score maps \\(s:\\mathbb{R}^k \\times \\mathbb{R}^k \\rightarrow \\mathbb{R}\\). An common example of such a score is Euclidean distance, i.e. \\(s(x,y) = \\left[ \\sum_{i = 1}^{k}(x_i - y_i)^2 \\right]^{1/2}\\). Such a score makes perfect sense in a typical specific-source problem context in which only two fragments of evidence are considered: one from the known source and one from the unknown source. However, when one desires to create an SLR based on this score in this particular example, it is tempting to suggest that the natural SLR is \\(SLR_{A,B} = \\frac{p(s(e_A,e_u)|H_A)}{p(s(e_A,e_u)|H_B)}\\). Yet, the natural SLR if the hypotheses were reversed is \\(SLR_{B,A} = \\frac{p(s(e_B,e_u)|H_B)}{p(s(e_B,e_u)|H_A)}\\). Neither of these SLRs is the reciprocal of the other, and so the specific source SLR appears to be “incoherent”. This approach, however, should raise a red flag immediately. Why, in the full LR case, do we require that (simplifying model assumptions aside) the numerator and denominator densities be functions of all available data, but the score is not? Furthermore, if we consider these SLRs in the more general context of scores depending on all available data, we see that, in fact, what [REFS] define to be \\(SLR_{A,B}\\) and \\(SLR_{B,A}\\) turn out to be two different SLRs depending on two different scores. For clarity, we will use \\(s(\\cdot)\\) to denote scores which are explicitly functions of all observed data, and we will use \\(\\delta (\\cdot)\\) to denote score functions which are only a function of two fragments of evidence/data. Specifically, the score in \\(SLR_{A,B}\\) is \\(s_1(e_u,e_A,e_B) = \\delta(e_u,e_A)\\) and the score in \\(SLR_{B,A}\\) is \\(s_2(e_u,e_A,e_B) = \\delta(e_u,e_B)\\). While the functional form of the score in the two SLRs appears to be the same, clearly \\(s_1(e_u,e_A,e_B) \\neq s_2(e_u,e_A,e_B)\\). Thus, the two SLRs are simply two distinct quantities whose relationship needn’t be expected to be related anymore than if one had decided to use two different function forms of \\(\\delta(\\cdot,\\cdot)\\) in the two separate SLRs. One might ask how to reasonably construct an SLR which utilizes a (univariate) score other than a similarity metric for two fragments of evidence. One such example in this case would be \\(s(e_u, e_A, e_B) = \\frac{\\delta(e_u,e_A)}{\\delta(e_u,e_B)}\\). Intuitively, under \\(H_A\\), the numerator should be larger than the denominator, while under \\(H_B\\), the opposite should be true. 7.2.3 Example of a coherent SLR in the two source problem Suppose that our hypotheses are defined such that \\[ \\begin{array}{cc} H_A: &amp; e_u \\sim N(\\mu_A, \\sigma^2), e_A \\sim N(\\mu_A, \\sigma^2), e_B \\sim N(\\mu_B, \\sigma^2) \\\\ H_B: &amp; e_u \\sim N(\\mu_B, \\sigma^2), e_A \\sim N(\\mu_A, \\sigma^2), e_B \\sim N(\\mu_B, \\sigma^2), \\end{array} \\] where \\(e_u\\), \\(e_A\\), \\(e_B\\) are mutual independent under both \\(H_A\\) and \\(H_B\\). 7.2.4 Other Possible Viewpoints? I have assumed in the previous section that the order of consideration of hypotheses should not affect the ordering of the data vector \\(E = (e_u,e_A,e_B)\\) or of the ordering of these arguments to the score function. This seems reasonable, but perhaps [REFS] would argue that considering \\(H_A\\) first, \\(E = (e_u, e_A, e_B)\\) and \\(s(E) = s(e_u, e_A, e_B)\\), but considering \\(H_B\\) first, \\(E = (e_u, e_B, e_A)\\) and \\(s(E) = s(e_u, e_B, e_A)\\). In this case, \\(SLR_{A,B} \\neq \\frac{1}{SLR_{B,A}}\\) because we switch the order of arguments to the score from one SLR to the other. Note that, however, if we relax the independence assumptions of independence under either \\(H_A\\) or \\(H_B\\), then even the LR becomes “incoherent” because \\(\\frac{p(e_u, e_A, e_B|H_A)}{p(e_u, e_A, e_B|H_B)} \\neq \\frac{p(e_u, e_B, e_A|H_A)}{p(e_u, e_B, e_A|H_B)}\\) in general. It is true that the LR depends only on the evidence of the unknown source in this specific scenario, but that is a consequence of modeling assumptions and not of LR paradigmatic principals. "],
["outreach-activities.html", "Chapter 8 Outreach activities 8.1 Book on Forensic Science and Statistics", " Chapter 8 Outreach activities CSAFE has several ongoing outreach projects. 8.1 Book on Forensic Science and Statistics Project members: Kiegan Rice Alicia Carriquiry Hal Stern (UCI) General book outline: Chapter 1: Introduction Chapter 2: Analysis of Forensic Evidence Drafted. In the editing stage. Chapter 3: The Path to the Witness Stand Drafted. In the editing stage. Chapter 4: Communicating Evidence in the Courtroom Not drafted. In the writing stage. Chapter 5: Conclusions "],
["references.html", "References", " References "]
]
