[
["index.html", "This is us: making CSAFE stronger each week Chapter 1 Prerequisites", " This is us: making CSAFE stronger each week CSAFE 2020-03-22 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction This section will become the section for the administrative updates/organization once we have figured out how to use all of the bookdown features for our purposes. You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 5. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["bullets.html", "Chapter 3 Project CC: Bullets and Cartridge Cases 3.1 Data Collection 3.2 Computational Tools 3.3 Similarity Scores 3.4 Analysis of Results 3.5 Communication of Results and Methods 3.6 People involved", " Chapter 3 Project CC: Bullets and Cartridge Cases For both bullets and cartridge cases we are dealing with several inter-related aspects, that we want to address independently. Those are: data collection computational tools similarity scores for bullet lands: crosscut identification groove location curvature removal alignment of signatures feature extraction matching with trained Random Forest for breech faces analysis of results communication of results and methods 3.1 Data Collection Overview in numbers: scans from bullet lands (about 25,000 total) LAPD: 4 bullets per barrel for 626 firearms LAPD sub-study: 4 bullets per barrel for 92 out of 626 firearms (different ammunition) Variability study: 5 operators x 2 machines x 5 time points x 3 types of bullets x 3 bullets (~450 bullets) Hamby Sets 10, 36, 44, 224, and a clone (35 bullets each) Houston test sets (6 kits with 25 bullets each) Houston persistence: 8 barrels with 40 fired bullets each St Louis persistence: 2 barrels with 192 fired bullets each most of the CSAFE persistence study and cartridge cases DFSC (about 2000) getting ready to scan cartridges for CSAFE persistence 3.1.1 LAPD All bullets are collected by Srinivasan Rathinam, LAPD. 3.1.1.1 Main study 4 bullets per barrel for 626 Beretta 92 F/FS firearms , ammunition used are 9 mm Luger Winchester 115 grain with a Copper surface. scans are on Raven. evaluation: Yawei is going to work through all 626 barrels of knowns to assess similarity scores Figure 3.1: Results from assessing scans of barrel FAU 1 similarity. Figure 3.2: Results from assessing scans of barrel FAU 2 similarity. Why some of the cases failed? (181/626 = 30%) x3p_crosscut_optimize() failed to find the positions to get cross cut for some lands. Figure 3.3: Land scan for barrel FAU 3 bullet A land 6. Figure 3.4: Land scan for barrel FAU 4 bullet C land 5. Figure 3.5: Land scan for barrel FAU 5 bullet B land 5. Assess the land-land comparasion and bullet-bullet comparasion For bullet-bullet comparasion: we use the “sequence average maximum”(SAM), i.e. average ccf of “lines” of land-land comparasions, as the bullet similarity score(currently). By making use of 92 manually generated comparasion data, we try to produce the KM(known-matches) and KNM(known-non-matches) plot. For the known mathches, we have totally 626 x 6 = 3756 for the LAPD data, excluding the comparasions for same bullet. For the known non-matches, we don’t have the data in hand. We need to generate the data in a way. We have totally 626 x 625/2 x 16 = 313000 known non-matches. We can only generate a sample from the data. We sampled 100 bullet-bullet known non-matches from our 92 cases. Figure 3.6: KM and KNM Is the SAM(sequence average maximum) a good choice? Need to do a permutation test. Figure 3.7: SAM permutation result Figure 3.8: SAM permutation result among maxmum Possible dependence structure in land-land comparasions: Assume beta distributions for the ccf for both known mathces and known non-matches. For the real known match cases, we consider a mixture distribution of two/three beta distribution. Figure 3.9: KM three components for all data Figure 3.10: KNM two components for all data Figure 3.11: common component Ten-fold-cross validation (no validation yet), check the model estimator sensibility Figure 3.12: KM ten-fold models for two components Figure 3.13: KM ten-fold models for three components Figure 3.14: KNM ten-fold models for one component Figure 3.15: KNM ten-fold models for two components Increasing sample size: 1, 2, 6, 12, … number of barrels Figure 3.16: KM increasing sample models for two components Figure 3.17: KNM increasing sample models for one components Figure 3.18: KM increasing sample for first component More on the weight Figure 3.19: Prior weight on components More on one barrel case Figure 3.20: KM one barrel model for the frist ten barrels Some conclusions from current plots: Generally, the fits are stable in both ten-fold-cross validation and increasing sample cases In ten-fold model, group8 model behaves a little different from others when in three components case In increasing sample models, the one barrel model is not stable, but the one in our case is still a rarare case The three components model for KM is less stable than two components one especially in small sample cases Two components model for KNM is not stable in small sample case(in terms of weight) After fitting Beta mixture models with different number of components and analysis with the actual fit (more on this). We finally choose Beta mixture models with two components for both KM and KNM distributions of land-land comparisons. Then we will make further inference about the land-land comparisons based on that. Specifically, we will use log likelihood ratios to quantify how strong our evidence is to support that two lands are from the same source. To evaluate the Beta mixture models for KM and KNM, we produce ROC curves using log likelihood ratios. We also evaluate the models in different cases to see how stable the fits are and how effective the procedure is to classify the land-land comparisons. Since the log likelihood ratios require both KM and KNM models, we will control the KNM model as the full-data fitted KNM model and focus mainly on the KM models in the following sections unless otherwise specified such as in the one-barrel comparisons later where we use the KNM fitted from within barrels with three bullets. We produced ROC curves in three different cases: Cross validation KM models and full data KNM model. Each KM model is fitted with 54 barrels, 1944 land-land comparisons. Different size KM models and full data KNM model. KM models has sample size from 1 to 60 barrels. (1, 2, 6, 12, …, 60 as stated before) One-barrel KM models and full data KNM model. One-barrel KM models use the first ten barrels. From the ROC curves, we can easily see how stable our procedure is in terms of the classification performance. Note that those ROC curves start with the y-axis higher than 0.5 (which may be changed later). And the TPR(y-value) goes up steeply to about 0.75 with almost no change in FPR(x-value). Then the curve gradually goes up with different rates. There are two significant points from the ROC curves: 1) the pattern is very stable in the ROC curves across different cases and within each case; 2) the models perform very well. And also note that when we produce ROC curves, we need to get test sets and specify sample size and proportion. Here we generate the test set from the full data randomly, and set KM/KNM ratio as 200/1000. The same set is used in all three ROC plots. We choose such a ratio to make the true positive classification more difficult. If we set KM/KNM as 1000/1000, the curves will be smoother and get rid of those concave regions in current plots and of course, perform a little better in those concave regions but not significantly different in overall performance and pattern. Figure 3.21: ROC-cv-models Figure 3.22: ROC-different-size-models Figure 3.23: ROC-one-barrel To summarize the model fits we have, we compare several important parameters in the following tables. We primarily focus on how stable the model we have with fixed sample size and across different sample sizes. From the KM-table and KNM-table, we have the following observations: 1) The weight of the components is not stable in terms of large standard errors in both KM and KNM cases with small sample sizes. 2) The mean values of the distributions (parameter mu) are relatively stable, especially for the primary components (first component for KNM and second component for KM). 3) The variance of the estimated distributions (parameter phi) is not stable, which is reasonable because it takes care of the variation of the data in each fit. 4) The variance of the estimated distributions (parameter phi) decreases as sample size increases. To better understand how well the model fit is and how stable it is we should also refer to the actual curves to help us see what those parameters actually mean in the curves. And I would say three barrels may be a safe minimum sample size to get a stable fit across different cases in terms of handling differences and variations existing in data sets but it’s not the minimum sample size required to make good classifications. Figure 3.24: KM-table Figure 3.25: KNM-table We’re also interested in the variation of mean values of KM ccf in different barrels. The following boxplot with the global box as the right most one is shown for this comparison. From this plot, the constant mean value assumption may be challenged, however, we must take the practice work of scan and identification into considerations when making such conclusions. Figure 3.26: ccf in each barrel To show how our model works in a single barrel case, we conduct the model fit as in the real case. We fit the KM and KNM models with three bullet comparisons (18 KM and 135 KNM land-land ccf respectively), and conduct a test on those comparisons with the forth bullet (18 KM and 105 KNM land-land ccf respectively). We conduct the above procedure in a LOO frame work, i.e. to leave one bullet out each time. The ROC curves for two barrels are shown as follows. We can see the classification results are almost as good as the previous ones. Figure 3.27: within barrel ROC for barrel 42 and 56 Error Rate Control and Cutoff Based on our estimated models for KM and KNM, we hope to construct a test statistic to quatify how likely a new bullet has the same source with our testing bullets. We start from the land-land comparison and finally reach a bullet-bullet comparison based land-land comparison. We start with the well-known log-likelihood ratio, and see how well it works in our case. We define the statistic as: \\[T = log(\\frac{KM}{KNM})\\] In which case, we reject the null hypohesis that the new bullet is from different source from our testing bullets when we have a large value for \\(T\\). First we have a look at how this log-likelihood ratio statistic changes with respect to the ccf score we calculated. Figure 3.28: loglr-fau42 Clearly, there is a potential issue with the log-likelihood ratio since it is not monotone w.r.t ccf, which means a larger ccf may lead to a smaller test statistic sometimes. As we can see when ccf is 0.45, the log-lr is 0.127 &gt; 0, however it goes below 0 when ccf increase to 0.523 (the cutoff with type one error rate as 0.05). We can also find another issue from a different aspect. If we set the type one error as 0.05 (which should be smaller in practice), then we find the ccf with this error rate from KNM (null hypothesis) is 0.523. Then the log-likelihood ratio we calculated at this point is -1.11, which means we have larger likelihood for KNM than KM even with this large enough cutoff in terms of the type one error rate. These two criteria give us contradicted results. The cutoff we set according to the usual type one error rate contradicted with the one indicated by log-likelihood ratio. However, the lower tail of the KM distribution at this cutoff here is 0.12, which is twice as larger as 0.05, which is contradicted with the log-lr again. Another issue arised in the situation above is that the cutoff according to type one error is also a lower tail cutoff with small probability for the alternative hypothesis. We may be able to reject the null hypothesis, but it is not enough to support the alternative hypothesis and those hypotheses may be rejected both depending on your construction of hypothesis. This is a problem caused by the fact that these two hypothetic distributions are far apart from each other. A smaller type one error rate might help. But the issue with the log-likelihood ratio can be severe sometimes because we have non-unimodal distributions and the comparison may happen beween two components of KM distribution, which might result in a misleading result. Besides, the tail behavior is quite sensitive to the model assumption and estimation, which we should avoid to rely on. So we might consider a probability based criteria instead of a density based criteria. The odds ratio statistic we are going to construct is promising. Given a cutoff \\(x_0\\), we can determine the probabilities to be classified as matches for both KNM and KM distributions. Denote these probabilities for KNM and KM are \\(p_1\\) and \\(p_2\\) respectively, we can get the following form of odds ratio given a cutoff: \\[odds~ratio = \\frac{p_2/(1-p_2)}{p_1/(1-p_1)}\\] notice that the numerator descreases w.r.t \\(x_0\\), and the denominator descreases w.r.t \\(x_0\\). We are able to calculate a maximum value of the odds ratio w.r.t \\(x_0\\), which gives us a reasonable cutoff of ccf to be classified into matches. Other possible ways to get a cutoff and control the error rate may be Set a reasonable type one error rate in advance and report the cutoff From the ROC curve An additional requirement may be \\[(1-p_2) &gt; Mp_1\\] for a large M. We are going to compare the above methods next. Figure 3.29: two curves Figure 3.30: odds ratio Figure 3.31: comparison table 3.1.1.2 Look colser to the dependence structure of the land engraved areas There are some discussions about the existing patterns of dependence in the observed data. Inspired by that, we are trying to build a model to formalize those thoughts. We start from a model for the land engraved areas and try to develop a model for the ccfs in hand. We would naturely think about the following effects when producing characteristic features(in some measurement) on the lands we focused: 1) the barrel specific effect, 2) the land specific effect, 3) explosion effect, 4) random errors. If we are going to model this effect, there could be some models doing this jobs with different assumed denpendence structures accounted or expressed there. We are thinking about 1) the additive random effect model(if this is the correct name) , 2) some hierarchical structure with denpendence expressed somehow in the hyper parameters, 3) the glm. We start with the additive random effect model which has clearer structure at the first glance. We formulate the model as the following: \\(Y_{ijk}\\) is some measurement of a land engraved area from barrel \\(i\\), land \\(j\\)(nested), and explosion \\(k\\). \\[Y_{ijk} = \\beta_0 + \\mu_i + \\nu_{ij} + \\omega_k + \\epsilon_{ijk}\\] where, barrel effect, land effect, explosion effect, random effect are respectively: \\(\\mu_i\\)~ iid \\(N(0, \\sigma_{\\mu}^2)\\), \\(\\nu_{ij}\\)~ iid \\(N(0, \\sigma_{\\nu}^2)\\), \\(\\omega_{k}\\)~ iid \\(N(0, \\sigma_{\\omega}^2)\\), \\(\\epsilon_{ijk}\\)~ iid \\(N(0, \\sigma_{\\epsilon}^2)\\). (some more complicated structures are possible) Note this is a land model, however we want a ccf model. We first check the variance, covariance and correlations in different cases. \\[Var(Y_{ijk}) = \\sigma_{\\mu}^2 + \\sigma_{\\nu}^2 + \\sigma_{\\omega}^2 + \\sigma_{\\epsilon}^2\\] For the same barrel, same land but different expplosions(KM), we have the correlation: \\[corr(Y_{ijk_1}, Y_{ijk_2}) = \\frac{\\sigma_{\\mu}^2 + \\sigma_{\\nu}^2}{\\sigma_{\\mu}^2 + \\sigma_{\\nu}^2 + \\sigma_{\\omega}^2 + \\sigma_{\\epsilon}^2}\\] For the same barrel, different land and different expplosions(some of KNM), we have the correlation: \\[corr(Y_{ij_1k_1}, Y_{ij_2k_2}) = \\frac{\\sigma_{\\mu}^2}{\\sigma_{\\mu}^2 + \\sigma_{\\nu}^2 + \\sigma_{\\omega}^2 + \\sigma_{\\epsilon}^2}\\] Now we have a point estimator of the correlations in the above cases. To address our insterest, we need more than this. We could possiblly assume the beta distribution now as what we did previously(or mixed beta later). We are building a hierarchical model (not necessarily Bayesian now) for the ccfs with dependence structure considerred. We can reasonablly assume the above point estimation a mean value of the \\(Beta(\\mu, \\phi)\\) (mean value parameterization, different \\(\\mu\\) from previous). We can somehow check the assumaption by some data driven methods. But the model we could have is then: \\[Z_i \\mbox{~}iid ~Beta(\\mu_i, \\phi_i)\\] Where \\(i\\) indicate the above two(or more) cases of correlations we are looking at. We could specify(assume) the model parameters by the additive random effect model through maximum likehood method or somehow. 3.1.1.3 follow-up study 4 bullets per barrel for 96 of the original 626 Beretta firearms using different ammunition bullets are being scanned 3.1.2 Hamby Sets Scans for Hamby Sets 10, 36, 44, and 224 Scans for 3 replicates of clones for Hamby 224 3.1.3 Houston Tests contact: Melissa Nally, Houston FSI 3.1.3.1 Pre-study 3 kits with 23 bullets each Figure 3.32: Bullet-to-bullet similarity scores for questioned bullets (y-axis) compared to all other bullets of the test set (x-axis). evaluation included in submission to JFI 3.1.3.2 Study 4 kits with 20 bullets each scans done, evaluation finished, some scans of doubtful quality 3.1.4 Houston Persistence contact: Melissa Nally, Houston FSI 8 barrels with 40 fired bullets each 3.1.5 St Louis persistence contact: Steve Kramer, St Louis PD 2 barrels with 192 fired bullets each (2 bullets collected every 25 shots) 3.1.6 DFSC Cartridge cases Breech face data for knowns are scanned and available on a private github repository evaluation 3.2 Computational Tools 3.2.1 x3ptools x3ptools is an R package for working with files in x3p format. x3p is an ISO standard for describing 3d topographic surface measurements. x3ptools is available on CRAN, i.e. can be installed with the command install.packages(\"x3ptools\"). The development version is available from github. Installation instructions and basic usage can be found at https://heike.github.io/x3ptools/ 3.2.2 bulletxtrctr bulletxtrctr is a developmental R package available from github (see https://heike.github.io/bulletxtrctr/) that allows an assessment of similarity scores using the data extraction pipeline described in Hare, Hofmann, and Carriquiry (2016). 3.2.3 grooveFinder grooveFinder is a developmental R package providing different methods for identifying the location of grooves in scans of bullets. Installation instructions and some basic usage can be found at https://heike.github.io/grooveFinder/ 3.3 Similarity Scores 3.3.1 Bullet Lands 3.3.1.1 Approaches to identify groove locations 3.3.1.1.1 Hough Transform Method for Identifying Grooves Charlotte 9/5/19 Update: State semester goals and iron out inconsistencies with 2-d and 3-d visualizations due to unit changes. Current Goals: - Iron-out issues with consistency of units with get_hough_grooves. I believe there are some issues translating from the 2-d visualization to the 3-d visualization that might have to do with inconsistent unit inputs? For Example Figure 3.33: 2-dimensional visualization of example bullet br411 with .999 strength threshold Figure 3.34: 3-dimensional visualization of example bullet br411 with .999 strength threshold So either somethin is wrong with get_mask_hough or something is funky with the units. Also need to think of including a sort of rounding component where lines with slopes that are practically infinite can be viewed as a vertical line Compare Hough results with manual identification using score calculations from Kiegan. Write up results in Hough Groove Paper (It’s coming I promise) Create graphical images to explain line selection method Include 2-d and 3-d visualizations of Hough groove area identifications Include crosscut visualization and comparison in results Charlotte update 09/12/19: This week I have been working on obtaining some results for the Phoenix set on Sunny. As a minor update the unit issues in get_mask_hough() are resolved ( I think). Below is an example of a nice image that has been generated using masks. Figure 3.35: Phoenix Gun1 A-9 B1 Land 4 generated at strength threshold of 0.99, initially did not generate estimates at the 0.999 or 0.995 level However the mask is only as good as the Hough estimates that supports it as shown here (less nice). Figure 3.36: Phoenix Gun1 F-6 B2 Land 5 generated at strength threshold of 0.9, initially did not generate estimates at the 0.999 or 0.995, or 0.99 level Hough crosscut predictions for the Phoenix dataset are now uploaded to the bulletQuality Github in the“results” folder and contains Hough groove estimates at the following five strength levels: 0.999, 0.995, 0.99, 0.95, 0.9. The source and the crosscut estimate are also included in the dataset. Here are some preliminary results of using Kiegan’s area of misidentification method (thanks Kiegan!) on Hough groove estimates at the strength threshold of 0.999 in comparison to the BCP and Lasso method. Figure 3.37: Left-hand groove area of misidentification log-transformed scores for BCP, Lasso, and Hough Figure 3.38: Right-hand groove area of misidentification log-transformed scores for BCP, Lasso, and Hough These scoresare log transformed to show better separation but it’s very clear that for the left groove both Lasso and BCP are out performing the Hough method in correctly identifying grooves. For the righthand side, scores tend to be more similar however once again, the Lasso method seems to bo the best job since it has a larger density of low scores and minimizes high score misidenfitications. For improvement before next week, I will investigate why there are 47 missing Hough predictions resulting in a score of 0 in these results and change the parameters in the get_grooves_hough() function to try and generate estimates for some of those missing values. Charlotte update 09/19/2019: This week we are trying to think of a new way for selecting Hough lines for bullet estimates. The previous method for selecting Hough lines was to find lines with x-intercepts at the top and bottom of the lands closest to the lower and upper one sixth of the bullet lands. However this process was highly dependent on score thresholding from the Hough transform which is frustrating when running a large number of bullets since if the right score threshold was not achieved, no result would be produced. So right now I’m working on a way of selecting Hough lines from the normalized Hough scores. To obtain a normalized Hough score I take the x-intercepts of each estimated Hough line generate and find the distance between the x-intercept at the top and the bottom of the land. This should give me the max possible score for each Hough line, rather than calculating based on theta. Then I take the Hough score and divide by this maximum to normalize scores between 0 and 1. Right now I am working on visualizing some of these results but my code is buggy because I’m getting negative values when I try to visualize the process using masks when I shouldn’t. Here is an example of a bullet land using the old and new method. Really similar results although it would appear that the new resut places the Hough transform lines further in to interior of the land than the old results. So that’s promising? Figure 3.39: Phoenix Gun 1-A9 Bullet 3 Land 1 visualized using current Hough process message Figure 3.40: Phoenix Gun 1-A9 Bullet 3 Land 1 visualized using new Hough process message Charlotte Update 09/26/2019: This week is focused on fixing the normalization of the scores for Hough grooves. So that the process can be automatic rather than rely on manual input for the score threshold. Instead of dividing by the geometric distance between the top and bottom intercepts of the bullet image. Now we only consider Hough lines that actually go through both the top and bottom of the land, therefore we can normalize each score by dividing the original hough score by the height of the image and multiplied by the cosine of theta which accounts for the difference in length of lines with differing angles. As far as selecting normalized scores from every score possible I found that there is really no visual difference between selecting the highest normalized Hough score and the other top five. Figure 3.41: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index one Figure 3.42: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index ten Figure 3.43: Phoenix Gun 1-A9 Land 4 visualized using new Hough process index twenty So for now we will continue to select the highest normalized Hough score to use as our bullet land estimates. After fixing the parameterization of the Hough scores and how we normalize Hough scores, the 3-dimensional images appear to have improved! Which is great news since no thresholding was necessary. Figure 3.44: Hamby Bullet 1 Land 1 visualized using new Hough process Still we run into the problem that our masks are only as good as our estimates, however even this terrible bullet land appears to have grooves identified somewhat well. Figure 3.45: Hamby Bullet 1 Land 4 visualized using new Hough process A comparison between the two methods finds that generally the new Hough process out-competes the old one on nearly every bullet land in the Hamby 252 demo set. Figure 3.46: Crosscut Results Hamby 252 Demo Set Comparison between old and new methods Charlotte Update 10/3/2019: The get_grooves_hough function has changed since last week, it previously slopes were calculated in x which is numerically less stable than a slope in y so for example when we were using the old slopes we had the possibility of dividing by zero which is not good. Changing to the new slope helps eliminate that likelihood. Other than that I am working on writing a grooveFinder vignette. I will be discussing every step of the Hough algorithm at length then demonstrating the function itself on the Hamby44 demo set. Charlotte Update 10/3/2019: Finished up the application section of the Hough grooves vignette, need to fill in a few demonstration images that explane how we calculate normalized scores using geometry. Now working on: - Finish visualization portion for the vignette - Expand testing for get_grooves_hough Charlotte Update 10/17/2019: Finally finished up with the vignette, but need to finish one or two more explanation diagrams before first-pass is complete. Having trouble figuring out what the results section should really look like. Need to finish tests for get_grooves_hough. Charlotte Update 10/22/2019: For this weeks spotlight I will focus on motivating the reasoning behind the Hough project, a demonstration of mechanics or how the function actually works and maybe a few results. ** Project Motivation ** One of the main objectives of the bullet project is to develop algorithms that can match bullet lands based on a set of features taken from a signature of a single bullet crosscut. In order to to extract these vital signatures we need to fit a robust loess to our crosscut data to remove the curvature inherent in each bullet land. However, there-in lies a problem. If the groove engraved areas are included in our fitting of the robust loess we observe boundary effects that negatively impact the accuracy of the extracted signature. So a key goal in the bullet project is to be able to automatically identify the location of bullet grooves. Other projects in pursuit of this goal use a statistical approach to calculating the location of bullet grooves over a single crosscut. However, we are given an entire land scan in the form of an x3p file. By using low-level image algorithms like the Hough transform, we can almost make full utility of the x3p scan by estimating bullet grooves over the entire bullet land image instead of a single crosscut. ** Hough Transform Mechanics** Hough transforms are essentially a computer algorithm for detecting imperfect incidences of a known class of shapes in an image by finding aligned points. In our case, grooves are typically linear so we want the Hough transform to detect straight lines. Anyone who has looked at a bullet scan knows that the striae are also straight lines, so some image pre-processing is necessary for the algorithm to be able to distinguish between weaker appearing striae and the prominent groove features. Traditionally a gaussian blur and Canny Edge detection are performed to reduce the noise found in a gradient image. However, we have found that using Canny Edge detection is pretty much unnecessary for identifying grooves. Figure 3.47: Bullet land with Canny Edge detection Figure 3.48: Same bullet land but only with gradient magnitude thresholding at the 99th percentile Utilizing the cleaned up edges in our bullet image, the Hough transform cycles through every pixel of an image in an attempt to find aligned points on an edge. To do so, the Hough transform operates by transforming each point in a line into a different feature space. Figure 3.49: Diagram of detecting aligned points by looking for intersections in the feature space. Source: ‘How Hough Transform Works’- Thales Sehn Körting Unfortunately, vertical lines have slopes in x that tend to infinity, which would make storing the results of the Hough transform impossible due to memory storage issues. So the Hough transform parameterizes lines in what is known as the Hessian Normal Form. \\[ \\rho = x\\ \\cos(\\theta) \\ + \\ y\\ \\sin(\\theta)\\] Figure 3.50: Hessian Normal Form of simple line over bullet image Figure 3.51: Gif of a Hough Transform Algorithm at work. Source: ‘How Hough Transform Works’ - Thales Sehn Körting So the output of the Hough algorithm (in this package we utilize the hough_lines function from the imager package) is thus a set of \\(\\rho\\) and \\(\\theta\\) that define the detected lines but also a “score” which indicates the number of points that the algorithm detected for this particular edge estimation. This allows us to use thresholding and other means to select only the strongest candidates as groove estimates. Previous iterations of the get_hough_grooves function used a user-specified score thresholding level which made results highly variable dependent on the inputted score threshold. Now we use a normalized “score” to select the strongest line detected in the image. Once our lines for the left-hand and right-hand grooves are selected, we choose to output two functions that define our estimated grooves. To compute the parameters of our Hough line, we first find the location of where each line first intersects the bullet (“xtop”) then we use our known “xtop” and our known “height” of the image to calculate “xbottom” using good ol’ SOH CAH TOA. Figure 3.52: Geometrically Calculating ‘xbottom’ The reason for calculating the top and bottom intersection points is so that we can derive a slope for our groove estimate in y. When we learned how to calculate slope in grade school, we were always taught to use “rise over run” which is slope in x. However when the lines are vertical, we are essentially dividing the height of our bullet land by 0 to obtain a slope. So it is numerically more stable to define the slope as \\(\\frac{(\\text{xtop - xbottom})}{\\text{height}}\\) so vertical lines simply have a slope of 0. Implementation As far as implementation goes, the function get_grooves_hough takes care of the edge detection, Hough algorithm, and line selection. Similar to other methods used for detecting lines, the get_grooves_hough function has an adjust parameter that allows the user to specify how far inward they want to “nudge” the groove estimates. The default for the Hough transform is set at 10, however this needs to be experimented with for a variety of different bullets to find appropriate adjust levels. Figure 3.53: 3d visualization of example bullet ** What’s Next? ** Fiddling with adjusts and how it affects score. To find an optimal adjust for the Phoenix set, I calculate the default Hough groove estimates then find what the estimate would be for a series of adjusts. Naively I have defined a new parameter called “difference_left” and “difference_right” which is simply the difference between the manually identified groove location at an optimized crosscut and our Hough estimate at a particular adjust level. For now, I have defined any negative values to indicate that the Hough estimate is further from the center than the identified truth. So we want to minimize these negative difference to better get rid of boundary effects. Figure 3.54: Difference between the left hand Hough estimate and the truth at various adjusts Figure 3.55: Difference between the righ hand Hough estimate and the truth at various adjusts Charlotte Update 10/31/2019: This weeks work has been focused on figuring out why we have such extreme mis-identifications for the adjust in the Phoenix set and work on edits for the vignette. So last week I showed a series of boxplots that show the impact of adjust levels on the difference between the manual identification and the groove estimates from the Hough transform. There were a few significant outliers shown in the boxplot. Upon further investigation it seems as if the Hough transform simply does not find a groove on the right side of the land. Figure 3.56: Adjust level at 100, image of bullet land with a right hand differene of -600 Figure 3.57: What the Hough Transform Sees I wanted to show scores this time around but I just found out from looking through my saved results that the number of observations produced differs for each adjust level and I don’t know why. So there’s some major error with my code that I need to work out before proceeding. Charlotte Update 11/07/2019: This week a major bug was discovered in the code! Still working to look at different adjust impacts on score and now the get_grooves_hough function takes x3ps and dataframes as inputs. Below are the visualized scores for the left and right hand estimates at various adjust levels. Figure 3.58: Phoenix Hough Scores for estimates with a series of 10 different adjusts for the Right Groove Figure 3.59: Phoenix Hough Scores for estimates with a series of 10 different adjusts for the Left Groove What we mightn notice the most from these two graphics is that there are still persistent extreme scores despite the adjusts with areas of identification in the thousands. The most extreme of which for the right side happens to have a score of about 5000. Upon taking a look at the specific lands that have problematic scores they look relatively normal. So then we want to estimate where the Hough transform thinks the grooves are. Figure 3.60: Gun1-U10 Bullet 3 Image Scan Which looks like a pretty regular scan but when we look at the groove estimates we see. Figure 3.61: Gun1-U10 Bullet 3 Crosscut Hough Estimates Which is bizarre because the Right hand estimate is way too far into the bullet land. However we filter out any lines that are within the middle 2/3rds of the bullet scan, and this estimate is clearly within the middle 2/3rds. So we have discovered a new bug in the code, but at least this bug is consistent. Charlotte Update 11/12/2019: This week I’ve dug more into the mysterious bug from last week. It turns out that the “bug” was actually a mis-understanding with regards to unit conversion. So get_grooves_hough is working like it should! But our estimates are still not very good. If we take a look at a single crosscut of a problematic bullet like Gun1-U1-Bullet-3-L1. We’ll see something different from other lands. This land in particular has a much larger width than other lands found in our dataframe. So consequently the heuristic we used in get_grooves_hough which filtered out any lines within the middle two-thirds of the bullet were problematic. Figure 3.62: Crosscut of Gun1-U10-B3-L1 with original Hough heuristic Figure 3.63: Crosscut of Gun1-U10-B3-L1 with middle fifty percent Hough heuristic Unfortunately even though the middle 50 percent heuristic is better suited for this particular land, the groove estimates are still not good. Let’s look at a second problematic case with Fun1-p7-B3-L5. Figure 3.64: Crosscut of Gun1-P7-B3-L5 with original Hough heuristic Figure 3.65: Crosscut of Gun1-P7-B3-L5 with middle fifty percent Hough heuristic Which is a marked improvement. Here is a comparion of the three dimensional lands Figure 3.66: 3D view of Gun1-P7-B3-L5 with original Hough heuristic Figure 3.67: 3D view of Gun1-P7-B3-L5 with original Hough heuristic Charlotte Update 12/5/2019: Short update today due to unforseen circumstances but we have resolved most of the issues with some of our previous problem bullets and are starting to compare to other methods. So the previous heuristic used the middle two/thirds as a way of eliminating lines from consideration. But this lead to a problem with scans that were a much larger size than other iterations of the Pheonix study producing poor results. Figure 3.68: Old Cetner Heuristic Now with an optimized adjust and a middle 50% heuristic we get Figure 3.69: New Cetner Heuristic Which is a much better estimate. Comparing the differences between groove estimates and the manually identified truth for the BCP, Lasso, and Hough methods we receive the following two density plots of differences. Figure 3.70: Left Groove Difference Estimates Figure 3.71: Right Groove Difference Estimates Charlotte Update 02/03/2020: Teaching this semester which has been fun and challenging in a new way. Had an issue with comparing LASSO Results between ones found by myself in the grooveFinder package and results that had been previously saved by Kiegan. Now I’m investigating optimal adjusts for the Hamby44 set and will be working on the summary report. A while back, I ran into an issue where the estimated grooves using the Lasso-full method did not match Kiegan’s previously saved results. It turns out that the lasso function in grooveFinder does not have a built in adjust parameter so the results are different from those create from the bulletxtrctr version. So accounting for the adjust, I re-ran results and obtained something suprising. I know that six additional scans were uploaded to Sunny since the time Kiegan ran the lasso results. However, those were removed for the sake of consistency. Figure 3.72: Left Groove Difference Estimates Figure 3.73: Right Groove Difference Estimates So it leaves the question, why are these results ever so slightly different and which results do we use to compare to Hough even though they’re largely consistent. Other than the LASSO question I have also run the Hough results on the Hamby 44 set to find the optimal adjust. One interesting observation is that there is a set of nine observations where no valid crosscut can be produced. 3.3.1.1.2 LASSO Method A paper is in preparation for submission to Forensic Science International describing this method (get_grooves_lassofull in grooveFinder), as well as the Bayesian changepoint method (get_grooves_bcp). 3.3.1.1.3 Robust LOESS Method A paper submitted to the Journal of Forensic Science is waiting for peer review response to the first round of revisions. 3.3.1.2 Bullet Land Comparisons Pipeline Most data analysis processes can be thought of as a data analysis “pipeline”. This process can involve data collection, decisions about data cleaning, data transformation or reduction, and feature engineering. For example, consider the general process below: In the case of the bullet project, we have a pipeline which starts with having two physical bullet LEAs and ends with a quantitative result, a random forest similarity score. Our pipeline could be described (roughly) as something like this: To make this a little easier to see, we can look at how a 3D scan is processed into a 2D signature: Now, something important to consider is whether each of these “data decisions” has an impact on the quantitative result (here, a similarity score between two LEA signatures). Consider a simple set of decisions we could make in our bullet pipeline: If we have a pair of signatures, we could theoretically end up with 16 different similarity scores depending on the decisions we make at each point. That is also assuming that both signatures were processed in the same way at each point. This year, I’ll be studying our bullet land “pipeline” here at CSAFE, as well as pipelines that are a little different than ours (e.g., Chu et al. (2010)). There are a few major goals I am working towards: Quantifying the uncertainty of our RF similarity scores based on data decisions Comparing reproducibility/robustness of differing bullet analysis approaches Hare, Hofmann, and Carriquiry (2016) vs. Chu et al. (2010), for example Crosscuts: method 1 vs. alternate? Crosscut parameter tuning? Groove methods Original RF vs. updated/retrained/re-engineering Reproducibility/robustness of different approaches when we consider data COLLECTION. The code in bulletxtrctr is already really well set up as a data “pipeline”, so now we are conceptualizing the best way to wrap the pipeline and keep track of what decisions are made along the way. The current work underway on this project is focused on developing a package in R that will assist users in keeping track of data science projects. We believe it will be particularly useful for those developing a data science process and tools to complete that process. This is most obviously the case for a lot of the ongoing projects at CSAFE; for example: The bulletverse, packages in development include x3ptools, bulletxtrctr, and grooveFinder. Methods are worked on at multiple stages (e.g., groove ID methods, work on modeling bullet scores) Multiple people are on the project and may make changes to things that impact other stages We want to keep track of when something (e.g., a function, model object, parameters) changes that will impact our analyses/scripts. handwriter, a package which processes handwritten documents and extracts data features to be used in modeling If processing code changes, how does that impact the features that are extracted? Can you check entire package for changes to see if you need to re-run processing? ShoeScrubR, shoeprintr packages… etc. Almost all of the methods developed here at CSAFE use non-traditional data that requires processing and feature generation before modeling/analysis can begin. These processes are continually improved as projects move forward, and thus as changes happen we need to be able to assess: The impact of differing processing approaches and how that changes results Whether results need to be re-run after changes are made in a package (time saver!) Confidence in reporting results: how much uncertainty is introduced by manipulating the data in a certain way? Earlier this year, we designed and collected a bullet scanning variability study of 9 bullets. I’m working on formally modeling the variability at the signature level, taking two major approaches: Subsampling and assuming independence; Directly modeling out the mean structure Ignoring peak/valley dependence Using time series/spatial dependence modeling Using a Bayesian shrinkage prior (w/help from Amy!) Results for Method 1, the subsampling, looks something like this: We are also investigating the variability of random forest scores, using pairs of signatures. The current process for taking a set of signatures and completing pairwise comparisons on each of them actually completes many comparisons twice, which has two impacts: It takes up more computational time and memory than we really need it to It has the potential to make our variance component estimates inaccurate - we double-count a bunch of comparisons! Over the summer I made a function to “fix” this, to address the estimation problem in my variability study. The bulletxtrctr pipeline calls for using expand.grid. My new function compares pairs by creating a pairing_id variable and ensuring no pairing_id is duplicated. This is the resulting set of comparisons: The changes to our results are minor, but it is an important detail when modeling things. Two papers in progress! Groove ID paper #1 needs another round of minor revisions (hopefully will be accepted soon!), Groove ID paper #2 is waiting for advisor comments. Sometimes, data collection goes awry… I am in the process of documenting all the data issues and double-checking everything. We are adding more operators (and another set of bullets) to our variability study! I am polishing two full chapters of the book this week. Starting to write up the full variability study (as a dissertation chapter). Writing, writing, writing! Update on data collection: We are in “Phase 2” of data collection, shown below as the purple numbers: 3.3.2 Cartridge Cases 3.3.2.1 Congruent Matching Cells (CMC) algorithm for comparing cartridge case breech face impressions Joe 9/5/19 Update: Explanation of missing value problem when calculating cross-correlations and some attempted fixes. Dealing with missing values in the x3p scans continues to be an issue. The Fast Fourier Transform method for calculating cross-correlation can’t handle missing data in an image, so we’ve attempted a few “fixes” that haven’t necessarily turned out as well as expected. One idea we had was to replace the NA values in a cell with the average pixel value. However, this is artificially introducing a signal where before there was none. This can (and demonstrably has) led to inflated/incorrect correlations between cells that shouldn’t have much at all in common. Unfortunately, this may be the only solution if we still wish to adhere to the CMC algorithm as described in Song et al. (2015). One improvement that I’ve implemented is to “crop out” the rows and columns of an image that only contain NAs. This at least means that we’ve weakened the strength of the artificial signal relative to the breechface’s signal. Below is a series of images that illustrate how we might compare a cell in one image to a region of another image. Figure 3.74: Comparing a cell in image 1 to a larger region in image 2. We wish to find the translations of the image 1 cell that yield the highest correlation within the image 2 region. For the sake of an example, let’s focus on the blue outlined cell in image 1. Our goal is to use the image 1 cell to “search” a corresponding larger region in image 2 for the horizontal/vertical translations needed to produce the highest correlation. Below is a zoomed-in version of the blue outlined image 1 cell on the left and the larger image 2 region (approximately: I made the gridded image above by-hand outside of R while the images below are from R). The image 1 cell may look larger than the image 2 region, but we can see from the axes that the image 2 region is indeed larger. Any white pixels in the two images are NA values that need to be dealt with in some way before we can use FFTs to calculate the cross-correlation. Figure 3.75: (Left) A cell from image 1. (Right) A region from image 2 centered in the same location as the image 1 cell, yet quadruple the area. As already discussed above, one “solution” is to replace the NA values with the average pixel value of each image. However, to avoid creating a stronger artificial signal than necessary, we can crop-out the NA rows and columns from the two images above. Below is the cropped version of the two images. The cropping doesn’t produce signficantly different images in this case, but you could imagine other examples in which a cell has captured only small amount of breechface in the corner. Such examples are fairly common and cropping signficantly changes the resulting correlation values. Figure 3.76: The same images as above after cropping NA rows/columns. The last step before calculating correlation for these cells is to replace the remaining NAs with the average pixel value. This is shown below. Figure 3.77: The NA-cropped images with remaining NAs replaced with the image’s average pixel values. The cross-correlation is then calculated between these two images via a standard fast fourier transform process (see Cross-Correlation Theorem). The benefit of using such a process is that (as the name suggests) it’s faster than calculating the raw correlation between the two images. Also, the translations that produce the highest correlation between the image 1 cell and the image 2 region fall out of the calculation for free. This pre-processing/cross-correlation calculation procedure is repeated for every cell in image 1 that contains breech face impression. Because it is not valid to assume that the two images are rotationally aligned by default, we perform the same procedure repeatedly while rotating image 2. Currently, we perform a “rough” grid search of \\(\\theta \\in [-177.5,180]\\) by increments of \\(2.5^{\\circ}\\). Theoretically, the final results tell us how we need to horizontally/vertically translate and rotate the two images to be correctly aligned. 3.3.2.2 Congruent Matching Tori: a promising solution to the missing value problem Joe 9/5/19 Update (cont’d): A brief introduction to a congruent matching “tori” method that may provide a better solution to the missing value problem. As discussed above, dealing with missing values is provign to be a pain. The good news is that the currently-implemented CMC as described above yields results very similar to those published in Song et al. (2015) that originally describes that CMC algorithm. While our results seem to agree with currently published results, it would be nice if we could avoid needing to artifically replace missing values. We can do so if, rather than breaking up the circular breech face impression scans into disjoint squares, we break up the breech face impression into donut-shaped regions containing only breech face impression. Below is an example of such a toroidal region. Figure 3.78: (Left) The original breech face impression scan image. (Right) A donut-shaped region cut out of the original image. By comparing such regions instead of the square cells, we would presumably only need to fill in a few missing value “holes” in the breech face impression scan rather than completely replacing a non-existent signal with an artificial one. In the near-future, I hope to finish up the pre-processing needed for this Congruent Matching Tori method by performing a polar transformation on these images to make them into strips that can easily be compared via an FFT. Joe 9/12/19 Update: Explanation of some of the pre-processing steps needed to make the CMC work as described in Tong et al. (2015) Before carving out toroidal regions from the two images we wish to compare, a fair amount of pre-processing needs to be completed. For example, the scans we work with begin with a considerable amount of auxiliary information, for example the firing pin impression, that we don’t want to use in our comparisons. This isn’t to say that firing pin impressions aren’t useful to determine a match between two cartridge cases. In fact there is quite a lot of published research on how to compare two firing pin impressions. Rather, it is common practice to compare breech face impressions and firing pin impressions separately since it is difficult to scan both simultaneously. Thus, there are regions of a breech face impression scan that we want to remove so that the breech face impressions are more easily comparable. Below is an example of two breech face impression scans before processing. Figure 3.79: Two cartridge case scans before pre-processing. There are a variety of techniques to segment an image into various parts. In image processing, common techniques are the Canny edge detector, which identifies edges of shapes in an image using image gradient techniques, and the Hough Transform, which can detect a variety of geometrical shapes in an image. The Hough Transform is what is used to segment the cartridge case images used in the previous section. However, we’ve found that the use of a Hough Transform doesn’t extract the “breech face signal” from an image as other techniques. Namely, the breech face can be effectively extracted using the RANSAC (Random sample consensus) method that iteratively fits a plane to a set of data until it settles upon a consensus-based “bulk” of the data. In the case of these cartridge case scans, the bulk of the data should predominantely be distributed around the mode height value. That is, the breech face impression. Once we’ve fit this plane to the breech face impression, we can extract the residuals of the fit to better accentuate the markings left in the cartridge case base by a firearm’s breech face. Below is an example of the residuals left after fitting a RANSAC plane to two cartridge case scans above. In the example below, we grab any residuals less than 20 microns in magnitude. Figure 3.80: Residual values of a RANSAC plane fit to the two cartridge case scans shown above. Although these two images are of two different cartridge cases, you can hopefully see that one looks very much like a rotated version of the other. These two cartridge case scans are in fact fired from the same gun (known matches), so it’s a good thing that they look so similar. We’ve now removed quite a bit of the unwanted regions of the original scans. However, there are still some areas of the image (e.g., the faint circular region of pixels in the center of the breech face scan) that just so happened to be close to the fitted plane and thus were brought along in the residual extraction. There are a few ways that we can clean up these last few areas. One is to use two Hough Transforms to detect the inner and outer circles of the breech face impression and filter out any pixels outside of the region between these two circles. The biggest issue with using a Hough Transform is that it must be given the radius of the circle that it is to search for in the image as an argument. That is, we need to know the radius of the breech face impression that we haven’t yet identified in order to identify the breech face impression. Instead, we can dilate/erode (or vice-versa) the pixels in the image to remove the remaining “speckle” in the image. Below is an example of of the breech face impressions cleaned via a dilation/erosion procedure. Figure 3.81: The selected breech face impressions based on dilation and erosion. The final step in the pre-processing is to align the two images in some consistent fashion. Luckily, the firing pin impression ring that’s left after performing the above dilation/erosion provides us with some idea of how to align the breech face impressions. The location of the firing ring impression in the breech face impression provides us with an indicator of where the cartridge case was located relative to the firing pin when it was sitting in the barrel. So aligning two cartridge cases so that their firing pin impression rings align will ensure that, at the very least, the breech face impression left on the cartridge case is horizontally/vertically aligned if not rotationally aligned. Joe 9/18/19 Update: Continuation of pre-process explanation with a discussion on how we can automatically detect the firing pin impression radius in an image. To automatically detect the radius of a given breech face impression, we can count the number of non-NA pixels in each row. If we were to imagine scanning down an image and counting the number of non-NA pixels in each row, then this count would obviously start to increase the moment we hit the top of the breech face impression. Because the breech face impressions are circular, the count would continue to increase the further down the image we scan. That is, until we hit the firing pin impression circle. At this point, because the firing pin impression circle consists of NAs, we would expect the non-NA pixel count to dip. This increasing followed by decreasing behavior in the non-NA pixel count constitutes a local maximum. We can use this local maximum of the non-NA pixel count to identify the beginning of the firing pin impression circle. Similarly, we would expect the non-NA pixel count to reach another local maximum once we hit the end of the firing pin impression circle. It’s then a simple subtraction of the two row indices containing these local maxima to determine an estimate for the diameter of the firing pin impression circle. We can see below an example of the non-NA pixel row sums plotted against the row indices (starting from the top of the image and moving down). You can hopefully see that the raw row sums are rather “noisy”. As such, we can pass a moving average smoother over the row sum values so that the local maxima are easier to identify. This may not be the most robust way to determine the local maxima. I hope to investigate the use of b-splines fit over the row sum values to see if these would be more effective at finding local maxima Figure 3.82: Non-NA pixel row counts and moving average-smoothed row count values plotted against row index. However, because firing pin impression circles have somewhat perforated edges, performing one pass through the image may not yield a particularly accurate estimate. As such, we can repeat the process of finding the distance between local maxima for both the row and column non-NA pixel counts. We can also rotate the image by a few degrees and perform the same process. I am currently rotating the image 0, 15, 30, 45, 60, and 75 degrees and calculating row and column diameter estimates per rotation. Obviously we can apply whatever aggregation function we desire to these estimates to determine a final estimate. Below we see what the Hough Transform selects as the breech face for 4 different radii values. In particular, for circles of radius 210, 213, 216, and 219. Figure 3.83: Hough Transform selected circles (red) of radius (1) 210, (2) 213, (3) 216, and (4) 219. Joe 9/25/18 Update: Dilation and erosion of the breech face impression image seems to be fairly effective, but require some parameter tuning based on the firing pin impression we’re considering (e.g., effective erosion in one image may have a different, adverse effect in another image). The watershed algorithm appears to be a promising alternative to selecting the breech face impression out of an image containing extra “minutiae”. When trying to select the breech face impression out of an image such as the one below (this is a slice of the original scan based on the RANSAC method-selected breech face impression z-value), we’re really just interesting in obtaining a yes/no answer for each pixel to the question: “Are you a part of the breech face impression?” As such, rather than looking at the considering the raw pixel values, we can binarize the image to a 1/0 (equivalently, non-NA/NA) pixel representation. Such a representation is below. Figure 3.84: (Left) Residual values of a RANSAC plane fit to a cartridge case scan. (Right) Binarized non-NA/NA image for segmentation. Using this “indicator image”, the beginning/end of the breech face impression should be much more obvious to, say, a Canny edge detector. Below is the output of such a Canny edge detector. Figure 3.85: The edges of the binarized image above via a Canny edge detector. From here, we can use a Watershed image segmentation procedure to identify various regions within this image. The Watershed algorithm needs to be given a set of pixel locations that the user believes to be within distinct regions of the image. With these “seed” pixels, the algorithm then searches neighboring pixels and attempts to identify them as within/without the same region. Almost as if a water source turned on at the given seed pixel and water began to spread to as many neighboring pixels as it could. The water should “stop” at the black lines in the image above, thus defining the boundary of a seed pixel’s region. An example of the above image post-segmentation is given below. The 5 seed pixels I used were the 4 corners and center of the image. As we can, the watershed algorithm “overflowed” into the breech face impression, but segmented the firing pin impression circle from the rest of the image. Because most of the minutiae that we want to remove is in within this firing pin impression circle, this is not a problem for our purposes. With 5 seed images, there are technically 5 segments represented in the image below (although it’s hard to see where the outer segments begin/end). So as shown below, we can just binarize the segments as being a part of the firing pin impression circle or not. Figure 3.86: (Left) Watershed segmentation of the Canny edge image above. (Right) The firing pin impression circle binarization of the Watershed segmentation image. Finally, now that we’ve identified where the firing pin impression circle is in the original image, we can simply replace any pixel values within this circle with NAs. The final filtered image is shown below. Figure 3.87: Final filtered image. Joe 10/3/18 Update: Determined a fairly computationally intensive yet (seemingly) effective way to find the firing pin impression circle in an image using a grid search of possible radius values. I will now start putting together a package for easy access. I’m not yet sure what to call the package, so any ideas are welcomed We can find a rough estimate for the firing pin radius estimate using a variety of methods. The one that I’ve found to be fairly consistent in the few examples I’ve worked with (detailed in the in the 9/18/19 update) is by counting the number of non-NA pixels in each row/column of the image and identifying the distance between the two largest local maxima in this non-NA count sequence. We can pass a grid of radius values centered on this estimate to a Hough Transform and determine which radius picks out the firing pin impression circle most effectively. The difficulty is in how we quantify “effective” using the output of the Hough Transform. Below you can see the original image including the “minutiae” within the firing pin impression circle that we hope to filter out. You can also see the result of filtering out the firing pin impression circle based on the original radius estimate (210 pixels) obtained from the “local maxima” method. Figure 3.88: (Left) Original breech face impression image. (Right) The breech face impression image after filtering based on a Hough Transform-selected circle of radius 210 pixels. As already discussed, we can test a variety of radius values around the 210 estimate to determine which is best. Below is a gif animating the result of filtering based on a Hough Transform for radius values ranging from 190 to 230. Although a radius of 210 does a decent job of filtering out the minutiae, a slightly smaller radius may be preferred as larger circles tend to cut into the breech face impression. We obviously want to retain as much of the breech face impression as possible for our later analysis. Figure 3.89: Gif showing the result of filtering based on Hough Transform circles of various radii. Using the output of the Hough Transform-selected circles shown above we would like to determine an optimal radius with which to filter out the firing pin impression circle. I explored a few ways of quantifying how “effective” a given radius is at filtering out the firing pin impression minutiae while simulataneously retaining as much of the breech face impression surface as possible. For example, it seemed logical to me to count the number of non-NA pixels we would be throwing out if we filtered based on a particular radius value. As you can see from the gif above, larger radii end up chewing into the breech face impression surface while smaller radii appear to sort of bounce around inside of the firing pin impression circle. We may be able to look at the count of filtered non-NA pixel values for each radius and determine a threshold in which the circles become large enough to start chewing into the breech face impression. Unfortunately, that is not the case. You can see from the plot below on the left that the number of filtered non-NA pixels increased fairly steadily. There isn’t an obvious location along the curve signalling when the circles are getting to be too large (the differences between successive counts are also shown). Since that metric didn’t end up being fruitful, I had to explore alternatives. One alternative that isn’t obvious from just visualizing which pixels are filtered by each radius is called the “Hough score” which essentially quantifies how confident the Hough Transform is that it indeed found the circle that it was told to find in the image. The plot on the right below shows the top Hough scores for each radius value. We can see that there is some variability depending on the radius value. However, there are a range of radius values starting at 210 in which the Hough Transform is consistently rather confident in its circle detection. In fact, we can see from the gif above that radius values between 201 and 206 indeed do a good job of filtering out the firing pin impression circle. Currently, I am basing my final firing pin radius estimate on the radius value in the middle of the longest-running sequence of high-confidence radius values. In both example breech face impressions that I’ve been working with (same type, fired from the same firearm), this final estimate ended up being 203. This is obviously promising, but I would like to spend time to verify that my current method is generalizable to other cartridge case scans. Figure 3.90: (Left) The number of non-NA pixels filtered out by the Hough Transform-selected circles for different radius values. (Right) The Hough score curve used to determine the firing pin radius estimate. Joe 10/10/18 Update: Discuss how the algorithm generalizes to different pairs of cartridge cases. Based on a sample of 5 known-match pairs, it appears that the algorithm does do a good job of deciding on a rotation value to make one breech face impression match up well with the other. Now that the skeleton of the algorithm has, for the most part, been fleshed-out, we can finally start testing it on different pairs of breech face impressions. For the sake of an example, I have 5 known-match breech face impressions shown below. In the state shown, the scans have been pre-processed to the point that we can visualy see when a pair matches. Hopefully, the scans should look to you as if one is just a rotated version of the other. One iteration of the CMC algorithm was already discussed in-detail in the 9/5/19 Update above, so I won’t go into detail about that here (I’m saving it for my Spotlight in November). Instead, we can see a gif that shows which cells from image A and image B we compare when calculating the cross-correlation. Recall that the image A cells are 100x100 and image B cells are 200x200, which is why the cells on the right appear to cover more of the breech face impression than the cells on the left. Figure 3.91: (Left) 100x100 cells from Image A. (Right) 200x200 cells from Image B. As we can clearly see from the 5 pairs above, we need to perform rotations to properly align one with the other. We perform the cross-correlation calculation for 43 different rotation angles (of image B) to determine which rotation angle yields the highest correlation (\\(\\theta \\in [-179.5,180]\\) by \\(2.5^\\circ\\)). However, because we have broken up our images into cells, each cell in image A gets to “vote” for the theta value for which it had the highest correlation with its paired cell in image B. Below, we see the distribution of such theta values (referred to as the “registration angle” in Tong et al. (2015)). The histogram shows that the many of the cells tend to vote for theta values in a relatively small range, which bodes well for us in determining the optimal rotation angle. Figure 3.92: Histogram of the registration angle of highest correlation for each of the 5 pairs of breech face impressions. Since we clearly have a region of popular theta values for each pair, we can perform a finer search around these theta values to arrive at a more precise estimate. The histogram for this finer grid search is shown below. According to Tong et al. (2015), the minimum number of cells that must agree upon a theta value (up to some margin) for two breech face impressions to be called a “match” is 6. We can clearly see from the histogram below that this criterion is met. There are other criteria that Tong et al. discuss including how far we need to shift each cell in image A to achieve the highest correlation with the neighboring cell in image B. Those criteria also seem to be met on the examples I’ve looked at. Figure 3.93: A finer grid search histogram of the registration angle of highest correlation for each of the 5 pairs of breech face impressions. Finally, we can pick the most popular rotation angle for each firearm pair and visually compare how well the two breech face impressions match up. This is done so below. We can see that the algorithm has indeed selected good rotation values for each pair. Continued testing the CMC algorithm on more known match and known non-match pairs of cartridge cases. It’s a time intensive process, but the current results show that the algorithm works for the majority of known match pairs and, most importantly, appear to be qualitatively similar to what is reported in Tong et al. (2015). I’ve continued to run the algorithm on a number of known match pairs of cartridge cases. Although the algorithm seems to work well for the majority of known match pairs, it isn’t perfect at picking the correct rotation angle. I haven’t yet determined the cause of when the algorithm fails to pick the correct rotation angle. Figure 3.94: A pair of known match cartridge cases that start off as rotationally mis-aligned. Figure 3.95: The same pair as above after being correctly aligned via the CMC algorithm. Below is an example of a pair for which the algorithm does a poor job of choosing the correct rotation to align the two images. Figure 3.96: A pair of known match cartridge cases that start off as rotationally mis-aligned. Figure 3.97: The same pair as above after being incorrectly aligned via the CMC algorithm. While running code, I’ve also been working on putting all of my working functions into a package. I should hopefully have something resembling a structured package by my spotlight in November. Finished computing (almost) all 780 possible known match and known non-match comparisons for the 40 cartridge case scans discussed in the Tong paper. We’re running into an issue where the correlations we’re getting out appear to be signficantly lower than what we expect them to be based on the results reported by Tong et al. The biggest challenge is that we effectively need to guess how the images in the Tong paper were pre-processed, so certain decisions we make may drastically affect the final results. We’re going to see if making a few minor changes to the way we pre-process the images will change the results to what we expect. Our current goal is to demonstrate that the current form of the package produces “qualitatively similar” results to those presented by Tong et al. Unfortunately, we don’t actually know which data they used to produce their results. We have a strong suspicion that they just used the first pair of cartridge cases encountered when downloading the study’s data from the NBTRD website, so we’re going to try to base our results comparison based on those. Below we can see the known match cartridge case pair in their raw format before pre-processing. In this state, it’s difficult to make any comparisons between the two breech faces. The first step is to process these images to both remove as much of the non-breech face region of the image as possible and accentuate the breech face impression markings left on the cartridge case. We can see the results of the pre-processing below. It will hopefully look to you as if one of the images is simply a rotated copy of the other. Our goal is to automatically detect what the correct rotation value is to properly align the two images. In order to find the correct rotational value to align the two images, we divide the first image (fadul1-1) into a 7x7 grid of cells. For each cell in image 1, we select a similarly located, wider region in image 2 and calculate the cross-correlation between the image 1 cell and the larger image 2 region. Below is an image that illustrates this for a particular cell. Below is a gif showing an example of cell/region pairs for which the CCF is computed. Figure 3.98: (Left) 100x100 cells from Image 1. (Right) 200x200 cells from Image 2. Once we calculate the CCF for each cell/region pair, we rotate image 2 by a few degrees, say 3 degrees, and repeat the process. We can obviously keep track of the correlation values for each rotation and determine for which rotation values a particular image 1 cell attains its maximum CCF. If two cartridge cases are genuine matches, then we would expect there to be some consensus among the cells for which theta value they attain their max CCF. For example, below we see a histogram of theta values for which the cells in the fadul1-1 attain highest correlation in their associated fadul1-2 regions. We can see a peak around -20 degrees. In particular, the consensus-based theta value turns out to be -21 degrees. If we then consider the CCF values at the -21 degree rotation comparison, we see there are quite a few cells that could be classified as “highly correlated”. Tong et al. discuss various criteria they use to define a cell as a “Congruent Matching Cell.” For example, they set a minimum CCF value of .25. Based on the criteria that they set, we can see in the table below that there are 14 cells that can be defined as CMCs. In their original paper, the number of CMCs they found was 15. The discrepancy likely comes from the fact that they perform different pre-processing steps than we do but don’t discuss what those pre-processing steps are. cell_ID corr dx dy x = 1 - 82,y = 407 - 487 0.4605801 -7 -19 x = 83 - 163,y = 83 - 163 0.3465763 -1 -13 x = 83 - 163,y = 488 - 568 0.2773731 -35 25 x = 164 - 244,y = 488 - 568 0.3917978 -24 2 x = 245 - 326,y = 488 - 568 0.4946205 -17 1 x = 327 - 407,y = 407 - 487 0.4824218 4 2 x = 327 - 407,y = 488 - 568 0.4830941 -17 4 x = 408 - 488,y = 83 - 163 0.4034100 9 -13 x = 408 - 488,y = 164 - 244 0.3274178 4 -14 x = 408 - 488,y = 407 - 487 0.4588278 7 -3 x = 489 - 569,y = 83 - 163 0.5382969 9 7 x = 489 - 569,y = 164 - 244 0.4523592 -31 21 x = 489 - 569,y = 326 - 406 0.5687978 8 16 x = 489 - 569,y = 407 - 487 0.5720020 2 24 We can visualize which cells in fadul1-1 are classified as CMCs. The image below shows the fadul1-1 CMCs as well as fadul1-2 rotated by -21 degrees (the consensus-based theta value chosen from before). We can see that most of the regions with the most obvious visual similarity between the two cartridge cases (in particular, the linear markings in the bottom-right of each image) are indeed classified as CMCs. We are currently running into issues where the correlations values we get out between the two images are not nearly as high as they appear to be in the Tong paper (although we don’t really know since they didn’t provide much context). Below is an example of a pair of known match cells. The two breech faces have already been rotationally aligned (by hand), so these should have very high correlation (apparantely something north of .55 according the the Tong paper). We can certainly see a mode in the correlation (red spot), but it is hard for me to interpret exactly what that mode represents. I believe it represents the shift needed to align the second, larger image with the first image. I need to do some more digging into what is actually happening with FFTs and cross-correlation implementations to know for sure. I’m still currently trying to determine the cause of the correlation issue we’re running into. In doing so, I’ve been making sure that the method by which we are calculating correlation works for simpler examples. I found these examples useful in understanding the strengths/limitations of using a FFT-based approach for calculating cross correlation, so I thought that I would share. For each of these examples, the image on the left is the “reference” image that we want to align the image on the right with. The left image will always be a square image with most pixel values 0 and a square of side length 20 pixels and value 255 in the middle. We want to see how changing characteristics of the right picture affects the correlation values calculated by the CCF. In the first example below, the image on the right just has the box shifted down 30 pixels and right 10 pixels. If we were to overlay the two images with their centers aligned, the correlation “map” that accompanies this pair provides instructions for how to shift the right image to correctly match up with the left image. We see from the location of the largest correlation value (of 1 at (-10,30)) that the CCF indeed detected the correct shift. In the second example, the 0-values pixels in the right image are replaced with randomly generated \\(\\mu = 0\\) and \\(\\sigma = 50\\) white noise. We see that the max correlation value still occurs at the right location, but with a smaller magnitude. We also see that the rest of the correlation map isn’t all 0 as it was in the 0-pixel example above. Lastly, we have an example where the second image contains a smaller square of side-length 10 pixels. We see that, again, the correlation value maximum occurs at the correct location yet with a magnitude well below 1. Joe’s 11/21 Spotlight: Visual Explanation of the “Improved” Congruent Matching Cells Algorithm proposed by Tong et al. (2015). A cartridge case is a type of pre-assembled firearm ammunition packaging a projectile (e.g., bullet, shots, or slug). Below is an image showing different examples of cartridge cases. When a firearm is discharged, the projectile stored in the cartridge case is propelled down the barrel of the firearm. In response, the rest of the cartridge case that remains inside of the firearm is forced towards the back of the barrel (for every action, an equal and opposite reaction). The force with which the remaining cartridge case (hereby referred to as simply “the cartridge case”) is propelled backwards causes it to strike against the back wall of the firearm’s barrel. This area is commonly referred to as the “breech face.” An example of a breech face from a 12 GAUGE, single-shot shotgun is shown below. The hole in the center of the breech face is where the firing pin shoots out to strike the cartridge case primer, which in turn ignites the propellant within the cartridge case causing an explosion that propels the bullet forward down the barrel. As you can see from the image above, there are markings (e.g., manufacturing imperfections) on the breech face. When the cartridge case slams against the breech face during the firing process, these markings can be “stamped” into either the primer of the cartridge case or the cartridge case itself. The markings left on a cartridge case from the firearm’s breech face are called “breech face impressions.” The image below shows the primer of a shotshell fired in the above shotgun. You can clearly see that some impressions were left on the primer during the firing process. The image below shows how the breech face scans come in their raw format. We want to preprocess the images to remove the firing pin impression in the center and accentuate the firing pin impression. Although it is non-trivial to preprocess the images, I am going to skip the explanation of the preprocessing steps so that we have time to focus on how we quantify similarity. The image below shows the result of the preprocessing steps. We could now directly calculate the pixel-wise correlation between these two images. However, there are a few issues with doing so directly. One issue is that we can visually see that the two images are not rotationally aligned, so we wouldn’t expect the correlation to be particularly high. We can fix this by considering a variety of rotations of the images to determine for which rotation the images are the “most aligned.” While it’s not obvious from the images, there is also an issue with the two images being translationally aligned. Lastly, due to the slight differences between the two images, taking the pixel-wise correlation between the entirety of the two images may lead to a deceptively small correlation. This is the motivation behind what Tong et al. (2015) describe as the “Congruent Matching Cells” algorithm. The idea is quite simple. Rather than calculating correlation across entire images, it might be better to break up each image into smaller pieces (“cells”) and calculate correlation for each cell pair. In doing so, a highly correlated pair of cells won’t be drowned-out by less correlated pairs of cells. Tong et al. propose this cell-based method for quantifying similarity between two breech face impressions. For a given pair of images (like the two shown below), the first image is divided into a 7x7 grid. Each cell in this grid is then compared to a region in the second image. Because the two images aren’t assumed to be translationally aligned, the region in the second image will be larger than its associated cell in the first image so that different \\((dx,dy)\\) translation pairs can be considered. Below is a gif showing an example of different pairs of image 1 cells (left) and image 2 regions (right). Figure 3.99: (Left) 100x100 cells from Image 1. (Right) 200x200 cells from Image 2. We measure the similarity between two breech face impressions using the cross-correlation function. The cross-correlation function (CCF) is a measure of similarity of two series as a function of the displacement of one relative to the other. The cross-correlation function for two complex functions \\(f(t)\\) and \\(g(t)\\) for \\(t \\in \\mathbb{R}\\), denoted \\(f \\star g\\), is defined by \\[ (f \\star g)(\\tau) \\equiv \\int_{-\\infty}^\\infty \\overline{f(t)}g(t + \\tau)\\ dt \\] where \\(\\overline{f(t)}\\) is the complex conjugate of \\(f(t)\\). The cross-correlation can be used as a measure of similarity between two different functions. In particular, for \\(f,g\\) real-valued we can interpret the CCF as a measure of common area or “overlap” between the two functions at different values of \\(\\tau\\). The value \\(\\tau\\) at which \\((f \\star g)(\\tau)\\) achieves its maximum can be interpreted as the horizontal translation of \\(g\\) at which \\(f\\) and \\(g\\) are overlapping the most (i.e., are the “most similar” to each other). Below is an animation of two sinusoids that illustrates this concept. We can view the blue sinusoid as being the stationary \\(f\\) function while the red sinusoid is function \\(g\\) that is being translated by different versions of \\(\\tau\\). For each \\(\\tau\\) value, the integral of the product of the two functions (since \\(f\\) is real-valued, \\(\\bar{f} = f\\)) is plotted as the green curve. We can see that the CCF achieves a maximum at \\(\\tau = 0\\). Intuitively, this because the peaks and troughs of the two functions line up perfectly when \\(g\\) is translated by \\(\\tau = 0\\) units, so their product contributes a large, positive amount to the integral. Because we work with discretized representations of cartridge cases, we need to use the discrete analogue of the cross-correlation function. For two discrete functions \\(f\\) and \\(g\\), the CCF is defined to be \\[ (f \\star g)(n) \\equiv \\sum_{m = -\\infty}^\\infty \\overline{f(m)}g(m+n) \\] The images we use are obviously 2-dimensional while the CCF defined above is for 1-dimensional functions. The 2-dimensional extension of the CCF is defined analogously. We can see two examples below of how the 2-dimensional CCF works for simple images. The image immediately below shows an image on the left of mostly 0-valued, black pixels with a 20x20 pixel square of 255-valued, white pixels. The image on the right is the same as the image on the left, but with the square shifted to the right 10 pixels and down 30 pixels. The blue/green/red image below these two shows the correlation “map” that indicates the CCF values for various \\((dx,dy)\\) pairs. If we were to overlay the two images such that their centers aligned with each other, the CCF map tells us how we should shift the second image so that it properly aligns with the first image. As we can see in this simple example, the maximum correlation (of 1) occurs at \\((dx,dy) = (-10,30)\\) indicating that we should move the second image to the left to pixels and up 30 pixels. This demonstrates that the CCF is sensitive to the correct translation values, at least for these simple examples. To show a situation in which the CCF map changes, consider the images below. The image on the left is the same as the example above. However, the image on the right now has WN\\((\\mu = 0,\\sigma = 50)\\) pixels instead of strictly 0-valued pixels. The rectangle in this right image is in the same location as in the example above, yet with an intensity of 100 rather than 255. Lowering the intensity means that we are making the rectangle’s “signal” weaker relative to the surrounding pixels. We can see from the CCF map that this weaker signal indeed affects the correlation values. Although the \\((dx,dy)\\) at which the CCF achieves its maximum is still at the appropriate location \\((-10,30)\\), we see that this max CCF is now only around \\(.4\\). Hopefully the two examples above provide some intuition in how the CCF function can be used to measure properly align two images to be the “most similar.” As already stated, we perform this CCF calculation for each cell in image 1 and associated region in image 2. For each pair, we keep track of the both the value and \\((dx,dy)\\) translation at which the CCF achieves its maximum. We count this as the that cell’s “vote” for how the two images should be shifted to become properly aligned. It’s reasonable to assume that the true \\((dx,dy)\\) translation values should receive many votes from cells, up to some error threshold (e.g., the votes should be within, say, 25 pixels of the true values). Determining the correct rotational alignment isn’t as straightforward. We need to search over a grid of \\(\\theta\\) rotation values and determine the rotation for which the most cells vote. Below is a gif in which we can compare the two breech face scans for various rotations of the second image. We can visually see that the two images are most similar at a rotation value of about \\(-24^{\\circ}\\). The blue region on the right image is meant to illustrate the region that is being compared to to the associated cell in the left image. Below is an example showing the CCF map associated with (left) an image 1 cell and (right) its associated image 2 region. We can see that the CCF hits a maximum of about .5 around \\((25,0)\\). This is, unfortunately, not nearly the magnitude of correlation that we should expect based on the results discussed in Tong et al. (2015). It sounds like the correlation values they were getting from their comparisons were consistently above .55. The CCF maps that we have calculated are rarely above .55. Our hunch is that they are using the CCF to extract the \\((dx,dy)\\) pairs, but then computing the raw, pixel-wise correlation between the two images once they translate appropriately. We can keep track of each cell’s vote for the rotation and translation values at which it achieved its maximum correlation with its associated region in image 2. Again, we would expect that the true rotation and translation values should receive a large number of votes. We can see below a histogram of the theta values voted for by the cells in the left image above. We can a clear mode at a \\(\\theta\\) value slightly less than -20. Based on the gif of the rotating breech face above, it appears that the automatic CCF-based “votes” agree with what we can visually see to be the best rotation value to align the two images. Based on the histogram above, the algorithm has detected the correct rotation value to align the two images. If we were to rotationally align the two images based on this value, we can count the number of pairs that are “highly similar” with each other. Tong et al. discuss various criteria to use to define “highly similar” including having a minimum CCF value (.55 in their paper). They also require that the \\((dx,dy)\\) translation values that a particular pair voted for must be within some number of pixels of the “majority-voted” translation values (they propose a maximum of 25 pixels away from the median translation values). All of this seems rather arbitrary, so it would be interesting to explore if alternative criteria would be more effective at differentiating between matches and non-matches. Joe 12/5 Update: I believe we’ve finally cracked the issue that we’ve been running into the past few weeks of our correlations not being as high as those reported in the Tong paper. The fix is that we can first use the FFT-based method of calculating the CCF to obtain the correct dx,dy translation pairs and then calculate the raw correlation between the two images once we translate them appropriately. Before, we were using the correlation given to us by the FFT-based CCF method, which were most often deflated relative to the true correlation (due to replacing missing values with 0). Below, I have three examples showing the raw correlation values between pairs of cells. Any pair with a correlation above .55 we would call “highly correlated” under the Tong paper’s criteria. The first example below shows a best-case scenario in which we have two images containing a lot of observed values and those observed values have a fairly high correlation (high enough to meet the arbitrary .55 threshold, at least). However, the second example shows a not-so-great scenario in which we don’t have a lot of observed values in the two images, but they are still highly correlated. We should be less confident that such examples indicate that the overall breech face impressions are “true matches” than we are in the example above, but the Tong paper doesn’t seem to make such a distinction. Lastly, I have an example of two images that certainly have many observed value that visually look like they should be fairly highly correlated. However, we can see by the raw correlation value that they, in fact, wouldn’t pass the threshold to be “highly correlated.” As such, we wouldn’t include them when we count the number of highly correlated pairs between the two images. I wanted this example to demonstrate that our eyes don’t always necessarily pick up on subtleties as strongly as a computer might. Joe 12/12 Update: I have been trying to implement the Tong paper’s criteria for calling two images “matches” and apply these criteria to all of the known match and known non-match image pairs. I have results to share regarding the number of CMCs counted for each known-match cell pair (the known non-matches take much longer to run). To recap, the CMC algorithm attempts to match two breech face impression images by breaking the image up into “cells” and counting the number of cells that are highly similar between the two images. So for each pair of images, we get a congruent matching cell count indicating how similar the overall images are. For the Fadul data that the Tong paper uses, there are 63 known match pairs. The bar chart on the left shows the various CMC counts for these 63 known match pairs as determined by our implementation in the algorithm. In contrast, the CMC count distribution as reported in the Tong paper is on the right (known matches in gold). We can see that our histogram is qualititatively similar to the gold distribution on the right. There are two pairs that seem to be giving us trouble in the histogram above (we expect all of the known match pairs to have a large number of “highly similar” cells). Below shows the se two pairs. Hopefully it’s clear to see that the first pair, while known matches, look fairly different. There are many regions in the image on the left that are missing from the image on the right. These differences possibly provide some justification as to why the current implementation of the algorithm fails to identify these two images as matches. The troubling example is below. It’s visually obvious that these two images are very similar to each other. However, the algorithm does not identify these as matches. Our current hunch is that the way we preprocess the images has a dramatic effect on the results we ultimately observe. We have a few ideas to tweak the preprocessing to hopefully fix such issues. Unfortunately, the Tong paper never describes how they preprocess the 3D scans, so we have no way of truly replicating their results. All we can hope for is qualitatively similar results, which appears to be the case for the most part. Joe 1/17 Update: Broad overview of project. A cartridge case is a type of pre-assembled firearm ammunition packaging a projectile (e.g., bullet, shots, or slug). Below is an image showing different examples of cartridge cases. Figure 3.100: Various cartridge cases When a firearm is discharged, the projectile stored in the cartridge case is propelled down the barrel of the firearm. In response, the rest of the cartridge case that remains inside of the firearm is forced towards the back of the barrel (for every action, an equal and opposite reaction). The force with which the remaining cartridge case (hereby referred to as simply “the cartridge case”) is propelled backwards causes it to strike against the back wall of the firearm’s barrel. This area is commonly referred to as the “breech face.” An example of a breech face from a 12 GAUGE, single-shot shotgun is shown below. Figure 3.101: Breech face of a shotgun The hole in the center of the breech face is where the firing pin shoots out to strike the cartridge case primer, which in turn ignites the propellant within the cartridge case causing an explosion that propels the bullet forward down the barrel. As you can see from the image above, there are markings (e.g., manufacturing imperfections) on the breech face. When the cartridge case slams against the breech face during the firing process, these markings can be “stamped” into either the primer of the cartridge case or the cartridge case itself. The markings left on a cartridge case from the firearm’s breech face are called “breech face impressions.” The image below shows the primer of a shotshell fired in the above shotgun. You can clearly see that some impressions were left on the primer during the firing process. Figure 3.102: Breech face impression on a cartridge case The image below shows how the breech face scans come in their raw format. We want to preprocess the images to remove the firing pin impression in the center and accentuate the firing pin impression. Figure 3.103: A pair of known match cartridge case scans Tong et al. propose this cell-based method for quantifying similarity between two breech face impressions. For a given pair of images (like the two shown below), the first image is divided into a 7x7 grid. Each cell in this grid is then compared to a region in the second image. Because the two images aren’t assumed to be translationally aligned, the region in the second image will be larger than its associated cell in the first image so that different \\((dx,dy)\\) translation pairs can be considered. Below is a gif showing an example of different pairs of image 1 cells (left) and image 2 regions (right). Figure 3.104: (Left) 100x100 cells from Image 1. (Right) 200x200 cells from Image 2. The two-dimensional CCF is used to quantify similarity between two breech face impressions. Below are two examples illustrating how to interpret the two-dimensional CCF. Below is an example showing the CCF map associated with (left) an image 1 cell and (right) its associated image 2 region. We can see that the CCF hits a maximum of about .5 around \\((25,0)\\). This is, unfortunately, not nearly the magnitude of correlation that we should expect based on the results discussed in Tong et al. (2015). It sounds like the correlation values they were getting from their comparisons were consistently above .55. The CCF maps that we have calculated are rarely above .55. Our hunch is that they are using the CCF to extract the \\((dx,dy)\\) pairs, but then computing the raw, pixel-wise correlation between the two images once they translate appropriately. The image below shows how the smaller breech face impression image aligns with the larger breech face impression image after being translated by the CCF-detected \\((dx,dy)\\) values. The animation below shows how the two breech face impressions compare for various rotations of the second breech face impression. We can keep track of each cell’s vote for the rotation and translation values at which it achieved its maximum correlation with its associated region in image 2. Again, we would expect that the true rotation and translation values should receive a large number of votes. We can see below a histogram of the theta values voted for by the cells in the left image above. We can a clear mode at a \\(\\theta\\) value slightly less than -20. Based on the gif of the rotating breech face above, it appears that the automatic CCF-based “votes” agree with what we can visually see to be the best rotation value to align the two images. Joe 1/27 Update: I’ve been starting to write up an article that we hope to submit to the R Journal to introduce the MARCC (Matching Algorithms in R for Cartridge Cases) package (name pending). It’s been rather time intensive, but I’ve also been re-running the algorithm with different pre-processing steps to determine how sensitive the final results are to how we pre-process the images. It seems like they are rather sensitive to the pre-processing procedure used. I thought I would share a few of the CMC distributions made for different pre-processing steps. These pre-processing steps include extracting the breech face impression region from the rest of the image, which may be done by-hand (Tong et al. (2014/15) may do this), using the RANSAC method (Xiao Hui and I have been doing this), or using a 2nd order robust Gaussian regression filter (Chen et al. (2017) does this). Further complications come in the form of how these methods are implemented across various MATLAB and R functions (I have yet to find a Gaussian Regression filter implemented anywhere in R or MATLAB) and whether they provide the same results. After selecting the breech face impression region from the scan, no paper I have come across details how they then resize their images to their desired dimension. Tong et al. resizes to 700x700 in 2014 and 560x560 in 2015. Chen et al. uses resizes to 600x600 in 2017. As discussed below, the resizing method (nearest-neighbors, linear, lanczos) does seem to affect the final results. To recap, we are supposed to call two cells a “match” (or “congruent matching cells”) if they pass a few criteria. These criteria are based in part on whether their associated translation and rotation “votes” are close to the consensus-based votes across all cells in the image. The motivation here being that we would expect the cells in a pair of truly matching cartridge cases to all vote for approximately the same translation/rotation values to achieve maximum similarity. Another criterion is that the cell pair must reach some minimum correlation cut-off (all of these criteria vary depending on the paper). Each of the following plots were subject to the same criteria and are based on the same data, so they should be the same plot. As we can clearly see, there is certainly some variability in how the CMC counts are distributed. This is an example from Chen et al. (2017) that the rest of the plots are trying to emulate. This plot was made using reportedly images downsampled to size 600x600 and an 8x8 grid of cells. Again, it’s unclear how this downsampling was performed since the raw surface data often have dimensions near 600x600, but never perfectly 600x600. The plots following include various resizing/padding techniques used to try to get this nominal 600x600 image size. This is a plot based on images that were resized to 560x560 (the image size specified by Tong et al. (2015)) using linear interpolation. This is a plot based on images that were resized to 600x600 (the image size specified by Chen et al. (2017)) using the x3ptools::resize_x3p() function followed by padding the image with NAs until it reaches a size of 600x600. This final distribution is the most promising of the ones I’ve made. This distribution is also based on images that were resized using x3ptools::resize_x3p(). However, rather than padding the exterior of the image with NA rows/cols until it achieves the nominal 600x600 size, the image is first split into an 8x8 grid of cells and each cell is individually padded until it reaches dimension 75x75. Joe 2/3 Update: I’ve been working on getting a Gaussian bandpass filter implemented for the cartridge cases in an attempt to match the results reported by Chen et al. (2017). I’ve also been writing more of the journal submission while code runs. Below is an image of black (0 intensity) grayscale image to which a low-frequency, 255 intensity box and high-frequency Gaussian noise has been added. Below is a 3D rendering of the same image. A “low pass” Gaussian filter can be interpreted as reducing the strength of high frequency signals in the image. In the image above, the Gaussian noise is higher in frequency than the white box, so it can be reduced without drastically affecting the box. In the spatial domain, we can think of a moving average as performing a similar operation as a low pass filter. Conversely, a “high pass” Gaussian filter reduces the strength of low frequency (longer period) signals and emphasizing high frequency signals. We can see in the image below that much of the white box has been removed from the image below by passing a high pass filter since the much of the white box can be explained with large period sinusoids. Only the edges, which would need to be explained with higher frequency sinusoids, remain after passing the high pass filter. The Gaussian noise also remains. Joe 2/10 Spotlight: A further explanation of how I have been pre-processing the images and how those steps affect the CCF values. I have been spending the last few weeks tweaking the pre-processing procedures in order to perform a “sensitivity analysis” of the final results given a variety of initial conditions. This has required me to look deeper into various image processing techniques that has taken up a surprising amount of time. I have also been trying to pull together the various threads of the project into a cohesive manuscript and R package. I’m planning on making this project my CC and hoping to present it in late March/early April. I’ve spent a considerable amount of this project, possibly more than half, agonizing over various image processing techniques. We had a working “prototype” of the CMC working as far back as October of last year. However, it quickly became evident that our results didn’t quite match the results reported by authors at NIST. This realization caused us to go down a variety of rabbit holes, some of which we’re still in, to determine the cause of these differing results. The biggest obstacle that we’ve faced is that we don’t quite know how the images were processed before they were used in the CMC method; and it doesn’t appear that NIST is willing to share much of their information (although Susan is currently trying to get them to share). There are a variety of decisions that need to be made when pre-processing the images that aren’t discussed in sufficient detail in any papers on the CMC method. So it has been up to us to test various combinations of these decisions to determine how they affect the final results. Because I have been spending so much time the past few weeks (months?) exploring various pre-processing techniques, I’m hoping to share with you all some of what I have learned. I’ve never really discussed the pre-processing procedure(s) in-full, so I hope to use this space as an opportunity to pull together various threads that I can hopefully use for my CC. When we say that we need to “pre-process” the cartridge case scans, we mean that there are regions of the scan that aren’t useful to us that we want to remove. In particular, any regions that don’t come into contact with the breech face of the firearm barrel aren’t going to be informative. The image below shows left-hand side and top-down views of a cartridge case. The regions we want to remove outright from the scan are highlighted in red in the image below. The red circe in the middle is caused by the firing pin pushing into the cartridge case primer, causing some of the metal to be pushed to the side. This region does not come into contact with the breech face, but instead goes inside of the firing pin hole. The cluster of points in the corners of the image are from the machine with which the scan was taken. Removing these regions by hand would be straightforward. The issue comes from trying to come up with automatic methods for identifying and removing these regions for an arbitrary scan. The first goal is to identify at which height value the breech face impression is in the scan. We currently use the RANSAC (RAndom SAmple Consensus) method to accomplish this. For our purposes, RANSAC iteratively fits a number of “candidate” planes to the cartridge case scan based on randomly selected points. At each iteration, the method determines whether a newly proposed candidate plane contains more “inliers” (defined as points within some threshold distance of fitted plane) than the previously proposed candidate planes. If so, then the method chooses this new plane as the current “consensus.” After a set number of iterations, the last consensually-selected plane is returned. The picture below provides a 2-dimensional illustration of the method (Source). Once the RANSAC plane is fit, we have two options. We can either take the residuals between the fitted plane and the observed breech face impression values or simply extract from the original scan the observed values within some specified distance of the fitted plane. Assuming that the cartridge case scans aren’t tilted off the horizontal, these should yield similar results. However, we have some evidence to suggest that the planes are slightly tilted. The pair of images below illustrates this point. The image on the left represents the raw, observed breech values while the image on the right contains the residuals. The grayscale intensity of the images reflect the height values. We can see that in the image on the left that there is a general trend from darker to lighter pixels (i.e, height values go from low to high) from the bottom-left corner to the top-right corner. The image on the right, on the other hand, does not contain this trend since it contains residual values. It should be noted that, although we can see a trend, this trend may be exaggerated since the pixel intensities are colored on a scale relative to the values in the image. That is, although there is a clear trend, this trend may not actually be that extreme when viewing the raw pixel values. We have yet to determine whether fixing this tilt affects the results in any major way, but, to be safe, we have mostly been using the residuals rather than the raw, observed breech face impression values. It should be noted that because the RANSAC method is dependent on randomly selected points in the scan, the final consensually-selected plane may differ in size/values between different applications of the method. However, we’ve observed this difference to be only slight across the many times we’ve applied the method. You’ll notice in the above image that we still haven’t removed all of the observed values inside nor outside the breech face impression. These remaining, unwanted pixels happen to have the same height value as the breech face impression pixels. Removing the outer pixels simply requires cropping the image down such that the breech face impression pixels touch the edge of the image. Removing the inner pixels is slightly harder and was the focus of a few weeks of work last semester. The method we implemented to detect where these pixels are in the image involves first estimating the radius of the inner circle and then using a Hough Transform to detect where that circle is in the image. For the sake of wanting to discuss other pre-processing more in-depth, I’m going to skip the details here. The additionally cropped/filtered image using the RANSAC residuals is shown below. The next pre-processing step involves passing a Gaussian filter over the image to improve the “signal-to-noise” ratio. For our purposes, the “signal” that we want to identify are the impression markings left by the breech face onto the cartridge case. “Noise” includes possible measurement error and larger structure on the cartridge case that isn’t an artifact of contact with the breech face. The Gaussian filtering is performed in the frequency domain using the Convolution Theorem. Gaussian Filter Intuition Below is an image of black (0 intensity) grayscale image to which a low-frequency, 255 intensity box and high-frequency Gaussian noise has been added. Below shows a 3D rendering of the same image. A “low pass” Gaussian filter can be interpreted as reducing the strength of high frequency signals in the image. In the image above, the Gaussian noise is higher in frequency than the white box, so it can be reduced without completely removing the box, although the box will be affected. In the spatial domain, we can think of a weighted moving average as performing a similar operation as a low pass filter. Conversely, a “high pass” Gaussian filter reduces the strength of low frequency (longer period) signals and emphasizing high frequency signals. We can see in the image below that much of the white box has been removed from the image below by passing a high pass filter since the much of the white box can be explained with large period sinusoids. Only the edges, which would need to be explained with higher frequency sinusoids, remain after passing the high pass filter. The Gaussian noise also remains. A Gaussian bandpass filter can be used to reduce signals that are either too low or too high in frequency - i.e., what we have deemed to be noise. Below we can see the processed RANSAC residuals after filtering using a Gaussian bandpass. I’ve implemented the Gaussian bandpass by-hand since effectively no package We can see that the “high-frequency” markings that were in the top-right quarter of the original RANSAC residuals have been visually reduced. Increasing the high-pass threshold of the Gaussian filter would mean allowing more of the high-frequency signals to be unaffected. A balance must be struck so that enough of the “true signal” remains in the filtered image while simulatenously reducing the effects of random noise. All of this pre-processing can be done while keeping the original resolution of the surface matrix. For the Fadul (2011) sets, this is 3.125 microns/pixel. The literature available commonly describes downsizing a breech face impression to speed up computational time. However, no direction is given into how this downsampling happens. For example, we could downsample simply by taking every every other row/column in an image. This is the method implemented in the x3ptools::sample_x3p function. On the other hand, a large number of downsampling interpolation techniques exist that take weighted averages in neighborhoods of points to determine the values in a downsampled image. Many of these interpolation methods (nearest neighbor, linear, cubic, lanczos) are implemented in the imager::resize function. However, imager is effectively an R frontend to the C library CImg, so the way in which these methods are actually implemented may be difficult to track down. Sensitivity Analysis Example To illustrate some of the sensitivity of the final results to the pre-processing steps, we’ll consider an example in which we have 3 cartridge case scans. We’ll consider two of them “known” and one of them to be “questioned.” We’ll consider combinations of two different decisions: 1) take the RANSAC residuals or the raw breech face impression values and 2) pass a gaussian bandpass filter over the images or not. In each of these examples, the questioned cartridge case is in the top left, its (known) match is in the top right, a (known) non-match is in the bottom left, and the distribution of maximum CCF values per cell comparing the questioned cartridge case to the two known cartridge cases is in the bottom right. Below we can see the results if the RANSAC residuals were taken and then bandpass filtered. We can see considerable overlap between the two distributions. Below we can see the results if the raw breech face values were taken and then bandpass filtered. Again, considerable overlap. Below we can see the results if the raw breech face values were taken, but no bandpass filter was applied. One could argue that the CCF values are slightly higher than in the bandpass cases, but there is still considerable overlap. Startilingly, the non-bandpassed, raw values yield the highest CCF values of these 4 combinations. However, it’s important to point out that the known match images very clearly have trend that starts low in the bottom left corner and increases to the top right corner. The non-match has a completely different trend. As we can see from the non-bandpassed, residual CCF histogram above, it appears that this global difference does have a fairly drastic effect on the final results. From what I have read, no author recognizes this global trend as a possible reason for the why matches tend to be more similar than the non-matches. Joe 2/17 Update: Not too much to report today. I’ve mainly working on the cmcR package and writing. Joe 2/24/20 Update: Not too much to update for today. I’ve been working on writing the package and associated RJournal submission. I have a few functions that I am still planning on implementing in the package, but I will for the most part be getting the package CRAN-ready. I’m planning on building upon the journal submission for my CC that I’ll be presenting in April, so I will soon begin writing that as well. Joe 3/2/20 Update: I spent a considerable amount of time writing my CC this week. I essentially only have the Literature Review and Results/Conclusions sections to write up before the initial draft is complete. I’ve also been working on pulling together results to put in the results section, but performing the entire CMC procedure on around 800 cartridge cases takes about 6 hours (I’ll try to parallelize better to cut this time down on the server). Joe 3/9/20: Still more CC writing, pulling together results for the Results/Conclusion section, and tweaking functions in the cmcR package. We’re seeing more promising results than we have in the past, but there are still avenues to explore. I’m looking forward to sharing these results and the cmcR package at my Spotlight the Monday after spring break! 3.3.3 Modified Chumbley non-random test 3.3.3.1 Land-to-land scores The moified Chumbley non-random algorithm is a statistical non-paramaetric test that compares two signatures under consideration and gives a test statistic. The test statistic is used to make classifications and compute error rates based on different nominal type I levels. The basic principle behind the method is to first take two marking that have to be compared, choose a segment length which is a portion of the signature, and use this window segement to find which windows give the maximum correlation. The lag between these respective markings is computed based on the location of the two maximum correlation windows in the two markings. Now the algorithm works in two steps where first, lag congruent correlations between several smaller windows of the two markings are computed, this is called the same-shift. The second step serves the purpose of computing windows of correlation between the two signatures with window sized the same as the same-shift, but the with the purpose of finding correlations when the windows are not lag synchronized. The second step is called different shift step and has a specific order in which the pair of windows are chosen between which the correlations are to be computed. The different-shift serves as benchmark for comparison. It shows a set of bad correlations, against which the same-shift correlations are compared. A U-statistic is computed for the comparison based on the correlations in this procedure. The modified chumbley method (Krishnan and Hofmann 2019) can work with two markings at a time. Therefore the method can be used for comparing signatures from one land to signature from another land. The land-to-land comparison was performed for Hamby 44 dataset from (Zheng 2016) and CSAFE (Krishnan and Hofmann 2019) and associated error rates were computed for these comparisons. 3.3.3.2 Bullet-to-bullet scores In this method we extend the modified chumbley non-random method from land-to-land scoring to bullet-to-bullet scoring. In order to do this, first 6 ordered pairs of lands between the two bullets are chosen for comparison. The modified chumbley method is used on these 6 pairwise comparisons. This results in the same-shift and different-shift comparisons from each of the 6 comparisons. We do not need a land-to-land pairwise U-statistics and classification in this method. Instead all the same-shift and different-shift correlations are now aggregated from the 6 comparisons and a new non-parametric U test is used on the aggregated sets. This gives a test statistic at the bullet level and consequently we can compute p-values. This is used with different nominal significance levels to identify bullet level error rates. 3.4 Analysis of Results 3.5 Communication of Results and Methods The results are communicated through an interactive user interface. The first part of this interface lets you add all the bullets, barrels and lands for which the random forest and other scores are to be computed. A preliminary diagnostic of the orientations and dimensions of the lands tell us, if we can proceed safely to extraction of markings and then to cross-comparisons. After this step, we can apply any sampling or interpolation needed on the land images, all these operations can be batched to the entire set of comparisons under consideration. Then we can make transformations like rotation, transpose etc on a sample image, visualize the results, and since we are dealing with conforming orientation and dimensions of lands present in the entire set, we can batch the transformations. We extract markings, locate grooves, align signatures, and generate cross-comparison results. Each step is notified in UI and all steps are logged. The scores and results are then communicated through an interactive visualization. We first interact at the top most level where we have bullet-to-bullet scores for all the cross-comparisons presented in a grid. We can select one comparison at a time which would generate a second level of grid visualization that shows the land-to-land scores for all 36 comparisons within a bullet. Interacting with this visualization, we can now pull up score tables, profiles, location of grooves, aligned signatures and raw images. The framework of interactions, allows for validation of classification recommended by the RF model as well as gives an opportunity to critically asses, identify the cause and diagnose any problems encountered in the bullet matching pipeline. Figure 3.105: An instance of the interactive visualizations for communicating results 3.5.1 Conference Presentations 3.5.1.1 American Academy of Forensic Sciences “Validation Study on Automated Groove Detection Methods in 3D Bullet Land Scans” February 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Presentation given by Kiegan Rice 3.5.1.2 Association of Firearms and Toolmark Examiners Annual Training Seminar Heike’s talk “Reproducibility of Automated Bullet Matching Scores Using High-Resolution 3D LEA Scans” May 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Presentation given by Kiegan Rice 3.5.1.3 Joint Statistical Meetings “A non-parametric test for matching bullet striations: extending the chumbley score for bullet-to-bullet matching” July 2019 Authors:Ganesh Krishnan, Heike Hofmann Talk given by Ganesh Krishnan “Repeatability and reproducibility of automated bullet comparisons using high-resolution 3D scans” July 2019 Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Poster presented by Kiegan Rice 3.5.1.4 Miscellaneous 10th International Workshop on Statistics and Simulation in Salzburg, Austria, September 2019 “Reproducibility of High-Resolution 3D Bullet Scans and Automated Bullet Matching Scores” Authors: Kiegan Rice, Ulrike Genschel, Heike Hofmann Poster presented by Kiegan Rice, won 2nd Springer Poster Award “Case Study Validations of Automatic Bullet Matching” Authors: Heike Hofmann, Susan VanderPlas Presentation given by Alicia Carriquiry 3.6 People involved 3.6.1 Faculty Heike Hofmann Susan VanderPlas 3.6.2 Graduate Students Ganesh Krishnan Kiegan Rice Nate Garton Charlotte Roiger Joe Zemmels Yawei Ge 3.6.3 Undergraduates Talen Fisher (fix3p) Andrew Maloney Mya Fisher, Allison Mark, Connor Hergenreter, Carley McConnell, Anyesha Ray (scanner) References "],
["project-g-handwriting-signatures.html", "Chapter 4 Project G: Handwriting (&amp; Signatures) 4.1 Data Collection 4.2 Computational Tools 4.3 Statistical Analysis 4.4 Communication of Results 4.5 People involved", " Chapter 4 Project G: Handwriting (&amp; Signatures) The handwriting project has four major focuses: data collection computational tools statistical analysis glyph clustering closed set modeling for writer identification communication of results 4.1 Data Collection We are conducting a large data collection study to gather handwriting samples from a variety of participants across the world (most in the Midwest). Each participant provides handwriting samples at three sessions. Session packets are prepared, mailed to participants, completed, and mailed back. Once recieved, we scan all surveys and writing samples. Scans are loaded, cropped, and saved using a Shiny app. The app also facilitates survey data entry, saving that participant data to lines in an excel spreadsheet. As of September 2019, Marc and Anyesha are the primary contacts for the study. Phase 2 recruiting is underway. The first 90 complete writers were published: &gt; Crawford, Amy; Ray, Anyesha; Carriquiry, Alicia; Kruse, James; Peterson, Marc (2019): CSAFE Handwriting Database. Iowa State University. Dataset. https://doi.org/10.25380/iastate.10062203. Anyesha and I worked on a variety of data quality checks and batch processing prior to publication. Scanner cuts a portion of the left side of the documents off sporadically. Survey date checks. Batch removal of header. Figure 4.1: Batch process samples: rotate 0.05 degrees, turn black line pixels white, crop 450 pixels from top (under QR code), rename. We hit a bump with the ISU Office for Responsible Research (ORR). They had concerns with the demographic variables we collected on the surveys and wanted to publish. We \"negotiated’’ and settled on the following survey information. A data article was accepted at Data in Brief. Crawford, A., Ray, A., &amp; Carriquiry, A. (2020). A database of handwriting samples for applications in forensic statistics. Data in brief, 28, 105059. 4.2 Computational Tools handwriter is a developmental R package hosted at https://github.com/CSAFE-ISU/handwriter. It is our major computational tool for the project. The package takes in scanned handwritten documents and the following are performed. Binarize. Turn the image to pure black and white. Skeletonize. Reduce writing to a 1 pixel wide skeleton. Break. Connected writing is decomposed into small manageable pieces called glyphs . Glyphs are graphical structures with nodes and edges that often, but not always, correspond to Roman letters, and are the smallest unit of observation we consider for statistcal modelling. Measure. A variety of measurements are taken on each glyph. See Section 4.2.1. Figure 4.2: Connected text processed by handwriter. The grey background is the original pen stroke. Colored lines represent the single pixel skeleton with color changes marking glyph decomposition. Red dots mark endpoints and intersections of each glyph. For an input document, functions in the package give back a list of glyphs with path and node location information, adjacency grouping assignment, centroid locations, measurements (such as slope, pictured below), among other things. More on measurements in Section 4.2.1. Figure 4.3: A visual of the ‘’slope’’ calculation for two glyphs. 4.2.1 Graph measurements (extracted in RCpp by James) The goal is to extract features that will discrimiate between writers within clusters. 1. Compactness measurements \\[\\sum_{Num.\\: Pixels}\\frac{d(pixel,centroid)^2}{Num.\\: Pixels -1}\\] While informative for comparing like-sized graphs, this measurement suffers from the inherit spacial dependence between pixels and (unfortunately) does not scale well for modelling. Figure 4.4: A visual of the ``compactness’’ calculation for graphs 2. Rotation angle measurements The first principal component for each graph, or “letter”, is calculated through an eigendecomposition of the covariance matrix. The first principal component enjoys the property of having two invariant directions, and so we take the vector that lies in the upper half plane. The rotation angle of the graph is defined as the angle between the vector (0,1), and the unit principal component vector on the upper half plane. The angle is measured in radians and is considered a feature of the graph defined on the interval (0,\\(\\pi\\)). Figure 4.5: Top: writing from one of Writer 95’s training documents. Bottom: the graphs from handwriter that correpsond to the writing, and the unit vector in the first pricipal direction. Red vectors are rotated by \\(\\pi\\) to lie in the upper half plane prior to calculation of the rotation angle from the positive x-axis. Figure 4.6: Data: All Cluster #29 graphs in Writer 95’s training documents. Left: A Nightingale Rose diagram displaying the rotation angles in 20 ‘petals’. A point for each observed rotation angle is plotted on the outermost ring of the diagram. Right: A traditional histogram of the rotation angles with 20 bins, a point for each observation is plotted on the x-axis. Figure 4.7: Top: writing from one of Writer 1’s training documents. Bottom: the graphs from handwriter that correpsond to the writing, and the unit vector in the first pricipal direction. Red vectors are rotated by \\(\\pi\\) to lie in the upper half plane prior to calculation of the rotation angle from the positive x-axis. Figure 4.8: Nightingale rose diagrams and traditional histograms for the rotation angles from Writer #1’s training documents in Clusters #29 (top) and #16 (bottom). 3. Loop measurements Figure 4.9: A few graphs with loops that come from the Writer 95 sample from Figure 4.5 (top). Figure 4.10: Distribution of loop ratios for Writer 95 across all training documents. Figure 4.11: Distribution of log loop ratios for Writers 1 and 95 across all training documents. 4.3 Statistical Analysis 4.3.1 Clustering Paper submitted to ASA Statistical Analysis and Data Mining. Rather than impose rigid grouping rules (the previously used ‘’adjacency grouping’’) we consider a more robust, dynamic \\(K-\\)means type clustering method that is focused on major glyph structural components. Clustering algorithms require: A distance measure. For us, a way to measure the discrepancy between glyphs. A measure of center. A glyph-like structure that is the exemplar representation of a group of glyphs. Glyph Distance Measure We begin by defining edge to edge distances. Edge to edge distances are subsequently combined for an overall glyph to glyph distance. Edge to edge distances: Consider the following single edge glyphs, \\(e_1\\) and \\(e_2\\). Make \\(3\\) edits to \\(e_1\\) to match \\(e_2\\). The combined magnitude of each edit make the edge distance. Figure 4.12: Two edges that are also glyphs, \\(e_1\\) and \\(e_2\\). Shift. Anchor to the nearest endpoint by shifting. Figure 4.13: Shift = 1.4. Stretch. Make the endpoints the same distance apart. Figure 4.14: Stretch = 9.9. Shape. Bend and twist the edge using \\(7\\) shape points. Shape points are ‘’matched’’ and the distance between them is averaged to obtain the shape contribution to the distance measure. Figure 4.15: Shape Components. Figure 4.16: Shape = 8.4. Combine the three measurements for a final edge to edge distance. D\\((e_1, e_2) = 1.4 + 9.9 + 8.4 = 19.7\\). For multi-edge glyphs get pairwise edge distances. Minimize total glyph distance using linear programming to match edges (sudoku). Down-weight edge distance contributions based on edge lengths. There are nuances associated with all of this. We must handle glyphs with differing number of edges, and consider the direction in which edges are compared (endpoint labels are arbitrary). All of this is addressed in detail in the paper. Measure of glyph centers Take the weighted average of endpoints, \\(7\\) shape points, and edge length. Figure 4.17: Weighted mean between two glyphs. p = weight on blue. The mean of a set can be iteratively calculated by properly weighting each newly introduced glyph. For stability, the \\(K-\\)means algorithm finds the glyph nearest the mean and uses that as measure of cluster center. \\(K-\\)means Algorithm for Glyphs Implement a standard \\(K-\\)means12 with handling of outlier observations.3 Begin with fixed \\(K\\) and a set of exemplars. Iterate between the following steps until cluster assignments do not change: Assign each glyph to the exemplar it is nearest to, with respect to the glyph distance measure. Calculate each cluster mean as defined. Find the exemplar nearest the cluster mean and use it as the new cluster center. Figure 4.18: One of \\(K=40\\) Clusters. Exemplar &amp; cluster members (left). Cluster mean (right). Use one document from each training writer to cluster and obtain a template. Make cluster assignments for the remaining documents by finding the template exemplar each glyph is nearest to. Below is an example of data that arises from the clustering method. Figure 4.19: Data arising from the cluster grouping method. Cluster #’s ordered by most to least populated. 4.3.1.1 Outliers During clustering, outliers are considered glyphs that are at least \\(T_o\\) distance units from cluster exemplars. The algorithm sets a ceiling \\(n_o\\) on the allowable number of outliers. Initially, we were going to ignore the outliers, but now they are considered the \\(K+1\\)th cluster and contribute information about writer. Figure 4.20: Cluster of outliers. 4.3.1.2 CVL + CSAFE + IAM Template Development Template development on: 1. CSAFE Handwriting Database, 25 documents. 2. Computer Vision Lab (CVL) Database, 25 documents. 3. IAM Handwriting Database, 50 documents. With the new template, we’ve made a few adjustments to the original algorithm and measurement tools: Starting values. Changes to the distance measurement to emphasize shape, and focus less on character size. \\(\\frac{1}{2}\\times\\) Stretch (straight line distance component, ~ size) 1 \\(\\times\\) Shift (nearest endpoint) 2 \\(\\times\\) Shape (ghost edge comparisons)\\(^2\\) A sample template is picture below. 27 CVL documents (6 unique), 73 CSAFE documents (2 unique) Currently working on 20+ algorithm runs with a variety of starting values to select final template. The final template. Figure 4.21: Exemplars for the first 20 most populated clusters (according to training data, later). The red lines are not plotting correctly.. Figure 4.22: Exemplars for the first 20 least populated clusters (according to training data, later). The red lines are not plotting correctly.. 4.3.2 Statistical Modeling Model #1, Straw Man Let, \\(\\boldsymbol{Y}_{w(d)} = \\{Y_{w(d),1}, \\dots, Y_{w(d),K}\\}\\) be the number of glyphs assigned to each cluster for document within writer, \\(w(d),\\) and \\(\\boldsymbol{\\pi}_w = \\{\\pi_{w,1}, \\dots, \\pi_{w,K} \\}\\) be the rate at which a writer emits glyphs to each cluster. Here, \\(K = 41\\), \\(d = 1,2,...,5\\), \\(w = 1,...,27\\). Then a hierarchical model for the data is \\[\\begin{array}{rl} \\mathbf{Y}_{w(d)}\\: &amp;\\stackrel{ind}{\\sim} \\:Multinomial(\\boldsymbol\\pi_{w}), \\\\ \\boldsymbol{\\pi}_w \\:&amp;\\stackrel{ind}{\\sim}\\: Dirichlet(\\boldsymbol{\\alpha}),\\\\ \\alpha_{1}, \\dots, \\alpha_{K}\\: &amp;\\stackrel{iid}{\\sim}\\: Gamma(2, \\:0.25). \\label{model_line3} \\end{array}\\] Posterior Predictive Analysis For a holdout document of unknown source, \\(w^*\\), Extract glyphs with and assign groups, \\(\\boldsymbol{Y}^*_{w^*}=\\{Y_{w^*,1}, ... Y_{w^*,K}\\}\\) Assess the posterior probability of writership under each known writer \\(\\boldsymbol\\pi_{w}\\) vectors. i.e. \\(p(w^* = w^\\prime|\\boldsymbol{Y^*}, \\boldsymbol{Y})\\) for each writer \\(w^\\prime\\) in the training data. The posterior probability that the questioned document \\(\\boldsymbol{Y}^*_{w^*}\\) belongs to writer \\(w^\\prime\\) with respect to the closed set is, \\[\\begin{array}{rl} p(w^* = w^\\prime|\\boldsymbol{Y}^*, \\boldsymbol{Y}) &amp; \\propto p(\\boldsymbol{Y}^*| w^* = w^\\prime, \\boldsymbol{Y}) p(w^*=w^\\prime | \\boldsymbol{Y})\\nonumber\\\\ &amp; \\propto p(\\boldsymbol{Y}^*| w^* = w^\\prime, \\boldsymbol{Y}) \\nonumber\\\\ &amp; = \\int p(\\boldsymbol{Y}^*| \\boldsymbol{\\pi}_{w^\\prime}) p(\\boldsymbol{\\pi}_{w^\\prime}| \\boldsymbol{Y}) d \\boldsymbol{\\pi}_{w^\\prime}\\nonumber\\\\ &amp; \\approx \\frac{1}{M} \\sum_{m=1}^M p(\\boldsymbol{Y}^*| \\boldsymbol{\\pi}^{(m)}_{w^\\prime}) , \\mbox{ where } \\boldsymbol{\\pi}^{(m)}_{w^\\prime} \\sim p(\\boldsymbol{\\pi}_{w^\\prime}|\\boldsymbol{Y}) \\nonumber \\end{array}\\] for MCMC iterations \\(m = 1, \\dots, M\\). Then, for a given iteration \\(m\\), \\[ p(\\boldsymbol{Y}^*| \\boldsymbol{\\pi}^{(m)}_{w^\\prime}) = p_{w^\\prime}^{(m)} = \\frac{Mult(\\boldsymbol{Y}^*; \\boldsymbol{\\pi}_{w^\\prime}^{(m)})}{\\sum_{w_i = 1}^{27}Mult(\\boldsymbol{Y}^*; \\boldsymbol{\\pi}_{w_i}^{(m)}) }. \\nonumber \\] Calculate the quantitity for each known writer \\(w^\\prime = w_1, \\dots, w_{27}\\) in training set to get \\[ \\boldsymbol{p}^{(m)} = \\{p_{w_1}^{(m)}, ..., p_{w_{27}}^{(m)}\\}, \\] and compute summaries over the MCMC draws, \\[ \\boldsymbol{\\bar{p}} = \\{\\bar{p}_{w_1},...,\\bar{p}_{w_{27}}\\}. \\] Results If we use a single holdout document for each writer (doc 4). The \\(\\boldsymbol{\\bar{p}}\\) vector as given above is shown graphically for each holdout document (the rows). Figure 4.23: Posterior predictive results. Rows are evaluated independently and the probability in each row sums to one. Log Loss = 0.2013 We can use a cross validation routine to estimate error. For each writer, shuffle the order of their body of documents. For the first fold we holdout the first document for testing, for the second fold we hold out the second document for testing, etc.. This yields 6 results analogous to that of the figure above. Figure 4.24: Posterior predictive results for each fold of the CV routine outlined above. Log Loss is clearly not a great summary of performance. Evaluating Over-/Under-dispersion (Writer Variability Index) With a count data model it is important to investigate the presence of over- and under-dispersion. An index of intra-writer variability with respect to a model. Multivariate Generalized Dispersion Index (GDI) of Kokonendji and Puig4. Relative Dispersion Index (RDI) = \\(\\frac{\\mbox{writer data GDI}}{\\mbox{model simulated GDI}}.\\) High RDI \\(\\implies\\) data over-dispersion and high sample to sample variability. Figure 4.25: RDIs for the 27 CVL writers under Model #1. High RDI \\(\\implies\\) data over-dispersion &amp; high sample to sample variability (in the sense of glyph cluster membership rates). Figure 4.26: Handwriting Samples from Writer #12. Notice the repeated patterns in letters ‘a’, ‘e’, ‘f’, ‘g’, ‘h’, ‘t’, etc. across samples. Figure 4.27: Handwriting Samples from Writer #23. Note the red ’h’s, green ’ll’s, purple terminal ’y’s, and blue ’loo’s Model #2, Mixture There seem to be greatly varying shapes in the relative frequency of cluster fill. We think maybe a more flexible Dirichlet distribution is warranted. Figure 4.28: Average relative frequency of cluster fill for the 8 most common clusters. Notice writers 12/21 and 6/17/18. Add flexibility to the original model by including a mixture component in the Dirichlet parameter space. \\[\\begin{array}{rl} \\mathbf{Y}_{w(d)} | \\boldsymbol\\pi_{w}, w\\: &amp;\\stackrel{ind}{\\sim} \\:Multinomial(\\boldsymbol\\pi_{w}), \\\\ \\boldsymbol{\\pi}_w|\\boldsymbol{\\alpha},\\boldsymbol{\\beta}, \\rho_w \\:&amp;\\stackrel{ind}{\\sim}\\:Dirichlet(\\rho_w \\: \\boldsymbol{\\alpha}+ (1-\\rho_w) \\: \\boldsymbol{\\beta}), \\\\ \\alpha_{k}, \\: \\beta_{k} \\: &amp;\\stackrel{iid}{\\sim}\\: Gamma(2, \\: 0.25) \\:\\: \\mbox{ for } k &gt; 3, \\\\ \\rho_w\\: &amp; \\stackrel{iid}{\\sim}\\: Beta(1,1) \\end{array}\\] Label Switchin Issues. The model is non-identifiabile. We need to either place constraints on the parameter space to exclude the possibility of a second mode apriori, or estimate the posterior in both modes and post-process for label reassignment after. This has been resolved (?) by placing constraints on the first three elements of \\(\\alpha\\) and \\(\\beta\\) with moderately informative priors. \\(\\mathbf{\\alpha_1 &lt; \\beta_1}\\), \\(\\quad\\) \\(\\alpha_1 \\sim Gamma(2, 0.25) \\:\\: \\&amp; \\:\\: \\beta_1 \\sim Gamma(4, 0.25)\\) \\(\\mathbf{\\alpha_2 &gt; \\beta_2}\\) , \\(\\quad\\) \\(\\alpha_2 \\sim Gamma(4, 0.25) \\:\\: \\&amp; \\:\\: \\beta_2 \\sim Gamma(1, 0.25)\\) \\(\\mathbf{\\alpha_3 &gt; \\beta_3}\\) , \\(\\quad\\) \\(\\alpha_3 \\sim Gamma(4, 0.25) \\:\\: \\&amp; \\:\\: \\beta_3 \\sim Gamma(1, 0.25)\\) Results The mixing component gives insights into writing style. Figure 4.29: Average ho_w value for each writer. Figure 4.30: Writing samples in a variety of styles based on the mixing parameter. From top to bottom, writer #’s 21, 4, 29, 20, 18. Evaluate the posterior probability of writership for each of the holdout documents. Figure 4.31: Posterior predictive results. Rows are evaluated independently and the probability in each row sums to one. Log Loss = 0.2078 4.3.2.1 Model #2, CSAFE + CVL (not most recent) Template The following analysis was done for the first 20 CSAFE writers. Training docs: s01_pLND_r01, s01_pLND_r03, s01_pWOZ_r02, s01_pPHR_r03 Testing doc: s01_pLND_r02 Figure 4.32: Average relative frequency of cluster fill for the 8 most common clusters. Posterior probability results. Figure 4.33: Posterior predictive results. Rows are evaluated independently and the probability in each row sums to one. Not surprising. Working on: More writers (need to go through handwriter) Testing on the phrase prompt Including not yet seen CVL writers in analysis. Model #3, Normal Slopes. Work in progress. Adding slope measurements into the model. Let, \\(\\boldsymbol{Y}_{w(d)} = \\{Y_{w(d),1}, \\dots, Y_{w(d),K}\\}\\) be the number of glyphs assigned to each group for document within writer, \\(w(d),\\) \\(\\boldsymbol{\\bar{S}}_{w(d)} = \\{\\bar{S}_{w(d),1}, \\dots, \\bar{S}_{w(d),K}\\}\\), be the average slope in each group for document \\(w(d)\\) \\(G_{w(d),j}\\) be the \\(j^{th}\\) glyph in document \\(w(d)\\), \\(g_{w(d), j} = 1, \\dots, 41\\) be the available cluster assignments for the \\(j^{th}\\) glyph in the document, \\(S_{w(d),j}\\) be the slope of the \\(j^{th}\\) glyph in the document. Here, \\(K = 41\\), \\(d = 1,2,...,5\\), \\(w = 1,...,27\\), \\(j= 1, \\dots,\\mathrm{J}_{w(d)}.\\) \\[ \\bar{S}_{w(d),k}= \\frac{1}{Y_{w(d),k}} \\sum_{j \\ni \\mathrm{I}[g_j = k]}S_{w(d),j} \\quad \\&amp; \\quad Y_{w(d),k} = \\sum_{j = 1}^{\\mathrm{J}_{w(d)}} \\mathrm{I}[g_j = k] \\] Then a hierarchical model for the data is \\[\\begin{array}{rl} \\mathbf{Y}_{w(d)} | \\boldsymbol\\pi_{w}, w\\: &amp;\\stackrel{ind}{\\sim} \\:Multinomial(\\boldsymbol\\pi_{w}), \\\\ \\boldsymbol{\\pi}_w|\\boldsymbol{\\alpha} \\:&amp;\\stackrel{ind}{\\sim}\\:Dirichlet(\\boldsymbol{\\alpha}), \\\\ \\alpha_k\\: &amp;\\stackrel{iid}{\\sim}\\: Gamma(a = 2, \\: b= 0.25), \\\\ \\bar{S}_{w(d),k} | Y_{w(d),k}, w, \\mu_{w, k}, \\sigma^2_{k} \\: &amp; \\stackrel{iid}{\\sim}\\: N \\left(\\mu_{w, k}, \\frac{\\sigma^2_{k}}{Y_{w(d),k}}\\right) \\\\ \\mu_{w, k} | \\mu_{k} \\: &amp; \\stackrel{iid}{\\sim}\\: N(\\mu_{k}, 3) \\\\ \\mu_{k} \\: &amp; \\stackrel{iid}{\\sim}\\: N(0, 3) \\\\ 1/\\sigma^2_{k}\\: &amp; \\stackrel{iid}{\\sim}\\: Gamma(0.5, 0.1) \\end{array}\\] Consider a new document with cluster fill counts \\(\\boldsymbol{Y}^*\\) and average slope measurements \\(\\boldsymbol{\\bar{S}}^*\\) from unknown writer \\(w^*\\). Posterior Predictive Analysis Posterior probability that the questioned document belongs to writer \\(w^\\prime\\) with respect to the closed set is: \\begin{array}{rl} &amp;p(w^* = w|* ^, ) \\ &amp;p(^ | w^* = w^, ) \\ &amp; _{m=1}^{M} Mult(^*; _{w}{(m)}) \\end{array} for MCMC samples \\(m = 1, \\dots, M\\). Results Evaluate the posterior probability of writership for each of the holdout documents. Figure 4.34: Posterior predictive results. Rows are evaluated independently and the probability in each row sums to one. Log Loss = 0.0883. Modeling Summary Model Data LogLoss #1 Adjacency Grouping (not presented) 0.5413 #1 Cluster Grouping 0.2013 #2 Cluster Grouping 0.2078 #3 Cluster Grouping &amp; Glyph Slopes 0.0883 4.3.2.2 Modeling update (Feb 17) 90 writers, Session #1 Train: 3 London Letters A few writers only had 2 (working on this) Test: 1 Wizard of Oz Recall rotation angle measurements: Figure 4.35: Data: All Cluster #29 graphs in Writer 95’s training documents. Left: A Nightingale Rose diagram displaying the rotation angles in 20 ‘petals’. A point for each observed rotation angle is plotted on the outermost ring of the diagram. Right: A traditional histogram of the rotation angles with 20 bins, a point for each observation is plotted on the x-axis. A NAIVE Model for Rotation Angles Naively we can treat the rotation angle values as if they are linear on the interval (0,\\(\\pi\\)). This is of course not the case, since a value of 0 is extremely similar to a value of \\(\\pi\\), both corresponding to letters that do not lean a great deal to the left or right, and are wider than they are tall. This can be seen in Figure 2, where the unimodal density ends abuptly at zero and “wraps around” in the higher values near \\(\\pi\\). Nonetheless, we can specify a disribution on the linear, or unwrapped, rotation angles as follows: \\[\\begin{align} \\nonumber \\mathbf{Y}_{w(d)} | \\boldsymbol\\pi_{w}, w \\: &amp;\\stackrel{ind}{\\sim} \\:Multinomial(\\boldsymbol\\pi_{w}), \\\\ \\nonumber \\boldsymbol{\\pi}_w|\\boldsymbol{\\gamma} \\: &amp;\\stackrel{ind}{\\sim}\\:Dirichlet(\\boldsymbol{\\gamma}), \\\\ \\nonumber \\gamma_k\\: &amp;\\stackrel{iid}{\\sim}\\: Gamma(a = 2, \\: b= 0.25), \\\\ \\nonumber &amp; \\quad \\\\ \\nonumber SRA_{w,k} | w,k \\: &amp; \\stackrel{iid}{\\sim}\\: Beta \\left( \\alpha_{w,k}, \\beta_{w,k} \\right) \\\\ \\nonumber &amp; \\quad \\\\ \\nonumber \\mu_{w,k} &amp;= \\frac{\\alpha_{w,k}}{\\alpha_{w,k}+\\beta_{w,k}} \\: \\sim Beta(2,2) \\\\ \\nonumber variance_{w,k} &amp;= \\frac{\\mu_{w,k}(1 - \\mu_{w,k})}{\\alpha_{w,k} + \\beta_{w,k} + 1} = \\frac{\\mu_{w,k}(1 - \\mu_{w,k})}{\\kappa_{w,k}+1} \\\\ \\nonumber \\kappa_{w,k} &amp;= \\alpha_{w,k} + \\beta_{w,k} \\: \\sim Gamma(shape = 0.1, rate = 1) \\end{align}\\] Where \\(SRA_{w,k,i}, \\: \\:i = 1, \\dots, n_{w,k}\\), are rotation angles from cluster \\(k\\), and writer \\(w\\), scaled to the beta density support of (0,1). For a given writer and cluster, \\(\\mu_{w,k}\\) is the mean of the data distribution, expressed as a functions of \\(\\alpha_{w,k}\\) and \\(\\beta_{w,k}\\). We place a weak prior, \\(Beta(2,2)\\), on all \\(\\mu_{w,k}\\). Similarly, \\(\\kappa_{w,k}\\) is expressed as a function of \\(\\alpha_{w,k}\\) and \\(\\beta_{w,k}\\) and is a sort of “sample size”, or “precision” parameter. Notice that \\(\\kappa_{w,k}+1\\propto\\frac{1}{variance_{w,k}}\\). Figure 4.36: Writer 95, Cluster 29. A plot depicting elements of the data model \\(SRA_{w,k} \\: \\sim \\: Beta ( \\alpha_{w,k}, \\beta_{w,k})\\). Top: values of \\(\\alpha^{(m)}_{95,29}\\) and \\(\\beta^{(m)}_{95,29}\\) for \\(m = 1, \\dots,12\\) iterations taken from the middle of the chain and used to plot the \\(12\\) correpsonding beta densities. Bottom: the unscaled rotation angles (unscaled \\(SRA_{w,k}\\)), serving as data for the parameter estimation. For a different writer who does not tend to lean one way or another… Figure 4.37: Nightingale rose diagrams and traditional histograms for the rotation angles from Writer #1’s training documents in Clusters #29 (top) and #16 (bottom). And we can look at a handful of beta distributions that arise from \\(w=1\\) and \\(k=16\\)… Figure 4.38: Writer 1, Cluster 16. A plot depicting elements of the data model \\(SRA_{w,k} \\: \\sim \\: Beta ( \\alpha_{w,k}, \\beta_{w,k})\\). Top: values of \\(\\alpha^{(m)}_{1,16}\\) and \\(\\beta^{(m)}_{1,16}\\) for \\(m = 1, \\dots,12\\) iterations taken from the middle of the chain and used to plot the \\(12\\) correpsonding beta densities. Bottom: the unscaled rotation angles (unscaled \\(SRA_{w,k}\\)), serving as data for the parameter estimation. Why am I showing you histograms and MCMC samples from clusters #29 and #16?? Becasue these are great examples of where the problems occur with the naive approach to modeling the “unwrapped” angles. Figure 4.39: Cluster members in grey, and cluster exemplars in red (plotting is a few pixels shifted left) for clusters \\(\\#29\\) (left), and \\(\\#26\\) (right) These are clusters that tend to hold the letters \\(n\\) and \\(u\\) and thus, are generally wider than they are tall. When a writer emits one of these nearly straight up and down, but slightly right leaning, the rotation angle will be just above zero. If the graph is very slightly left leaning, then the rotation angle will be just under \\(\\pi\\). While the beta distribution can take on a \\(U\\)-shape (like the Writer 1, Cluster 16 data in Figure 4), this is still undesirable, becuase we want to express the fact that values near \\(0\\) and \\(\\pi\\) are actually very similar. For example, a mean near \\(\\pi/2\\) does not do a good job of expressing the center of those rotation angles, and a traditional “unwrapped” variance will overstate the variability in data that is actually quite similar. Consider the following distribution of cluster #16 rotation angles from writer #85’s questioned document. The largest observation is 3.129, which scales to 0.996, the next largest is 3.024, which scales to 0.963. These are going to accumulate a huge amount of likelihood when evaluated under the beta parameters for Writer #1, displayed in Figure 6. The rest of the rotation angles are relatively spread out over the \\(x\\)-axis, and not necessarily reflective of the Writer #1 distribution in Cluster #16. Figure 4.40: Questioned Document. Writer #85. Cluster #16. QD evaluation under beta distributed rotation angles using \\(k=1,\\dots,20\\), the \\(20\\) most populated clusters. Notice the probability for questioned writer #85 that is assigned to known writer #1. This error is explained by the behavior depicted above. Not all off-diagonal probability assignment can be attributed to similar behavior, but much of it can. Figure 4.41: Posterior predictive evaluation of QDs under beta distributed rotation angles. A Wrapped Model for Rotation Angles A more appropriate approach to the problem is to consider the rotation angles in the polar coordinate system and treat them as spanning the full circle. So we map the upper half plane values to \\((0,2\\pi)\\), where values above the \\(x-\\)axis indicate a right leaning graph and below the \\(x-\\)axis indicate left leaning graphs. Graphs that are relatively straight up and down will have values near \\(0/2\\pi\\) if they are wider than they are tall, and near \\(\\pi\\) if they are taller than they are wide. Figure 4.42: Writer 1, Cluster 16. Left: linear consideration of the rotation angles. Right: wrapped rotation angles on the full circle. Figure 4.43: Two candidate distributions defined on circular data, both specified at MLE parameter values calculated from the data. We consider two distributions that are appropriate for circular data. First, the von Mises distribution is a close approximation to the wrapped normal distribution, which is the circular analouge of the normal. This is the “go-to” unimodal wrapped distribution, like the normal is the traditional “go-to” unimodal distribution. It is specified through the mean, \\(\\mu\\), and concentration, \\(\\kappa\\) (\\(\\frac{1}{\\kappa}\\) analogous to \\(\\sigma^2\\)). The second is the wrapped Cauchy distribution, which is the wrapped version of the Caucy distribution. Similar to the traditional Cauchy, this distribution is symmetric, unimodel, and specified by a location parameter, \\(\\mu\\), and concentration parameter, \\(\\rho\\). This distribution is also heavy-tailed in the sense that it will place more density on the “back” of the circle opposite the peak of the distribution. Now, consider \\[\\begin{align} \\nonumber \\mathbf{Y}_{w(d)} | \\boldsymbol\\pi_{w}, w \\: &amp;\\stackrel{ind}{\\sim} \\:Multinomial(\\boldsymbol\\pi_{w}), \\\\ \\nonumber \\boldsymbol{\\pi}_w|\\boldsymbol{\\gamma} \\: &amp;\\stackrel{ind}{\\sim}\\:Dirichlet(\\boldsymbol{\\gamma}), \\\\ \\nonumber \\gamma_k\\: &amp;\\stackrel{iid}{\\sim}\\: Gamma(a = 2, \\: b= 0.25), \\\\ \\nonumber &amp; \\quad \\\\ \\nonumber RA_{w,k} | w,k \\: &amp; \\stackrel{iid}{\\sim}\\: Wrapped \\: Cauchy \\left( \\mu_{w,k}, \\phi_{w,k} \\right) \\\\ \\nonumber \\mu_{w,k} &amp;\\sim Uniform(0,2\\pi) \\\\ \\nonumber \\phi{w,k} &amp;\\sim Uniform(0,1) \\\\ \\nonumber \\end{align}\\] Where \\(RA_{w,k,i}, \\: \\:i = 1, \\dots, n_{w,k}\\), are rotation angles from cluster \\(k\\), and writer \\(w\\), on the full circle \\((0,2\\pi)\\). For a given writer and cluster, \\(\\mu_{w,k}\\) and \\(\\phi_{w,k}\\) are the location and concentration parameters, respectively. We place non-informative uniform priors on each. Again, there is no borrowing set up in the model for rotation angles. Each writer/cluster combination gets its own estimated rotation angle distribution. QD evaluation under wrapped Cauchy distributed rotation angles, using \\(k=1,\\dots,20\\), the \\(20\\) most populated clusters. Notice the probability for questioned writer #85 that was previously assigned to known writer #1 is no longer an issue. Figure 4.44: Posterior predictive evaluation of QDs under wrapped Cauchy distributed rotation angles. 4.3.3 Interesting documents 4.3.3.1 Where do we miss? We tend to do worse on writers who only had 2 training documents. Writers 32 and 133. Figure 4.45: All 40 documents, wrapped cauchy rotation angles, where do we miss? Samples: Writer 32 Test Figure 4.46: Writer 32 Test Writer 133 Train Figure 4.47: Writer 133 Train 4.3.3.2 Writer 4 Data London Letter #1 Figure 4.48: Writer 4 data. London Letter #2 Figure 4.49: Writer 4 data. London Letter #3 Figure 4.50: Writer 4 data. 4.3.3.3 You all! Figure 4.51: CSAFE writers. Wolfgang Figure 4.52: A training sample from Wolfgang. Soyoung Figure 4.53: A training sample from Soyoung. Other writer Figure 4.54: A training sample from the other writer with off-diagonal assignment for Wolfgang. 4.4 Communication of Results Presenting author is in bold. 4.4.1 Papers “A Clustering Method for Graphical Handwriting Components and Statistical Writership Analysis” Authors: Nick Berry and Amy Crawford Submitted to The Annals of Applied Statistics in September 2019. “A Database of Handwriting Samples for Applications in Forensic Statistics” Authors: Anyesha Rey, Amy Crawford, and Alicia Carriquiry Submitted to Data in Brief in October 2019. “Bayesian Hierarchical Modeling for Forensic Handwriting Analysis” Authors: Amy Crawford, Alicia Carriquiry, and Danica Ommen In preparation for submission to PNAS. 4.4.2 Talks “Statistical Analysis of Handwriting for Writer Identification” August 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry, Danica Ommen American Society of Questioned Document Examiners (ASQDE) Annual Meeting in Cary, NC. “A Bayesian Hierarchical Mixture Model with Applications in Forensic Handwriting Analysis” July 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry Danica Ommen Joint Statistical Meetings (JSM) in Denver, CO. “Forensic Analysis of Handwriting” July 2019 Authors: Alicia Carriquiry, Amy Crawford, Nick Berry, Danica Ommen VI Latin American Meeting on Bayesian Statistics (VI COBAL), Lima, Peru. “Exploratory Analysis of Handwriting Features: Investigating Numeric Measurements of Writing” February 2019 Authors: Amy Crawford, Nick Berry, Alicia Carriquiry, Danica Ommen American Academy of Forensic Sciences (AAFS) Annual Meeting in Baltimore, MD. “Toward a Statistical and Algorithmic Approach to Forensic Handwriting Comparison” August 2018 Authors: Amy Crawford and Alicia Carriquiry American Society of Questioned Document Examiners (ASQDE) Annual Meeting in Park City, UT. “A Bayesian Approach to Forensic Handwriting Evidence” July 2018 Authors: Amy Crawford and Alicia Carriquiry Joint Statistical Meetings (JSM) in Vancouver, BC, Canada. “Bringing Statistical Foundations to Forensic Handwriting Analysis” May 2018 Authors: Amy Crawford and Alicia Carriquiry American Bar Association, 9th Annual Prescription for Criminal Justice Forensics Program in New York, NY. 4.4.3 Posters “A Bayesian Hierarchical Model for Forensic Writer Identification” September 2019 Authors: Amy Crawford, Alicia Carriquiry, Danica Ommen 10th International Workshop on Statistics and Simulation in Salzburg, Austria 1st Springer Poster Award Click for Poster Image “Statistical Analysis of Handwriting” May 2019 Authors: Amy Crawford and Nick Berry CSAFE Annual All-Hands Meeting in Ames, IA “Statistical Analysis of Letter Importance for Document Examination” February 2018 Authors: Amy Crawford and Alicia Carriquiry American Academy of Forensic Sciences in Seattle, WA YFSF Best Poster Award (Presented AAFS 2018 Poster for a Second Time) May 2018 Authors: Amy Crawford and Alicia Carriquiry CSAFE Annual All-Hands Meeting in Ames, IA 4.5 People involved 4.5.1 Faculty Alicia Carriquiry Hal Stern (UCI, Project G PI) Danica Ommen 4.5.2 Graduate Students Amy Crawford 4.5.3 Undergraduates Anyesha Ray (data collection) James Taylor (feature extraction) Forgy, E. (1965). Cluster Analysis of Multivariate Data: Efficiency vs. Interpretability of Classifications. Biometrics, 21:768–780.↩ Lloyd, S. (1982). Least Squares Quantization in PCM. IEEE Trans. on Information Theory, 28(2):129–137.↩ Gan, G. and Ng, M. K.-P. (2017). K-means clustering with outlier removal. Pattern Recog. Letters, 90:8–14.↩ Kokonendji, C. C. and Puig, P. (2018). Fisher Dispersion Index for Multivariate Count Distributions. Journal of Multivariate Analysis, v165 p180-193.↩ "],
["glass.html", "Chapter 5 Glass 5.1 Data collection 5.2 The ASTM standard method 5.3 Learning algorithms to evaluate forensic glass evidence 5.4 Evaluation and comparison of methods for forensic glass source conclusions", " Chapter 5 Glass 5.1 Data collection Since 2016, it has started to collect the float glass panes from two glass industries in the U.S. Glass panes were consecutively manufactured. We could construct the challenging comparisons. The elemental chemical concentrations were measured by LA-ICP-MS by the help from Univ. of Iowa. Each pane was broken to several fragments. Then we pick 24 fragments randomly. Each fragment was measured 5 times for 21 fragments and measured 20 times for 3 fragments. Using the data, we construct mates and non-mates. 5.2 The ASTM standard method ASTM-E2330-12 (2012) and ASTM-E2927-16 (2016) detail the steps recommended to carry out forensic glass comparisons. At a minimum, the standard approach calls for three fragments from the source at the crime scene (\\(n_{K} \\geq 3\\)), each measured at least three times (\\(M_K \\geq 3\\)), and one fragment, also measured three times, recovered from the suspect (\\(n_Q = 1, M_Q \\geq 3\\)). Using those measurements: Calculate the mean concentration for each element \\(i = 1, \\dots, p\\) from the known fragments, denoted \\(\\bar{y}_{Ki\\cdot\\cdot}\\). Also record 3% of the mean, \\(0.03\\cdot \\bar{y}_{Ki\\cdot\\cdot}\\). Calculate the standard deviation of each elemental concentration from the known fragments. Denote this value by \\(\\sigma_{Ki}\\). Compute an interval for each \\(i\\): \\(\\bar{y}_{Ki\\cdot\\cdot}\\) \\(\\pm\\) 4 \\(\\times\\) \\(\\max(\\sigma_{Ki}, 0.03\\cdot \\bar{y}_{Ki\\cdot\\cdot})\\). This is also known as the \\(4\\sigma\\) interval in the literature (cf.~Weis et al. (2011)). Calculate the mean concentration of each element \\(i = 1, \\dots, p\\) in the questioned fragment(s), denoted \\(\\bar{y}_{Qi\\cdot\\cdot}\\). Compare the value \\(\\bar{y}_{Qi\\cdot\\cdot}\\) to the \\(4\\sigma\\) interval from Step 3: if \\(\\bar{y}_{Qi\\cdot\\cdot} \\notin (\\bar{y}_{Ki\\cdot\\cdot} \\pm 4 \\times \\max(\\sigma_{Ki}, 0.03\\cdot \\bar{y}_{Ki\\cdot\\cdot}))\\) for one or more values of \\(i\\), the glass sources for two groups \\(G_K\\) and \\(G_Q\\) are distinguishable. Otherwise, they are indistinguishable. This means that if any single element mean value from the questioned source does not fall in the \\(4\\sigma\\) interval, the glass sources are declared distinguishable, otherwise they are declared indistinguishable. 5.3 Learning algorithms to evaluate forensic glass evidence by Soyoung Park &amp; Alicia Carriquiry, published in The Annals of Applied Statistics in 2019.06. Take the pariwise differences of 18 element values between two fragments which assigned to classes of mates and non-mates. Developed the scoring metric using several machine learning algorithm and the existing methods, including the ASTM standard. We proposed expressing the criterion suggested by the ASTM standard as a , representing the degree of similarity between \\(G_K\\) and \\(G_Q\\). Mathematically, this score is computed as: \\[\\begin{eqnarray} S_{ASTM,i}&amp;=&amp;\\left|\\frac{\\bar{y}_{Ki\\cdot\\cdot}-\\bar{y}_{Qi\\cdot\\cdot}}{\\max(\\sigma_{Ki}, 0.03\\cdot \\bar{y}_{Ki\\cdot\\cdot} )}\\right| \\label{eq:scorestad1} \\\\ S_{ASTM}&amp;=&amp;\\max(S_{ASTM,i}) \\label{eq:scorestad2} \\end{eqnarray}\\] where \\(i \\in \\{1, 2, \\dots 18\\}\\) indexes element. The maximum (\\(S_{ASTM}\\)) across all element-wise scores (\\(S_{ASTM,i}\\)) becomes the final score to determine if fragments from the pane \\(K\\) and the pane \\(Q\\) have a common source. If \\(S_{ASTM} &gt; 4\\), then the two groups of fragments, \\(G_K\\) and \\(G_Q\\) from panes \\(K\\) and \\(Q\\) are declared to be distinguishable. Test the source prediction performance among the RF, BART, ASTM, hotelling T^2 shrinkage and more.. Density plots by the RF and the ASTM 5.4 Evaluation and comparison of methods for forensic glass source conclusions by Soyoung Park &amp; Sam Tyner, accepted for publication in Forensic Science International in 2019. Understanding the ASTM method Comparison of the RF method and the ASTM method on source conclusion. Depart the ASTM criteria into five pieces: \\[\\begin{eqnarray} S_{ASTM,i}&amp;=&amp;\\left|\\frac{\\bar{y}_{Ki\\cdot\\cdot}-\\bar{y}_{Qi\\cdot\\cdot}}{\\max(\\sigma_{Ki}, 0.03\\cdot \\bar{y}_{Ki\\cdot\\cdot} )}\\right| \\\\ S_{ASTM}&amp;=&amp;\\max(S_{ASTM,i}) \\end{eqnarray}\\] The absolute difference in mean of two fragments Standard Deviation or 3% Known Mean? Deciding Element Decision Threshold Method AUC-ROC EER OT FPR(OT) FNR(OT) RF 0.965 0.098 0.522 0.142 0.045 ASTM 0.936 0.137 2.870 0.140 0.133 Number of Known Fragments Stressing test "],
["shoes.html", "Chapter 6 Shoes 6.1 Longitudinal Shoe Study 6.2 Passive Shoe Recognition 6.3 Maximum Clique Matching 6.4 Project Tread (formerly Cocoa Powder Citizen Science) 6.5 3d Shoe Recognition 6.6 Shoe outsole matching using image descriptors", " Chapter 6 Shoes 6.1 Longitudinal Shoe Study Github repository 6.1.1 Paper describing the database Paper subdirectory of Github repository Goal: Describe experiment Describe database function Publicize data for analysis by others in the community Accompanied by Figshare upload of static data sets (grouped by type). Data Analysis Tools Working with the EBImage package - very fast processing of images ShoeScrubR package Cleaning methods for the Longitudinal data are contained in the ShoeScrubR package. The package includes (as of 2019-10-17) a complete set of tests to guard against regressions (100% test coverage!) and uses continuous integration to ensure that the installation process is also monitored. The ShoeScrubR package also includes logging of all image-in image-out operations using attributes - each time a transformation is performed, the transformation and the parameters are appended to the running operations log. This should make it possible to track the provenance of an object through the set of transformations (and potentially un-do them in some cases). Film and Powder Images The images are challenging to do basic statistical analysis on because the shoe print is made up of tiny particles (e.g. it is not a solid object), and there are areas of smudged particles outside the image (fingerprints, etc.) that can be hard to automatically remove. In addition, the film backing has subtle variations in color. The prints are not rotationally aligned, that is, they are taken at a variety of angles (usually \\(\\pm 15^\\circ\\) from vertical) which vary due to individual differences in walking style, the orientation of the film, and changes in experimental protocol. Experimental protocol changes included resolution changes for the scans over time: the resolution of the last set of images is about 2 times higher than the resolution of the first 3 check-ins worth of images. Thus, parameters need to be automatically selected based on the resolution of the image. The initial use of templates to clean up the image requires addressing the alignment of the print and the template. As this experiment contains 8 total shoe model and size combinations, it is possible to create a template for each shoe model and use that template to isolate the region of the image which contains a set of features most likely to be a shoe (rather than random noise). Solving the template problem by aligning the mask and template yields an additional benefit: the resulting cleaned up image is roughly aligned relative to the template and, presumably, to other images. Rough Alignment of Template Mask and Image: Clean images, do a rough alignment between the image and the corresponding shoe mask (per model and size). Rotationally align image and mask using principal components on the non-background pixels in the image Gross align the non-background pixels in the image and mask Use a “mask-ified” version of the shoe print that encloses most of the shoe region in a single region (see below for explanation) Default to trimming the actual print by 5% on each dimension to minimize the effect of page borders and creases Alignment method options: center of mass - this fails if a print does not account for the whole shoe center of narrowest width - ideally, this is approximately the arch of the shoe. This works better than center of mass in most cases, but occasionally computation fails because it relies on finding a local minimum near the center of the image; if the derivative calculation fails, the algorithm falls back to the center of narrowest width. Pad the image and mask so that the centers are aligned and the image and mask are the same size Set any pixels outside the mask to background Before: After: These steps are wrapped into the rough_align function in the ShoeScrubR package. Cleaning the image and exaggerating into a mask In several of the methods applied to this data, it has been useful to have an exaggerated version of the image to function as a mask - this exaggerated image has a center of mass similar to the actual mask, for instance. Creating this mask requires parameter tuning (done the old way); a new method was developed in order to reduce the number of parameters which depended on image resolution and other similar items. In the old method, there were several parameters necessary - gaussian blur diameter for image cleaning, threshold for binarization, gaussian blur diameter for mask creation, threshold for image cleaning, diameter for opening the mask, diameter for closing the mask. The new steps are as follows: Use the EM algorithm to cluster the intensities of the points into three normally distributed categories: signal, intermediate, and background. The normality assumption is highly questionable, but the method works pretty well. Use the calculated pdf values for each point to construct a likelihood ratio of P(signal)/P(intermediate + background). Binarize based on the value of this likelihood ratio - if it’s over 10, the pixel is signal. Each shoe is shown in three separate images, corresponding to the pdf value for each point based on the EM algorithm clustering distribution fitted values. White pixels are highly likely to belong to the group in question - signal, intermediate, and noise. Binarized versions of each shoe The binarized image from the EM algorithm is cleaned slightly using parameters that should be robust to different ppi images (diameters &lt; 10 pixels) - this gets rid of speckling induced by the EM segmentation. Initial cleaning - dilation and erosion at very small pixel values Labeling disjoint regions (different colors indicate different regions) Removing any blobs which are in the 50px square corner region and which do not involve more than 10% of the image. At this point we can use the mask to clean the image: The binarized image is exaggerated using parameters which depend only on the size of the image. In general, size \\(s\\) here is the square root of the number of pixels in the image, that is, the side length of the image if it were square. A gaussian blur is applied to the image (diameter \\(s\\)/50) Any pixel intensity less than the median is determined to be shoe All disjoint regions are labeled The largest region is selected as the best mask for the shoe Some cleaning is done to this mask - any holes are filled in and then it is opened by a diameter of approximately \\(s\\)/5 (must be odd) At this point we can use the mask to get a “clean” image: And proceed with the alignment as normal: Aligning each image to the template corresponding to the shoe model and size provides a good first step towards aligning the images to one another, but additional work is necessary in order to ensure that we can compare two images from the same shoe (or two images from different shoes). Fine Alignment of two images using RNiftyReg The RNiftyReg package is intended for alignment of brain scans and other MRI data and uses a symmetric block-matching approach(Modat et al. 2014). It only allows for registration of images up to 2048x2048, though, which means we will have to align images at a lower resolution and then modify the transformation matrix accordingly. One definite positive feature is that it allows for provision of a mask for both the source and target images so that only pixels within the mask are used for alignment. Affine transformations are a type of image transformation that encompasses translation, resizing, rotation, and skew operations. Affine transformations preserve collinearity and ratios of distances: parallel lines remain parallel after the transformation. A subset of affine transformations are so-called “rigid body” transformations, which only allow translation and rotation. RNiftyReg allows for linear (rigid-body, affine), and nonlinear transformations, but for the moment, we are only interested in rigid-body transformations - while the shoes may have some slight distortion due to the wearer and kinematics of walking, this is minor and should not interfere too greatly with a gross alignment. RNiftyReg’s niftyreg.linear function returns a 4x4 transformation matrix describing the composition of multiple image transformation operations. A 3x3 matrix is necessary for 3-dimensional image rotation, resizing, and skew operations; it is then augmented by a row of zeros on the bottom and a column ending with a 1 that describes the x, y, and z translation coordinates. In this way, a 4x4 matrix can represent the composition of all relevant image transformation operations in 3 dimensions. In two dimensions, many of the cells in this matrix are 0. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Cells 1, 2, 5, 6 describe the rotation operation; the angle of rotation can be recovered using trigonometry. Cells 4, 8 describe the translation operation, e.g. the row (4) and column(8) offset from one matrix to another. For 2D rigid transformations, these are the only cells which matter. Cells 11 and 16 are 1, and 3, 7, 9, 10, 12, 13, 14, 15 are all 0 under these constraints. In order to use RNiftyReg for registration of the original-size images, we have to scale cells 4 and 8, but the rest of the cells remain unscaled. Note that EBImage uses what is essentially the transposed version of the matrix used by RNiftyReg, reduced to elements 1, 2, 5, 6, 4, 8 in a 3 row by 2 column matrix. 1 5 2 6 4 8 Starting with a set of 6 shoes observed at 3 timepoints each, with 2 different “modes” of print capture, we can align both prints taken on the same date for each shoe. The original images: (1 and 2 are taken at the same time point, 3 and 4, etc. 1-6 are the same physical shoe over time and so on) The images are first aligned to masks, which are used to clean the images to reduce noise. Then reduced-size versions of each image pair are aligned, producing a transformation matrix: 0.9999730 -0.0073485 0 30.48815 0.0073485 0.9999730 0 -10.16105 0.0000000 0.0000000 1 0.00000 0.0000000 0.0000000 0 1.00000 (this is one example) The coordinates in bold have been scaled according to the size reduction, so that they can be applied to the full-size images. The resulting aligned images are shown above; black pixels are areas where both images agree; pink and blue pixels represent areas found in one image but not the other. Some images which have many bubbles (air between the film and backing) or which contain blurred or double prints do not align accurately; this is really not avoidable with automatic alignment solutions. The alignment process itself (without any image preprocessing) is extremely fast, about 1s per image pair, and seems to be similar even when image size is increased by a factor of 16. Due to the scaling process and necessary modification of the transformation matrix, the alignments may be off by 1-5 pixels in some cases. This might be handled by aligning a smaller subset of the image at full resolution. Efforts to align sub-images produced less accurate alignments, likely due to the kinematic distortion of the sole during the walking process, resulting in situations where the local alignment estimate is not a good estimate of the global alignment. New attempts to find consensus alignment might include keypoint-based alignment methods, trying to identify the shoe border precisely to align that, and possibly use of Hough transforms to identify specific reproducible features that might serve as global keypoints. Given how well RNiftyReg works, the next question is whether all of the preprocessing is even necessary. In the image below, the first row is alignment with the full image, the second is alignment with a binarized version of the output image (so masked + thresholded), and the third is automatically cropped around the mask which is aligned to the image using the rough-align process. The third row maintains most of the information and produces better alignments than the other rows; thus, we can conclude that it’s necessary to combine the preprocessing and rough alignment in order to get the best results from RNiftyReg. Fine Alignment of two images using FFT Basic Process: Pad images so they’re the same size (Let’s say that \\(A\\) and \\(B\\) are the two images) Downweight the edges of the images using a Hann function This is necessary because Fourier transforms assume images go on forever, so abrupt changes (e.g. edges) don’t work out that well. Computationally, the image is “wrapped” around itself to be considered “infinite”. The strength of the Hann function can be adjusted by a power argument Use the Fast Fourier Transform on each image. Center the FFT’d images so that low frequencies are in the center (exchange top left quadrant with bottom right, and top right quadrant with bottom left). Call the FFT’d, centered images \\(F(A)\\) and \\(F(B)\\) Recover the angle between the two images: In Fourier space, a rotated image produces the same signal in Fourier space, but rotated. To recover this information, we can use the magnitude of the FFT’d images as a new image. Call these images \\(|F(A)|\\) and \\(|F(B)|\\). Then, Polar transform the image, so that a rotation of the original image is a linear shift of the transformed image (\\(P(|F(A)|)\\) and \\(P(|F(B)|)\\)). Apply Hann functions to the polar-transformed images. b. Use FFT-based alignment (see steps 3, 5) to pick out the $\\theta, \\rho$ which best align the two polar images c. Discard $\\rho$ and keep $\\theta$. Transform the original image (not the FFT&#39;d image) to get $\\tilde{B}_\\theta$ and recompute the FFT on the rotated image ($F(\\tilde{B}_\\theta)$). Recover the shift between the two images: Compute the cross-power spectrum: \\(S = F(A) \\times F(\\tilde{B}_\\theta)*\\), where \\(F(x)*\\) is the complex conjugate of \\(F(x)\\) (e.g. \\(a + bi\\) becomes \\(a - bi\\)) Compute the magnitude of the cross-power spectrum: \\(|S| = \\sqrt{S \\times S*}\\) Use (a) and (b) to get the normalized cross power spectrum: \\(S/|S|\\) Take the inverse FFT of \\(S/|S|\\): \\(A = F^{-1}(S/|S|)\\) Find the maximum of the \\(A\\) matrix. The row and column where the maximum is found are the shift to align the two images: \\((\\Delta x, \\Delta y)\\). Apply the shift to image \\(\\tilde{B}_\\theta\\) to get \\(\\tilde{B}_{\\theta,\\Delta x, \\Delta y}\\). There are some fiddly details (e.g. converting shifts which are most of the image into negative shifts), but FFT-based alignment works pretty well (and pretty quickly) for shoes. Original Images: Angle-aligned Images: FFT-Aligned Result: (still working out the kinks) Combining information from multiple images With aligned images, we can then combine the information in each of the two prints taken at the same timepoint to get more reliable images. Because the methodology for acquiring the prints changed from timepoint to timepoint, the analysis of each type of print doesn’t make sense - it is completely conflated with the observation date. However, the multiple prints aren’t wasted, because while each print may be missing information, the combination of both of the prints (when properly aligned) provides a much more reliable assessment of the shoe (and the wear of that shoe at the proper timepoint). There are at least 3 options to combine these images (note that white = 1, black = 0): Take the pixel-by-pixel minimum: this keeps all the noise from both images (but there’s relatively little noise in the cropped images, so that may not matter too much). If images are misaligned, this results in a “double” print (or smeared print). This method is also sensitive to the lightness of the print - a complete print would still be ignored if the “dark” part of the print was lighter than the “light” part of the second print. Take the pixel-by-pixel maximum: this keeps only points which appear strongly in both images (losing a lot of data but also a lot of noise in the process) Take the pixel-by-pixel mean: This would result in lighter regions where one image has “gaps” but would reduce noise and make it clear where there is less sure information. Of these options, the first seems like the best, but the last provides some idea of whether the alignment was decent to begin with. The alignment method seems to fail more frequently when one of the images is very light. It may be advantageous to invest more effort into adaptive histogram normalization. Alignment Fails: Alignment Success: Wear Characterization Ideas: average intensity of cleaned image length of border/edges detected 6.2 Passive Shoe Recognition 6.2.1 NIJ Grant Grant scope: Build the shoe scanner, develop an automatic recognition algorithm for geometric design elements, test the scanner in locations around Ames. 6.2.2 CoNNOR: Convolutional Neural Network for Outsole Recognition Project Overview Label images of shoes according to geometric classification scheme Use convolutional base of pretrained CNN VGG16 and train a new classifier on labeled features Eventually, acquire real data passively and use CoNNOR to assess feature similarities and frequencies Link to submitted Creative Component on CoNNOR Github repository for paper submitted to Forensic Science International Exploring new directions: Truncate convolutional base and train random forest on features Could replace fully connected layers of neural net as classifier Importance score can filter/reduce the number of features Training the random forest requires too much memory for Bigfoot (CSAFE server), and still takes over two weeks on the HPC. We’re setting this goal aside for now, but could try subsampling the features for a random forest in the future. Spatial integration Model is currently set up to take in 256x256 pixels Try taking in full shoe using a sliding window of size 256x256 View class predictions spatially Fully convolutional networks (FCNs) Unsupervised segmentation to assess current classification scheme Handle whole shoe image of any size (instead of only 256x256 pixel images) References for CNNs and FCNs Stack Exchange post explaining patchwise training “Learning Hierarchical Features for Scene Labeling”: describes an application of multi-scale CNNs and image pyramids “Pyramid methods in image processing”: classic paper from 1984 explaining pyramid methods “Fully Convolutional Networks for Semantic Segmentation” “W-Net: A Deep Model for Fully Unsupervised Image Segmentation” 6.2.3 Spatial integration The overhead costs of going fully convolutional are high; CNN papers are opaque, and many supervised techniques require fully labeled data for semantic segmentation (i.e., label every pixel). Moreover, complex models (for both supervised and unsupervised tequniques) are often only available in Python, and there are a large number of GitHub repositories of mixed quality and reliability. Filtering for quality, understanding code structures, and implementing them on HPC are all enormous tasks on their own. In the meantime, it is much easier (relatively speaking) to use our existing framework of 256x256 square pixel images, for which we have generated thousands of labeled images and have already trained and improved domain-specific models. Currently, I have code working to automatically crop image borders, chop the image into 256x256 pixels (padding the image when appropriate) and equalize the contrast on the individual images. Pad the left and top of the image with a pre-specified offset, then chop the image into 256x256 pixel pieces Equalize the contrast channel for each piece of the image Use the trained model to predict each piece of the image for each class Repeat the above process for different cuts of the original image, and aggregate predictions Updates/In progress: Presented on CoNNOR at ISU’s 3-Minute Thesis competition Preliminaries: 8 heats with 10-12 participants each Runner up to a guy making better yogurt Implementing semantic segmentation model on HPC Learning HPC structure, command line syntax, using Python in practice Documentation assumes high baseline of knowledge :( Improving spatial integration process Remove predictions for blank (and mostly blank) edge images Smooth predictions for overlapping image pieces geom_density2d(), stat_contour(), creating brush overlay with EBImage Shiny app demo 6.3 Maximum Clique Matching 6.4 Project Tread (formerly Cocoa Powder Citizen Science) Project Tread, modified from Leverhulme Institute’s Sole Searching, is a developing CSAFE project with the goals of engaging community participation in forensic research and acquiring shoe print data that may be useful in future analyses. In progress: Review procedures and IRB documents written by James Volunteers are testing modified procedure (below) Be involved in set up of data collection site (through CSSM) Develop plan for data analysis and use (to inform procedure modifications) 6.4.0.1 Comparing the procedures Procedure Leverhulme CSAFE (initial) CSAFE (proposed) ‘Before’ Views 4 per shoe 5 per shoe 2 per shoe ‘Before’ Pictures 1 per view 3 per view 1 per view Total ‘before’ pics 4 per shoe 15 per shoe 2 per shoe Paper Letter (larger) 8.5x11 or 8.5x14 8.5x11 or 8.5x14 Actions Run, jump, walk Step, hop Step, hop Replicates 6 per action 9 per action 3 per action ‘After’ Pictures 1 pic per rep. 3 pics per rep. 1 pic per rep. Total # prints 18 per shoe 18 per shoe 6 per shoe Total # print images 18 per shoe 54 per shoe 6 per shoe Requested # shoes Not specified Both shoes One, 2nd optional Total # images taken 22 or 44 138 8 or 16 Recommended procedure modifications: Ask for one high-quality image of each shoe angle (‘before’) and print (‘after’), instead of three replicate images of each If Project Tread submission website will be set up like current CSSM system (which takes community submissions for environmental images), intermediate quality control can help filter out bad images Only ask for one shoe, and make second shoe optional E.g., always ask for left shoe, and make right shoe optional Ask for 3 replicates per shoe instead of 6-9 Longitudinal shoe study only uses 2-3 replicates per shoe Make written instructions clearer, close loopholes 6.4.0.1 Pilot procedure testing Feedback from pilot testing: Materials Used 1/4 - 1/2 tsp of cocoa powder, not a “dime-size”\" Test/specify cocoa powder vs hot chocolate powder Procedure Sift cocoa powder onto paper (brushing damages print) More pictures of what things should look like Fewer “before” pictures: bottom and side only Mention won’t see oil if done correctly Don’t stack completed prints until after imaging/scanning Analysis Use printable scale/ruler for later alignment of images QR code (like handwriting study) to identify action/replicate/meta info Collect shoe demographics (brand, size, measurements of length/width) Get “mask” by tracing around shoe A few images from pilot testing 6.5 3d Shoe Recognition The set up: Ititally, the idea of the of the study was to use the data from the longitudial study in order to determine if one could predict wear, given pressure point matts and amount of steps and so on that was all part of the longitutidal data collection done previously. This idea has someone shifted. There is a large difference between the scans of the longitudial study that were conducted by hand scanning and those conducted using the turn table. The hand scan soles of the shoes have a wide variation not only on quality, but also on amount of shoe and direction of the scan. In order to simplify the inital processes and determining a pipeline for alignment, instead of the longitudinal shoe scans, the processes below are using a shoe that is scanned soly using the turn table to have some consistancy in the processing as we start to have a pipe line for at least alignment, then later using the longitudinal study add the extra information into the processing; amount of steps, weight,ect. The shoe scans start as an stl file, however R does not work with stl files directly so they need to be transformed into a mesh object, in this specific case a triangle mesh object: Mesh Objects: A triangle mesh object is made up of the following parts, sufaces, polygons, faces, edges and vertices. Looking at a mesh object at first: Some background: At first we wanted to try to simplify the mesh object to just the basic shape in order have simplicity when aligning. The idea of allignment is to take the most basic features, allign them, then by adding complexity of the soul, further allign the two different shoes. The idea is that we want to take a lower detail scan of shoe, allign it, then by adding complexity we can further allign the shoes. However the problem was realized that we are using a prediction to allign rather than the shoe, which ran into some quick problems. The next “attempt” at alignment came from a package called morph. In order to use this package, we needed to transform the data from a mesh object into a plane of points. In order to do this, we greated the function shoe_coord. This function takes a triangle mesh object, and looks at the vertices that make up each triangle. With a specific amount of vertices specified using the specification vert, shoe_coord, takes these vertices and maps them onto a x,y,z coordinate plane. Then using this coordinate plane, the allignment process began. When working with coordinate systems, there was still not aligning, as each shoe was set on its own coordinate plane Some attempts that have not really turned out well - Transforming the mesh objects to points aligned by the center of mass to overlay them detecting difference. - Problems - Isnt aligning properly as you can see Principal Component Analysis: The basic idea of principal component analysis is to take a dataset with many variables, and simplify that dataset by turning the original variables into a smaller number of “Principal Components”. These principal components are the underlying structure in the data. Taking that data and giving a vector in directions where there is the most variance. Taking these egienvectors as the data, we can get a “flattened” version of our origianl shoe. This is done using singular decomposition: If the \\(N \\times p\\) matrix X has rank r then it has a so-called singular value decomposition as \\(X_{N \\times p} = U_{N\\times r} D_{r \\times r} V&#39;_{r\\times p}\\) where U has orthonormal columns spanning the column space of X, V has orthonormal columns spanning the colum space of X’ and D is a diaginal matrix of singular values. For ordinary principal components, the columns of V are called the principal component directions in \\(\\Re^3\\) . Once a shoe has been turned into coordinates from the verticies of a mesh object, we can use the function prcomp to get a transformation matrix. Some notes on this: use vertices of 7 to decrease amount of points to match if you have too few points also doesnt work turn table works the best Sony are the best matches (the shoes I personally have scanned) Point cloud alignment First looking at shoes with all vertices included: Now the same shoe with fewer vertices included in the allignment With these point clous alignments, the next step is to take the rotation matrix given by prcomp and apply it to the original mesh object since rather than comparing points that may or may not exsisit in comparison to each other shoes, as the vertices are not exactly the same on a mesh object from scan to scan of even the same shoe. prcomp gives a matrix that can be applied to a mesh object using a function called transform3d Once this was tried, it seems that the function prcomp isnt actually centering the data, although according to the code it should. So in order to overcome this issue when initially turning the stl file into a mesh object, a centering is performed using the barycenter of the shoe scan. In astronomy, the barycenter is the center of mass of two or more bodies that orbit one another and is the point about which the bodies orbit, since we are obviously only dealing with one object, the barycenter can be thought of as the center of mass for the shoe scan (the center of mass of a distribution of mass in space is the unique point where the weighted relative position of the distributed mass sums to zero). This puts the point (0,0,0) in the center of the shoe rather than the center being close to the 300s as before Centering The blue shoe is the original shoe grab, where the green shoe is now the shoe that has been centered on the center of mass. Now we can start with two shoes that at least have the same “center” point before principal component analysis is completed: Once the shoes themselves have been centered, then PCA can be compleated on the shoes themselves: PCA after centering The Green shoe is the original shoe grab centered, where the red shoe is now after PCA has been applied. Then using the PCA for both of the two scans we can get the following map of the two shoes with their given principal component rotation matrix applied: As you can see although they are on the same plane, they are not exactly allign. In order to get them aligned a matrix of 1s and -1 needs to be applied in some order, minimizing the RMSE Once the PCA has done the initial alignment, then a secondary alignment needs to be done using Itterative Closest Point, to do this a landmark must be established. One cant just use the PCA, the way that the initial scans are only of the soles, which change as they wear, so we are trying to allign something that is not there anymore. The idea landmark will give a spot in the shoe that will not change, the arch or a large indent, in order to find a proposed landmark, we are attempting to use the maximum distance in z. 6.6 Shoe outsole matching using image descriptors 6.6.1 Method 1: Edge detection and MC (MC-COMP) Under the revision by Journal of Applied Statistics, Comments by reviewers Discuss ways in which the MC-COMP could be tuned to fit a more generalizable prediction? image pattern matching including other forensic discipline. Possible to extend to 3D images? Possible to include manual matching from a forensic examiner? Compare MC-COMP with deep learning approaches. Kong et al. (2019); aligning two images, find features by CNN, predict the source by ResNet-50 model. What other classifiers we tried, besides random forest? Define a variability in the similarity score. Train Bayesian Additive regrssion trees (BART) Compare your predictive accuracies on the number of circles (more or less than 3). 6.6.2 Method 2: SURF detection and MC on degraded impressions Accepted by Statistical Analysis and Data Mining in Feb. 2020. Comments by reviewers Generalization (Fingerprints, Photos of faces, … ) Other classifiers, besides the random forest. Variable importance 6.6.3 Research 1: Features Previously, features such as edge, corner, SURF were extracted to match shoeprints. The goal of this project is to find other image descriptors as image features for shoe print matching. Image descriptors SURF(Speeded Up Robust Features)- blobs KAZE - blobs ORB(Oriented FAST and Rotated BRIEF)- corners Image matching CSAFE data - Nike size of 10.5 and Adidas size of 10 will be used to construct mated and non-mated matching Features will be combination of strong 100 points of KAZE, ORB, SURF. 6.6.4 Matching on clean and full images Mates : Image (1) and (2) Non-mates : Image (1) and (3), Image (2) and (3) Performance evaluation using SURF 500 KAZE 500 ORB 500 SURF 100 + KAZE 100 + ORB 100 SURF 200 + KAZE 200 + ORB 200 POC (Phase-only correlation) FMTC (Fourier Mellon transformation correlation) Example graphs of mates: Example graphs of non-mates: Example matching table using SURF 500: Class Clique size Rotation angle % Overlap Median distance of OP Mates 18 2.11 0.5646 0.78 Non-mates 9 6.43 0.1208 1.39 Density plots: ROC curves on test comparisons: 6.6.5 Matching on degraded and partial images Example of degraded images: ROC curves on test comparisons: ROC curves when Q is degraded: What we plan to do: Get ROC curves using KASE, ORB, combination of them Do the same comparisons on degraded and partial impressions Submit the paper 6.6.6 Research 2: Impact of weight to outsole scans from EverOS 2D scanner Analysis setup: Shoes: 5 pairs of Nike Winflow 4, size 10.5 (Brand-new shoes) Participants: Person 1 (weight aa lb)and person 2 (bb lb) Weights: 2 weight vests (20 lbs and 12 lbs) Weight variations: W1(P1), W2(P1 with one vest), W3(P1 with two vests), W4(P2), W5(P2 with one vest), W6(P2 with two vests) W1 \\(=\\) 155.2 lb, W2 \\(=\\) 173.8 lb, W3 \\(=\\) 187.6 lb, W4 \\(=\\) 178 lb, W5 \\(=\\) 197.4 lb, W6 \\(=\\) 211 lb Result1: Shoe is fixed to left side of shoe1. Result2: Purple, green: comparison between repeated replicates from the same shoe, W2-W2, W4-W4. Comparison between weights W2 and W4: weights are almost the same. Yellow: comparison when shoe is fixed to shoe1-L. Red: comparison between shoe1 – shoe2-5. Shoes are never used. Discrimination among groups Let’s simplify the question; Is the person effect significant? Initial analysis Cluster analysis; hcluter Principal component analysis (PCA) Are groups significantly different? Multivariate Analysis of Variance (MANOVA) Multi-Response Permutation Procedurs(MRPP) Analysis of Group Similarities (ANOSIM) How do groups differ? Discriminant Analysis (DA) Classification and Regression Trees (CART) Logistic Regression (LR) 6.6.7 Research 3: MC + CNN Idea: Align two images using MC. Calculate similarity features. Ask CNN to learn similarity features. Combine 3 and 4. Use ResNet-50 to get a final similarity value. References "],
["theoretical-foundations.html", "Chapter 7 Theoretical foundations 7.1 Common Source vs Specific Source Comparison via Information Theory 7.2 Score-based Likelihood Ratios are not Fundamentally “Incoherent” 7.3 Copper Wire Synthetic Data 7.4 Optimal matching problem", " Chapter 7 Theoretical foundations 7.1 Common Source vs Specific Source Comparison via Information Theory Please note that this project has changed somewhat significantly, but this information might be relevant for others in the future. See here for the current draft of the paper from this work. 7.1.1 Introduction Central Goals continue work started by Danica and Peter Vergeer on the analysis of likelihood ratios study the differences between specific source (SS) and common source (CS) likelihood ratios (LRs) in an information theoretic way does the CS or SS LR have more “information”? does the data (or the score) have more “information” about the SS or the CS hypothesis? can be the CS or SS hypotheses (prosecution or defense) be formally compared in terms of being easier to “prove” or “disprove”? General Notation Let \\(X \\in \\mathbb{R}^{q_x}\\) and \\(Y \\in \\mathbb{R}^{q_y}\\) be two random vectors with joint distribution \\(P\\) and corresponding density \\(p\\). : \\(\\mathbb{H}(X) = -\\int{p(x) \\log p(x) dx}\\) : \\(\\mathbb{H}(X|Y) = \\mathbb{E}_{Y}\\left[-\\int{p(x|y) \\log p(x|y) dx}\\right]\\) : \\(\\mathbb{H}_{2}(X|Y) = -\\int{p(x|y) \\log p(x|y) dx}\\) : \\(\\mathbb{I}(X;Y) = \\mathbb{H}(X) - \\mathbb{H}(X|Y)\\) Proof that Mutual Information is always positive: \\[\\begin{align*} \\mathbb{I}(X;Y) &amp;= \\mathbb{H}(X) - \\mathbb{H}(X|Y) \\\\ &amp;= -\\int{p(x) \\log p(x) dx} + \\int{\\int{p(x|y)p(y) \\log p(x|y) dx} dy} \\\\ &amp;= -\\int{\\int{p(x,y) \\log p(x) dx}dy} + \\int{\\int{p(x,y) \\log p(x|y) dx} dy} \\\\ &amp;= -\\int{\\int{p(x,y) \\log p(x) dx}dy} + \\int{\\int{p(x,y) \\log \\frac{p(x,y)}{p(y)} dx} dy} \\\\ &amp;= \\int{\\int{p(x,y) \\log \\frac{p(x,y)}{p(x)p(y)} dx}dy} \\\\ &amp;= KL(P||P_{X} \\times P_{Y}) \\\\ &amp;\\geq 0 \\end{align*}\\] 7.1.2 Common Source vs Specific Source LR The “common source” problem is to determine whether two pieces of evidence, both with unknown origin, have the same origin. One might be interested in this problem if two crimes were suspected to be linked, but no suspect has yet been identified. Alternatively, the “specific source” problem is to determine whether a fragment of evidence coming from an unknown source, such as evidence at a crime scene, has the same origin as a fragment of evidence of known origin, such as evidence collected directly from a suspect. Basic Setup \\(H \\in \\{ H_p, H_d \\}\\) as the random variable associated with the CS hypothesis. \\(A\\) and \\(B\\) are discrete r.v.’s representing two “sources” of evidence distributions for \\(A\\) and \\(B\\) defined conditionally based on the hypothesis SS hypothesis is represented by the conditional random variable \\(H|A\\) \\(X\\) is data coming from \\(A\\), \\(Y\\) is data coming from \\(B\\) compare information contained in \\((X,Y)\\) about \\(H\\) and \\(H|A\\) join density can be written as \\(p(X,Y,A,B,H) = p(X,Y|A,B)p(B|A,H)p(A|H)p(H)\\) Is there more information in a CS or SS LR? Let us examine this question in two different ways. Is the posterior entropy (given \\((X,Y)\\)) in the common source hypothesis smaller than that of the specific source hypothesis? In other words, would observing the specific value of \\(A\\) as well as the data make you more certain about \\(H\\) than just observing the data? Is the posterior entropy (given \\((X,Y)\\)) in the common source hypothesis smaller than the average (over possible values for \\((X,Y,A)\\)) posterior entropy of the specific source hypothesis? In other words, do you expect that, on average, observing the value of \\(A\\) as well as the data make you more certain about \\(H\\) than just observing the data? Answering the first question/interpretation, to me, requires proving that \\[ \\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0 \\]. Answering the second question requires proving that \\[ \\mathbb{H}(H|X,Y) - \\mathbb{H}(H|X,Y, A) \\geq 0 \\]. Luckily, the second question is true due to the fact that \\[\\begin{align*} \\mathbb{H}(H|X,Y) - \\mathbb{H}(H|X,Y,A) &amp;= \\mathbb{E}_{(X,Y)} \\left[ - \\int{p(h,a|x,y) \\log p(h|x,y) d(h,a)} + \\int{p(h,a|x,y) \\log p(h|x,y,a) d(h,a)} \\right] \\\\ &amp;= - \\int{p(h,a|x,y)p(x,y) \\log \\frac{p(h,a|x,y)}{p(a|x,y)p(h|x,y)} d(h,x,y,a)} \\\\ &amp;= \\mathbb{E}_{(X,Y)} \\left[ KL(P_{(H,A)|(X,Y)}||P_{H|(X,Y)} \\times P_{A|(X,Y)}) \\right] \\geq 0 \\end{align*}\\] Whether or not \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0\\) is not obvious. We have that \\[\\begin{align*} \\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) &amp;= \\int{-p(h|x,y)\\log p(h|x,y) dh} - \\int{-p(h|x,y,a) \\log p(h|x,y,a) dh} \\\\ &amp;= \\frac{p(a)}{p(a|x,y)}\\int{-p(h|x,y,a)\\log p(h|x,y) dh} + \\int{p(h|x,y,a) \\log p(h|x,y,a) dh}\\\\ &amp;??? \\end{align*}\\] We can try and understand the value of \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A)\\) in terms of \\(\\frac{p(a)}{p(a|x,y)}\\). For example, if \\(\\frac{p(a)}{p(a|x,y)} \\geq 1\\), then \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A) \\geq 0\\). If \\(\\frac{p(a)}{p(a|x,y)} \\leq 1\\), then it is hard to say much about the value of \\(\\mathbb{H}_{2}(H|X,Y) - \\mathbb{H}_{2}(H|X,Y, A)\\). Is there more information in the data about the CS or SS hypothesis? Under the second scenario, we can study this question by looking at 7.1.3 Other notions of information Information in \\(Y\\) about \\(X\\): \\(\\int{p(x|y) \\log \\frac{p(x|y)}{p(x)} dx}\\) nonnegative Equal to zero when \\(X \\perp Y\\) needn’t integrate over \\(Y\\) (?) as opposed to entropy, information in a random variable requires another random variable to be “predicted”… this is fine in our situation as we have a natural candidate: \\(H_p\\) or \\(H_d\\) 7.1.4 Information Theoretic Specific Source Score Sufficiency Metric Consider the specific source problem. The following derivations are very similar to those in the “infinite alternative population” situation considered in the paper that Danica, Alicia, Jarad, and I submitted. Assuming \\(X \\perp Y|A,B\\) and both \\(X \\perp B|A\\) and \\(Y \\perp A|B\\), the LR is \\[\\begin{align*} LR &amp;= \\frac{p(x,y|A = a,B = a)}{p(x,y|A = a,B \\neq a)} \\\\ &amp;= \\frac{p(x|A = a)p(y|A = a, B = a)}{p(x|A = a)p(y|A = a, B \\neq a)} \\\\ &amp;= \\frac{p(y|A = a, B = a)}{p(y|A = a, B \\neq a)}. \\end{align*}\\] Thus, the LR depends only on the evidence from the unknown source, \\(Y\\). For a given score, \\(s\\), we can also write the LR in the following way, \\[\\begin{align*} LR = \\frac{p(y|A = a, B = a)}{p(y|A = a, B \\neq a)} &amp;= \\frac{p(s|y, A = a)p(y|A = a, B = a)}{p(s|y, A = a)p(y|A = a, B \\neq a)} \\\\ &amp;= \\frac{p(s|y, A = a, B = a)p(y|A = a, B = a)}{p(s|y, A = a, B \\neq a)p(y|A = a, B \\neq a)} \\\\ &amp;= \\frac{p(s,y|A = a, B = a)}{p(s,y|A = a, B \\neq a)} \\\\ &amp;= \\frac{p(y|s,A = a, B = a)p(s|A = a, B = a)}{p(y|s,A = a, B \\neq a)p(s|A = a, B \\neq a)}. \\end{align*}\\] Because \\(S|Y,A\\) is a function only of the known source evidence, \\(X\\), and because \\(X \\perp B|A\\), we have that \\(S \\perp B | Y, A\\). This means that \\(p(s|y, A = a, B = a) = p(s|y, A = a, B \\neq a)\\). Using these facts, we can then decompose the KL divergence of the data under the specific source prosecution hypothesis in the following way, \\[\\begin{align*} KL(P(X,Y|A &amp;= a, B = a)||P(X,Y|A = a, B \\neq a)) = E_{(X,Y)}\\left[ \\log \\frac{p(x,y|A = a,B = a)}{p(x,y|A = a,B \\neq a)} | A = a, B = a \\right] \\\\ &amp;= E_{Y}\\left[ \\log \\frac{p(y|A = a,B = a)}{p(y|A = a,B \\neq a)} | A = a, B = a \\right] \\\\ &amp;= E_{S}\\left[ E_{Y}\\left[ \\log \\frac{p(y|A = a,B = a)}{p(y|A = a,B \\neq a)} |s, A = a, B = a \\right] \\right] \\\\ &amp;= E_{S}\\left[ E_{Y}\\left[ \\log \\frac{p(y|s,A = a,B = a)}{p(y|s,A = a,B \\neq a)} + \\log \\frac{p(s|A = a, B = a)}{p(s|A = a, B \\neq a)} |s, A = a, B = a \\right] \\right] \\\\ &amp;= E_{S}\\left[ E_{Y}\\left[ \\log \\frac{p(y|s,A = a,B = a)}{p(y|s,A = a,B \\neq a)}|s, A = a, B = a \\right] \\right] + E_{S} \\left[ \\log \\frac{p(s|A = a, B = a)}{p(s|A = a, B \\neq a)} \\right] \\\\ &amp;= E_{S} \\left[ KL(P(Y|S,A = a,B = b) || P(Y|S, A = a, B \\neq a)) \\right] + KL(P(S|A = a, B = a)||P(S|A = a, B \\neq a)). \\end{align*}\\] This implies that \\(KL(P(X,Y|A = a, B = a)||P(X,Y|A = a, B \\neq a)) \\geq KL(P(S|A = a, B = a)||P(S|A = a, B \\neq a))\\). An additional consequence is that larger values of \\(KL(P(S|A = a, B = a)||P(S|A = a, B \\neq a))\\) imply smaller values of \\(E_{S} \\left[ KL(P(Y|S,A = a,B = b) || P(Y|S, A = a, B \\neq a)) \\right]\\). Because \\(KL(P(Y|S,A = a,B = b) || P(Y|S, A = a, B \\neq a))\\) is a nonnegative function in terms of \\(S\\), small values of \\(E_{S} \\left[ KL(P(Y|S,A = a,B = b) || P(Y|S, A = a, B \\neq a)) \\right]\\) imply small values (in some sense) of \\(KL(P(Y|S,A = a,B = b) || P(Y|S, A = a, B \\neq a))\\). For example, if the expectation is zero, then the (conditional) KL divergence is zero almost everywhere. Zero KL divergence implies that \\(P(Y|S,A = a,B = b) = P(Y|S,A = a,B \\neq b)\\), i.e. \\(S\\) is sufficient for the specific source hypothesis. All of this means that \\(KL(P(S|A = a, B = a)||P(S|A = a, B \\neq a))\\) and \\(KL(P(S|A = a, B \\neq a)||P(S|A = a, B = a))\\) are measures of the usefulness of the score which have direct ties to sufficiency. Estimates of these are always computable in practice, and they are intuitive targets to maximize. For example, if the score is a predicted class probability for “match”, the more discriminative the classifier, the more sufficient the score. 7.2 Score-based Likelihood Ratios are not Fundamentally “Incoherent” Concern has been raised in the literature on LRs about a desirable property supposedly inherently absent from specific-source SLRs. The property, dubbed “coherence”, intuitively says that given two mutually exhaustive hypotheses, \\(H_A\\) and \\(H_B\\), the likelihood ratio used to compare hypothesis A to hypothesis B should be the reciprocal of that used to compare hypothesis B to hypothesis A. I will argue that the claims about the inherent incoherency of SLRs is a result of thinking about SLRs too narrowly. Specifically, I will show that the arguments as to why SLRs are incoherent arise through the inappropriate comparison of SLRs based on different score functions. When one appropriately considers a single score function, incoherency is impossible. 7.2.1 Coherence Denote by \\(E \\in \\mathbb{R}^{n}\\) the vector of random variables describing all of the observed evidence or data which will be used to evaluate the relative likelihood of the two hypotheses. Define by \\(LR_{i,j} \\equiv \\frac{p(E|H_i)}{p(E|H_j)}\\) the likelihood ratio of hypothesis \\(i\\) to hypothesis \\(j\\). The coherency principal is satisfied if \\[ LR_{i,j} = \\frac{1}{LR_{j,i}} \\]. Likelihood ratios are fundamentally coherent, but what about score-based likelihood ratios? Denote by \\(s: \\mathbb{R}^n \\rightarrow \\mathbb{R}^{q}\\) a score function mapping the original data to Euclidean space of dimension \\(q\\) (typically \\(q = 1\\)). Similar to LRs, denote by \\(SLR_{i,j} \\equiv \\frac{p(s(E)|H_i)}{p(s(E)|H_j)}\\) the score-based likelihood ratio comparing hypothesis \\(i\\) to hypothesis \\(j\\). Clearly, in this general context SLRs are also coherent. 7.2.2 Problems with arguments showing SLRs are incoherent Let us examine the arguments presented in [REFS] to the incoherence of SLRs. These arguments stem from an example where there are two known sources of evidence say, source \\(A\\) and source \\(B\\), each producing data \\(e_A\\) and \\(e_B\\), respectively. Furthermore, assume that we have a third piece of evidence of unknown origin, \\(e_u\\), which must have come from either \\(A\\) or \\(B\\). We then wish to evaluate the support of the data for \\(H_A\\) or \\(H_B\\) defined as follows \\[\\begin{array}{cc} H_A: &amp; e_u \\text{ was generated from source } A \\\\ H_B: &amp; e_u \\text{ was generated from source } B. \\end{array}\\] In this case, we have \\(LR_{A,B} = \\frac{p(e_A, e_B, e_u|H_A)}{p(e_A, e_B, e_u|H_B)}\\). We make use of all available data in the formulation of the numerator and denominator densities. Under the assumptions that each fragment of evidence is independent under both hypothesis \\(A\\) and \\(B\\) as well as that \\(p(e_A,e_B|H_A) = p(e_A,e_B|H_B)\\), the LR reduces to \\(LR_{A,B} = \\frac{p(e_u|H_A)}{p(e_u|H_B)}\\). The second assumption is generally acceptable as the source of \\(e_u\\) ought to have no impact on the distribution of the evidence with known source. [REFS] then consider possible SLRs for this example. However, they make an assumption that the score is explicitly a function only of two fragments of evidence. That is, assuming the dimension of \\(e_i\\), \\(dim(e_i) = k\\), is constant for \\(i = A,B,u\\), their score maps \\(s:\\mathbb{R}^k \\times \\mathbb{R}^k \\rightarrow \\mathbb{R}\\). An common example of such a score is Euclidean distance, i.e. \\(s(x,y) = \\left[ \\sum_{i = 1}^{k}(x_i - y_i)^2 \\right]^{1/2}\\). Such a score makes perfect sense in a typical specific-source problem context in which only two fragments of evidence are considered: one from the known source and one from the unknown source. However, when one desires to create an SLR based on this score in this particular example, it is tempting to suggest that the natural SLR is \\(SLR_{A,B} = \\frac{p(s(e_A,e_u)|H_A)}{p(s(e_A,e_u)|H_B)}\\). Yet, the natural SLR if the hypotheses were reversed is \\(SLR_{B,A} = \\frac{p(s(e_B,e_u)|H_B)}{p(s(e_B,e_u)|H_A)}\\). Neither of these SLRs is the reciprocal of the other, and so the specific source SLR appears to be “incoherent”. This approach, however, should raise a red flag immediately. Why, in the full LR case, do we require that (simplifying model assumptions aside) the numerator and denominator densities be functions of all available data, but the score is not? Furthermore, if we consider these SLRs in the more general context of scores depending on all available data, we see that, in fact, what [REFS] define to be \\(SLR_{A,B}\\) and \\(SLR_{B,A}\\) turn out to be two different SLRs depending on two different scores. For clarity, we will use \\(s(\\cdot)\\) to denote scores which are explicitly functions of all observed data, and we will use \\(\\delta (\\cdot)\\) to denote score functions which are only a function of two fragments of evidence/data. Specifically, the score in \\(SLR_{A,B}\\) is \\(s_1(e_u,e_A,e_B) = \\delta(e_u,e_A)\\) and the score in \\(SLR_{B,A}\\) is \\(s_2(e_u,e_A,e_B) = \\delta(e_u,e_B)\\). While the functional form of the score in the two SLRs appears to be the same, clearly \\(s_1(e_u,e_A,e_B) \\neq s_2(e_u,e_A,e_B)\\). Thus, the two SLRs are simply two distinct quantities whose relationship needn’t be expected to be related anymore than if one had decided to use two different function forms of \\(\\delta(\\cdot,\\cdot)\\) in the two separate SLRs. One might ask how to reasonably construct an SLR which utilizes a (univariate) score other than a similarity metric for two fragments of evidence. One such example in this case would be \\(s(e_u, e_A, e_B) = \\frac{\\delta(e_u,e_A)}{\\delta(e_u,e_B)}\\). Intuitively, under \\(H_A\\), the numerator should be larger than the denominator, while under \\(H_B\\), the opposite should be true. 7.2.3 Example of a coherent SLR in the two source problem Suppose that our hypotheses are defined such that \\[ \\begin{array}{cc} H_A: &amp; e_u \\sim N(\\mu_A, \\sigma^2), e_A \\sim N(\\mu_A, \\sigma^2), e_B \\sim N(\\mu_B, \\sigma^2) \\\\ H_B: &amp; e_u \\sim N(\\mu_B, \\sigma^2), e_A \\sim N(\\mu_A, \\sigma^2), e_B \\sim N(\\mu_B, \\sigma^2), \\end{array} \\] where \\(e_u\\), \\(e_A\\), \\(e_B\\) are mutual independent under both \\(H_A\\) and \\(H_B\\). We will examine three different SLRs: \\(SLR^{(A)} \\equiv \\frac{p(s_1(E)|H_A)}{p(s_1(E)|H_B)}\\), \\(SLR^{(B)} \\equiv \\frac{p(s_2(E)|H_A)}{p(s_2(E)|H_B)}\\), and \\(SLR^* \\equiv \\frac{p(s_3(E)|H_A)}{p(s_3(E)|H_B)}\\), where \\[\\begin{align*} E &amp;= (e_u, e_A, e_B)^{\\top} \\\\ s_1(E) &amp;= \\log \\lVert e_u - e_A \\rVert^2 \\\\ s_2(E) &amp;= \\log \\lVert e_u - e_B \\rVert^2 \\\\ s_3(E) &amp;= \\log \\frac{\\lVert e_u - e_A \\rVert^2}{\\lVert e_u - e_B \\rVert^2} \\end{align*}\\] LR versus SLR scatterplots under hypothesis A and B using three types of SLRs: “coherent”, “incoherent” considering hypothesis A first, and “incoherent” considering hypothesis B first. RMSE Exp.Cond.KL score.KL true.KL type hypothesis 3.79 2.71 1.76 4.47 coherent A 3.86 2.77 1.74 4.51 coherent B 4.64 3.37 1.10 4.47 incoherent A A 3.94 3.22 1.29 4.51 incoherent A B 3.93 3.23 1.24 4.47 incoherent B A 4.73 3.44 1.07 4.51 incoherent B B 7.2.4 Possible Generalizations of Coherent SLRs to the Multisource Case It might be nice to, in general, be able to construct a reasonable score given a “similarity” score, \\(\\delta(\\cdot, \\cdot)\\) defined in terms of two pieces of evidence. I’ll propose a couple ways of doing this. First, suppose that instead of two sources, we now have \\(K\\) sources, one of which is the source of the evidence from an unknown source. The task is to compare the hypothesis that the unknown source evidence was generated by a specific source \\(A = a_x \\in \\mathcal{S} \\equiv \\{1, 2, ..., K\\}\\) to the hypothesis that the unknown source evidence was generated by any one of the other sources \\(B = b \\in \\mathcal{S} \\setminus a_x\\). Mathematically, \\[ \\begin{array}{cc} H_A: &amp; e_u \\text{ generated by } a_x \\\\ H_B: &amp; e_u \\text{ generated by some } b \\in \\mathcal{S} \\setminus a_x. \\end{array} \\] Let’s consider two possible scores, both of which will be based off of an accepted dissimilarity metric, \\(\\delta(\\cdot, \\cdot) \\geq 0\\). The first score that we will consider is \\[ S_1(e_u, e_1, ..., e_K) = \\log \\frac{\\delta(e_u, e_{a_x})}{ \\min_{b \\in \\mathcal{S} \\setminus a_x} \\delta(e_u, e_b) }. \\] The second score that we will consider is \\[ S_2(e_u, e_1, ..., e_K) = \\log \\frac{\\delta(e_u, e_{a_x})}{ \\sum_{b \\in \\mathcal{S} \\setminus a_x} w(b)\\delta(e_u, e_b) }, \\] where \\(w(b)\\) are weights with \\(\\sum_{b \\in \\mathcal{S} \\setminus a_x} w(b) = 1\\). Intuitively, the first score should perform well. The dissimilarity in the numerator should be compared with the smallest dissimilarity in $ a_x$. In the absence of other prior information, only the relative size of the numerator dissimilarity to the smallest dissimilarity of \\(b \\in \\mathcal{S} \\setminus a_x\\) should matter. The second score would likely be easier to study in terms of mathematical properties. For example, it might be possible to assume \\(E \\left[ \\delta(e_u, e_i) \\right] = \\mu_1 &lt; \\infty\\) if the source of \\(e_u\\) is that of \\(e_i\\) but that \\(E \\left[ \\delta(e_u, e_i) \\right] = \\mu_2 &lt; \\infty\\) if the sources are different. One might be able to show some type of consistency property if, instead of one copy of \\(E = (e_u, e_1, ..., e_K)^{\\top}\\), we now have \\(N\\) iid copies \\(E_i = (e_u, e_1, ..., e_K)^{\\top}_i\\). Then, using \\(\\frac{1}{N} \\sum_{i = 1}^{N} \\delta(e_{u_i}, e_{j_i})\\) in place of \\(\\delta(e_u, e_j)\\) yields the ability to use the law of large numbers. This may be impractical in any real life situation, but I consider the score here nonetheless. In more generality, there seems to be no reason why a multisource score couldn’t be constructed using an arbitrary summary statistic of the “similarity” scores computed between the unknown source evidence and the alternative population. 7.2.5 Multisource example For simplicity, we will again assume that all evidence is generated from independent, univariate Gaussian distributions. Specifically, \\[ \\begin{array}{ccc} H_p: &amp; e_u \\sim N(\\mu_K, \\sigma^2), &amp; e_i \\sim N(\\mu_i, \\sigma^2), i \\in \\{ 1,..., K \\} \\\\ H_d: &amp; e_u \\sim GMM(\\{\\mu_k\\}_{k = 1}^{K - 1}, \\{ \\pi_k \\}_{k = 1}^{K - 1}, \\sigma^2), &amp; e_i \\sim N(\\mu_i, \\sigma^2), i \\in \\{ 1,...,K \\} \\end{array}. \\] where all random variables are assumed to be independent conditional on each hypothesis. We will further assume that \\(\\mu_i \\stackrel{iid}{\\sim} N(0, \\tau^2), i \\in \\{ 1,..., K-1 \\}\\). log-LR versus log-SLR scatterplots under hypothesis P and D using three types of SLRs which correspond to using different statistics to aggregate dissimilarity scores in the alternative source population. We try min, average, and max, corresponding to rows 1-3, respectively.Results are based on 10,000 observations for each hypothesis. RMSE Exp.Cond.KL KL true.KL type hypothesis 3.1371 2.1718 2.2813 4.4527 min P 8.4669 5.1396 1.8487 6.9865 min D 3.4835 2.3965 2.0568 4.4527 avg P 7.6549 4.2336 2.7529 6.9865 avg D 3.8587 2.7198 1.7333 4.4527 max P 7.0711 4.1623 2.8250 6.9865 max D log-LR versus log-SLR scatterplots under hypothesis P and D using four types of SLRs. The first three scores correspond to using different statistics to aggregate dissimilarity scores in the alternative source population. The fourth score is essentially the predicted probability of Hypothesis P being true given the first three scores based on a sparse Gaussian process model. We try min, average, and max, corresponding to rows 1-3, respectively. Results are based on 1,000 observations for each hypothesis due to training time for the sparse Gaussian process. RMSE Exp.Cond.KL KL true.KL type hypothesis 1 3.0605 2.0616 2.3206 4.3809 min P 3 3.2725 2.0710 2.3111 4.3809 avg P 5 3.7826 2.5398 1.8424 4.3809 max P 7 2.6095 1.5380 2.8442 4.3809 gp P RMSE Exp.Cond.KL KL true.KL type hypothesis 2 7.9189 4.7271 2.1101 6.8364 min D 4 7.1000 3.8640 2.9724 6.8364 avg D 6 6.6734 4.0090 2.8274 6.8364 max D 8 6.9872 3.3887 3.4414 6.8364 gp D Aggregating scores via the sparse GP results in a final score that uniformly beats each of the other scores under both the prosecution and defense hypotheses in terms of the score KL divergence. 7.2.6 Other Possible Viewpoints? I have assumed in the previous section that the order of consideration of hypotheses should not affect the ordering of the data vector \\(E = (e_u,e_A,e_B)\\) or of the ordering of these arguments to the score function. This seems reasonable, but perhaps [REFS] would argue that considering \\(H_A\\) first, \\(E = (e_u, e_A, e_B)\\) and \\(s(E) = s(e_u, e_A, e_B)\\), but considering \\(H_B\\) first, \\(E = (e_u, e_B, e_A)\\) and \\(s(E) = s(e_u, e_B, e_A)\\). In this case, \\(SLR_{A,B} \\neq \\frac{1}{SLR_{B,A}}\\) because we switch the order of arguments to the score from one SLR to the other. Note that, however, if we relax the independence assumptions of independence under either \\(H_A\\) or \\(H_B\\), then even the LR becomes “incoherent” because \\(\\frac{p(e_u, e_A, e_B|H_A)}{p(e_u, e_A, e_B|H_B)} \\neq \\frac{p(e_u, e_B, e_A|H_A)}{p(e_u, e_B, e_A|H_B)}\\) in general. It is true that the LR depends only on the evidence of the unknown source in this specific scenario, but that is a consequence of modeling assumptions and not of LR paradigmatic principals. 7.3 Copper Wire Synthetic Data Score KL divergences and Monte Carlo standard errors for five randomly generated synthetic copper wire data sets under \\(H_p\\) and \\(H_d\\). 7.4 Optimal matching problem 7.4.1 Two groups case. Suppose there are two groups \\(\\pi_{1}\\) and \\(\\pi_{2}\\) with densities \\(f_{1}(x)\\) and \\(f_{2}(x)\\) on the support \\(x \\in T\\). Let \\(p_{1}\\) and \\(p_{2}\\) be the prior probabilities of groups \\(\\pi_{1}\\) and \\(\\pi_{2}\\), respectively. There are new observations \\(\\mbox{obs}_{1}\\) and \\(\\mbox{obs}_{2}\\) with measurements \\(x_{1}\\) and \\(x_{2}\\), respectively. The goal is to distinguish there the new observations are from the same group or not. That is to partition the space \\(T \\times T\\) in to \\(T_{m} \\cup T_{nm}\\), where we conclude \\(\\mbox{obs}_{1}\\) and \\(\\mbox{obs}_{2}\\) are from the same group if \\((x_{1}, x_{2})\\) falls into \\(T_{m}\\); and otherwise if \\((x_{1}, x_{2}) \\in T_{nm}\\). The two type errors: Matching error: \\((x_{1}, x_{2}) \\in T_{m}\\) if \\(\\mbox{obs}_{1} \\in \\pi_{1}, \\mbox{obs}_{2} \\in \\pi_{2}\\) or \\(\\mbox{obs}_{1} \\in \\pi_{2}, \\mbox{obs}_{2} \\in \\pi_{1}\\); Unmatching error: \\((x_{1}, x_{2}) \\in T_{um}\\) if \\(\\mbox{obs}_{1}, \\mbox{obs}_{2} \\in \\pi_{1}\\) or \\(\\mbox{obs}_{1}, \\mbox{obs}_{2} \\in \\pi_{2}\\). The probability of errors are: \\[P(\\mbox{Matching error}) = \\int_{T_{m}} \\{f_{1}(x_{1})f_{2}(x_{2}) + f_{2}(x_{1})f_{1}(x_{2})\\}p_{1}p_{2}dx_{1}dx_{2},\\] \\[P(\\mbox{Unmatching error}) = \\int_{T_{um}} \\{f_{1}(x_{1})f_{1}(x_{2})p_{1}^{2} + f_{2}(x_{1})f_{2}(x_{2})p_{2}^{2}\\}dx_{1}dx_{2}.\\] Consider the unweighted sum of those two error probabilities \\(P(\\mbox{error}) = P(\\mbox{Matching error}) + P(\\mbox{Unmatching error})\\). We have \\[P(\\mbox{error}) = \\int_{T_{m}} \\big[\\{f_{1}(x_{1})f_{2}(x_{2}) + f_{2}(x_{1})f_{1}(x_{2})\\}p_{1}p_{2} - \\{f_{1}(x_{1})f_{1}(x_{2})p_{1}^{2} + f_{2}(x_{1})f_{2}(x_{2})p_{2}^{2}\\}\\big]dx_{1}dx_{2} + C,\\] where \\(C\\) is a constant. The minimum of this error probability with respect to \\(T_{m}\\) occurs when \\[\\begin{equation} T_{m} = \\bigg\\{(x_{1}, x_{2}): \\frac{[f_{1}(x_{1})f_{2}(x_{2}) + f_{2}(x_{1})f_{1}(x_{2})]p_{1}p_{2}}{f_{1}(x_{1})f_{1}(x_{2})p_{1}^{2} + f_{2}(x_{1})f_{2}(x_{2})p_{2}^{2}} &lt; 1 \\bigg\\}. \\label{eq:Optimalrule1} \\end{equation}\\] This decision region is the optimal matching rule to minimize the probability of the matching errors. Note that \\[f_{1}(x_{1})f_{1}(x_{2})p_{1}^{2} + f_{2}(x_{1})f_{2}(x_{2})p_{2}^{2} - [f_{1}(x_{1})f_{2}(x_{2}) + f_{2}(x_{1})f_{1}(x_{2})]p_{1}p_{2} = \\{f_{1}(x_{1})p_{1} - f_{2}(x_{1})p_{2}\\}\\{f_{1}(x_{2})p_{1} - f_{2}(x_{2})p_{2}\\}.\\] The optimal region \\(T_{m}\\) in () is equivalent to \\[\\begin{eqnarray} \\frac{f_{1}(x_{1})}{f_{2}(x_{1})} &lt; \\frac{p_{2}}{p_{1}} &amp;\\mbox{and}&amp; \\frac{f_{1}(x_{2})}{f_{2}(x_{2})} &lt; \\frac{p_{2}}{p_{1}} \\ \\mbox{ or } \\nonumber \\\\ \\frac{f_{1}(x_{1})}{f_{2}(x_{1})} &gt; \\frac{p_{2}}{p_{1}} &amp;\\mbox{and}&amp; \\frac{f_{1}(x_{2})}{f_{2}(x_{2})} &gt; \\frac{p_{2}}{p_{1}}, \\label{eq:Optimalrule2} \\end{eqnarray}\\] which corresponds to the optimal classification rule. From (), the optimal matching rule is equivalent to the optimal classification rule as long as we conclude the observations matched from one group if they are classified to the same group. Normal distribution. As an example, assume \\(\\pi_{1}\\) and \\(\\pi_{2}\\) are from normal distributions with mean \\(\\mu_{1}\\) and \\(\\mu_{2}\\), and covariance \\(\\Sigma\\). Further assume the prioir probabilities are the same \\(p_{1} = p_{2} = 1 / 2\\). The optimal decision is to classify \\(x_{1}\\) and \\(x_{2}\\) into the same group if \\[\\begin{equation} \\frac{\\exp\\big[ \\{x_{2} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big] + \\exp\\big[ \\{x_{1} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big]} {1 + \\exp\\big[ \\{x_{1} + x_{2} - (\\mu_{1} + \\mu_{2})\\}&#39; \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big]} &lt; 1. \\label{eq:OptimalruleNormal1} \\end{equation}\\] It can be shown that the above inequality is equivalent to \\[\\begin{eqnarray} \\exp\\big[ \\{x_{2} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big] &lt; 1 &amp;\\mbox{and}&amp; \\exp\\big[ \\{x_{1} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big] &lt; 1 \\ \\mbox{ or } \\nonumber \\\\ \\exp\\big[ \\{x_{2} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big] &gt; 1 &amp;\\mbox{and}&amp; \\exp\\big[ \\{x_{1} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\big] &gt; 1 \\label{eq:OptimalruleNormal2} \\end{eqnarray}\\] For discriminat analysis, it is well known that the optimal classification rule under normal distribution is to classify \\(x_{1}\\) and \\(x_{2}\\) to \\(\\pi_{1}\\) if \\(\\{x_{1} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\leq 0\\) and \\(\\{x_{2} - (\\mu_{1} + \\mu_{2}) / 2\\} \\Sigma^{-1} (\\mu_{2} - \\mu_{1}) \\leq 0\\) respectively, and classify them to \\(\\pi_{2}\\) if otherwise. Feature difference is a method to solve the matching problem via classification. Take \\(d = x_{1} - x_{2}\\) as the pairwise difference between two observations. It is clear that \\(d \\sim N(0, 2 \\Sigma)\\) if \\(x_{1}\\) and \\(x_{2}\\) are both from either \\(\\pi_{1}\\) or \\(\\pi_{2}\\), and \\(d \\sim N(\\mu_{1} - \\mu_{2}, 2 \\Sigma)\\) or \\(d \\sim N(\\mu_{2} - \\mu_{1}, 2 \\Sigma)\\) if \\(x_{1}\\) and \\(x_{2}\\) are from different groups. Let \\(f_{m}(d)\\) and \\(f_{um}(d)\\) be the density of \\(d\\) if two observations are from the same group and different groups, respectively. Then, \\(f_{m}(d)\\) is the normal density with mean \\(0\\) and covariance \\(2 \\Sigma\\), and \\(f_{um}(d)\\) is the mixture normal \\(0.5 N(\\mu_{1} - \\mu_{2}, 2 \\Sigma) + 0.5 N(\\mu_{2} - \\mu_{1}, 2 \\Sigma)\\). The optimal discriminant rule is to classify \\(d\\) into the unmatching case if \\[\\frac{f_{um}(d)}{f_{m}(d)} = \\frac{\\exp\\{-(d - \\mu_{1} + \\mu_{2})&#39; \\Sigma^{-1} (d - \\mu_{1} + \\mu_{2}) / 4\\} + \\exp\\{-(d + \\mu_{1} - \\mu_{2})&#39; \\Sigma^{-1} (d + \\mu_{1} - \\mu_{2}) / 4\\}}{2 \\exp(-d&#39; \\Sigma^{-1} d / 4)} &gt; \\frac{p_{1}^{2} + p_{2}^{2}}{2 p_{1} p_{2}}.\\] Let \\(\\mu_{d} = \\mu_{1} - \\mu_{2}\\). The above inequality is equivalent to \\[\\exp(d&#39; \\Sigma^{-1} \\mu_{d} / 2) + \\exp( - d&#39; \\Sigma^{-1} \\mu_{d} / 2) &gt; \\exp(\\mu_{d}&#39; \\Sigma^{-1} \\mu_{d} / 4) \\frac{p_{1}^{2} + p_{2}^{2}}{p_{1}p_{2}},\\] which is approximately equivalent to \\[|d&#39; \\Sigma^{-1} \\mu_{d}| / 2 &gt; \\mu_{d}&#39; \\Sigma^{-1} \\mu_{d} / 4 + \\log (p_{1}^{2} + p_{2}^{2}) - \\log(p_{1}p_{2}).\\] As an illustration, consider one dimensional feature space. Take \\(\\mu_{1} = 1, \\mu_{2} = -1, \\Sigma = 1\\), and \\(p_{1} = p_{2} = 0.5\\). Figure 1 shows the optimal matching rule and the optimal rule based on feature difference. We see that in this example the matching region from the feature difference method only overlaps a small fraction of that from the optimal matching rule, and there is a missing alignment for the feature difference method in the two small triangles at the origin. We also note that even though most of the pink area and the blue area in Figure 1 don’t overlap, the probabilities that the pair of data \\((x_{1}, x_{2})\\) falling into those non-overlapping regions could be small, especially if the absolute value of either coordinate is large. See the contours of multivariate normal distribution in Figure 1. Figure 7.1: Matching regions from the optimal rule (in pink) and the method based on feature difference (in blue). The contours of multivariate normal distribution with means \\((1, -1)\\) (unmatching case) and \\((1, 1)\\) (matching case) are marked in black and red, respectively, where the covariance is identity. Comparison with random forest. We also conducted a small scale simulation to compare the optimal matching rule with the random forest method applied on the feature difference. The traning data include 50 observations from \\(N(1, 1)\\) and \\(N(-1, 1)\\). There are additional 10 observations from each of the group serving as the testing data. We evaluate the percentage of the matching errors on the pairs of the testing data. We repeated the whole simulation 100 times. The accuracy rates are 0.762 and 0.708 for the optimal matching rule and the random forest applied on the differences of the measurements, respectively. 65% out of the 100 repetitions, the former method has higher accuracy than the latter method. 7.4.2 Topics needs exploration How to quantify the matching error rates when the training data only inlcude a small part of many potential groups? How training errors change as more and more features are collected (dimension \\(p\\) increases), where only a small fraction of those features carry useful signals (feature selection). "],
["outreach-activities.html", "Chapter 8 Outreach activities 8.1 Book on Forensic Science and Statistics", " Chapter 8 Outreach activities CSAFE has several ongoing outreach projects. 8.1 Book on Forensic Science and Statistics Project members: Kiegan Rice Alicia Carriquiry Hal Stern (UCI) General book outline: Chapter 1: Introduction Chapter 2: Analysis of Forensic Evidence Drafted. In the editing stage. Chapter 3: The Path to the Witness Stand Drafted. In the editing stage. Chapter 4: Communicating Evidence in the Courtroom Not drafted. In the writing stage. Chapter 5: Conclusions "],
["reproducibility-in-research.html", "Chapter 9 Reproducibility in Research 9.1 Computational Reproducibility", " Chapter 9 Reproducibility in Research We are working on improving CSAFE’s reproducibility in research. 9.1 Computational Reproducibility CSAFE’s work is driven by a goal of providing open-source research, including open-source data and open-source algorithms. We believe in transparency and honesty in research, and allowing others to see ``under the hood\" of algorithms that may be used to analyze evidence. In the process of furthering that goal, many of our researchers implement methods and data analysis in R, an open-source scripting language often used in data science and statistics. R and python are both languages which encourage (and rely on) user-developed packages to enhance the language’s ability to perform specific data manipulation and modeling tasks. Many software packages are still under development; that is, functions and methods that exist in a package are subject to changes over time by the developers. This affects our work as statistics researchers in three major ways: - Code to run data analyses and obtain quantitative results may be affected by package updates. This can lead to differing quantitative results and lack of reproducibility of a method. - Researchers’ own packages in development (e.g., bullet pipeline, shoe analysis pipeline) are vulnerable to changes in any package dependencies. - Group collaboration efforts on a developing package can lead to miscommunications, including changes in code that affect others’ results (sorry again, Charlotte!) So, how does this practically affect CSAFE’s research teams, and how can we manage it? For example, consider the bullet analysis ``pipeline\" and some of the R packages that are involved at different steps of the process (this is not exhaustive): Just to go from a two raw x3p files to a quantitative result of a similarity score between the two bullet LEAs, we need a lot of R packages. When something in those packages change (e.g., default requirements for a tidyverse function), it can break our code! In addition, different people on the project may be running the same script to analyze bullets but be using different versions of packages. Because packages like bulletxtrctr and the methodology for different steps (e.g., groove ID, crosscut ID) are still changing and new approaches are being added, we need to be thoughtful and careful about reporting results and working to make sure our results are reproducible by other team members and outside users. This is not isolated to just the bullet project, either. Let’s consider three major projects at CSAFE and their associated packages: bulletxtrctr and x3ptools for the bullet project, handwriter for the handwriting project, and shoeprintr for the shoe project. A total of 109 different packages are involved!!!!! This is a LOT of packages, and it leaves ``open forensic science in R\" very vulnerable to changes in other packages. To remedy this, we are developing a package to help manage dependencies and track when functions change. It is ongoing work, and by the next spotlight I should be able to share some use cases, examples, and functionality that will majorly assist our package development workflow. "],
["references.html", "References", " References "]
]
